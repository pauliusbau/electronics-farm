
led_dimmer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e0  00800060  000019bc  00001a50  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000026  00800140  00800140  00001b30  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00001b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000631  00000000  00000000  00001b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000018f3  00000000  00000000  000021a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005e3  00000000  00000000  00003a94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001c4c  00000000  00000000  00004077  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003b0  00000000  00000000  00005cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000061c  00000000  00000000  00006074  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b02  00000000  00000000  00006690  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000210  00000000  00000000  00007192  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	51 c0       	rjmp	.+162    	; 0xa4 <__ctors_end>
       2:	40 c5       	rjmp	.+2688   	; 0xa84 <__vector_1>
       4:	d0 c8       	rjmp	.-3680   	; 0xfffff1a6 <__eeprom_end+0xff7ef1a6>
       6:	69 c0       	rjmp	.+210    	; 0xda <__bad_interrupt>
       8:	68 c0       	rjmp	.+208    	; 0xda <__bad_interrupt>
       a:	67 c0       	rjmp	.+206    	; 0xda <__bad_interrupt>
       c:	12 c8       	rjmp	.-4060   	; 0xfffff032 <__eeprom_end+0xff7ef032>
       e:	65 c0       	rjmp	.+202    	; 0xda <__bad_interrupt>
      10:	64 c0       	rjmp	.+200    	; 0xda <__bad_interrupt>
      12:	95 c3       	rjmp	.+1834   	; 0x73e <__vector_9>
      14:	62 c0       	rjmp	.+196    	; 0xda <__bad_interrupt>
      16:	61 c0       	rjmp	.+194    	; 0xda <__bad_interrupt>
      18:	60 c0       	rjmp	.+192    	; 0xda <__bad_interrupt>
      1a:	5f c0       	rjmp	.+190    	; 0xda <__bad_interrupt>
      1c:	5e c0       	rjmp	.+188    	; 0xda <__bad_interrupt>
      1e:	5d c0       	rjmp	.+186    	; 0xda <__bad_interrupt>
      20:	5c c0       	rjmp	.+184    	; 0xda <__bad_interrupt>
      22:	5b c0       	rjmp	.+182    	; 0xda <__bad_interrupt>
      24:	5a c0       	rjmp	.+180    	; 0xda <__bad_interrupt>

00000026 <rodykle>:
      26:	3c 00                                               <.

00000028 <rodykle_n>:
      28:	3c 0a 00                                            <..

0000002b <dvitaskis>:
      2b:	3a 00                                               :.

0000002d <dvitaskis_n>:
      2d:	3a 0a 00                                            :..

00000030 <dvitaskis_t>:
      30:	3a 20 00                                            : .

00000033 <procentas>:
      33:	25 00                                               %.

00000035 <procentas_n>:
      35:	25 0a 00                                            %..

00000038 <sekunde>:
      38:	73 00                                               s.

0000003a <sekunde_n>:
      3a:	73 0a 00                                            s..

0000003d <tilde>:
      3d:	7e 00                                               ~.

0000003f <minusas>:
      3f:	2d 00                                               -.

00000041 <R>:
      41:	52 00                                               R.

00000043 <T>:
      43:	54 00                                               T.

00000045 <I>:
      45:	49 00                                               I.

00000047 <K>:
      47:	4b 00                                               K.

00000049 <Menu10>:
      49:	4f 4e 2f 4f 46 46 00                                ON/OFF.

00000050 <Menu11>:
      50:	50 49 52 2f 4c 44 52 00                             PIR/LDR.

00000058 <Menu12>:
      58:	50 49 52 00                                         PIR.

0000005c <Menu13>:
      5c:	4c 44 52 00                                         LDR.

00000060 <Menu14>:
      60:	43 4f 4e 46 49 47 00                                CONFIG.

00000067 <Menu15>:
      67:	45 58 49 54 00                                      EXIT.

0000006c <Menu20>:
      6c:	4f 4e 00                                            ON.

0000006f <Menu21>:
      6f:	4f 46 46 00                                         OFF.

00000073 <Menu30>:
      73:	4d 69 6e 50 57 4d 00                                MinPWM.

0000007a <Menu31>:
      7a:	4d 61 78 50 57 4d 00                                MaxPWM.

00000081 <Menu32>:
      81:	54 69 6d 65 4f 75 74 00                             TimeOut.

00000089 <Menu33>:
      89:	4c 44 52 74 68 00                                   LDRth.

0000008f <Menu34>:
      8f:	4c 44 52 69 6e 76 00                                LDRinv.

00000096 <Menu35>:
      96:	41 44 43 67 61 69 6e 00                             ADCgain.

0000009e <Menu36>:
      9e:	45 58 49 54 00 00                                   EXIT..

000000a4 <__ctors_end>:
      a4:	11 24       	eor	r1, r1
      a6:	1f be       	out	0x3f, r1	; 63
      a8:	cf e5       	ldi	r28, 0x5F	; 95
      aa:	d4 e0       	ldi	r29, 0x04	; 4
      ac:	de bf       	out	0x3e, r29	; 62
      ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
      b0:	11 e0       	ldi	r17, 0x01	; 1
      b2:	a0 e6       	ldi	r26, 0x60	; 96
      b4:	b0 e0       	ldi	r27, 0x00	; 0
      b6:	ec eb       	ldi	r30, 0xBC	; 188
      b8:	f9 e1       	ldi	r31, 0x19	; 25
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <.do_copy_data_start>

000000bc <.do_copy_data_loop>:
      bc:	05 90       	lpm	r0, Z+
      be:	0d 92       	st	X+, r0

000000c0 <.do_copy_data_start>:
      c0:	a0 34       	cpi	r26, 0x40	; 64
      c2:	b1 07       	cpc	r27, r17
      c4:	d9 f7       	brne	.-10     	; 0xbc <.do_copy_data_loop>

000000c6 <__do_clear_bss>:
      c6:	11 e0       	ldi	r17, 0x01	; 1
      c8:	a0 e4       	ldi	r26, 0x40	; 64
      ca:	b1 e0       	ldi	r27, 0x01	; 1
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
      ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
      d0:	a6 36       	cpi	r26, 0x66	; 102
      d2:	b1 07       	cpc	r27, r17
      d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
      d6:	6d d9       	rcall	.-3366   	; 0xfffff3b2 <__eeprom_end+0xff7ef3b2>
      d8:	6f cc       	rjmp	.-1826   	; 0xfffff9b8 <__eeprom_end+0xff7ef9b8>

000000da <__bad_interrupt>:
      da:	92 cf       	rjmp	.-220    	; 0x0 <__vectors>

000000dc <init_uart>:

}

void init_uart(unsigned int ubrr) {
	/* Set baud rate */
	UBRRH = (unsigned char)(ubrr>>8 ) ;
      dc:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)(ubrr);
      de:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
//	UCSRB |= (1<<RXEN);
	UCSRB |= (1<<TXEN);
      e0:	53 9a       	sbi	0x0a, 3	; 10
	/* Set frame format: 8data, 1stop bit */
	UCSRC = (1<<URSEL)|(3<<UCSZ0); //|(1<<USBS)
      e2:	86 e8       	ldi	r24, 0x86	; 134
      e4:	80 bd       	out	0x20, r24	; 32


}
      e6:	08 95       	ret

000000e8 <send_char>:


void send_char(unsigned char data) {
	/* Wait for empty transmit buffer */
	while (!(UCSRA & (1<<UDRE)));
      e8:	5d 9b       	sbis	0x0b, 5	; 11
      ea:	fe cf       	rjmp	.-4      	; 0xe8 <send_char>
		/* Put data into buffer, sends the data */
		UDR = data;
      ec:	8c b9       	out	0x0c, r24	; 12
}
      ee:	08 95       	ret

000000f0 <send_string>:

void send_string(char *data) {
      f0:	fc 01       	movw	r30, r24
      f2:	04 c0       	rjmp	.+8      	; 0xfc <send_string+0xc>
}


void send_char(unsigned char data) {
	/* Wait for empty transmit buffer */
	while (!(UCSRA & (1<<UDRE)));
      f4:	5d 9b       	sbis	0x0b, 5	; 11
      f6:	fe cf       	rjmp	.-4      	; 0xf4 <send_string+0x4>
		/* Put data into buffer, sends the data */
		UDR = data;
      f8:	8c b9       	out	0x0c, r24	; 12
}

void send_string(char *data) {
	while (*data) {
		send_char(*data);
		data++;
      fa:	31 96       	adiw	r30, 0x01	; 1
		/* Put data into buffer, sends the data */
		UDR = data;
}

void send_string(char *data) {
	while (*data) {
      fc:	80 81       	ld	r24, Z
      fe:	88 23       	and	r24, r24
     100:	c9 f7       	brne	.-14     	; 0xf4 <send_string+0x4>
		send_char(*data);
		data++;
	}
}
     102:	08 95       	ret

00000104 <receiveByte>:

unsigned char receiveByte( void )
{
	unsigned char data, status;
	
	while(!(UCSRA & (1<<RXC))); 	// Wait for incomming data
     104:	5f 9b       	sbis	0x0b, 7	; 11
     106:	fe cf       	rjmp	.-4      	; 0x104 <receiveByte>
	
	status = UCSRA;
     108:	8b b1       	in	r24, 0x0b	; 11
	data = UDR;
     10a:	8c b1       	in	r24, 0x0c	; 12
	
	return(data);
}
     10c:	08 95       	ret

0000010e <INT_init>:

void INT_init()
{	
	
//	MCUCR&=~(_BV(ISC01)) | ~(_BV(ISC00));
	MCUCR|=_BV(ISC01) | _BV(ISC00);
     10e:	85 b7       	in	r24, 0x35	; 53
     110:	83 60       	ori	r24, 0x03	; 3
     112:	85 bf       	out	0x35, r24	; 53

	MCUCR&=~(_BV(ISC10));
     114:	85 b7       	in	r24, 0x35	; 53
     116:	8b 7f       	andi	r24, 0xFB	; 251
     118:	85 bf       	out	0x35, r24	; 53
	MCUCR|=_BV(ISC11);
     11a:	85 b7       	in	r24, 0x35	; 53
     11c:	88 60       	ori	r24, 0x08	; 8
     11e:	85 bf       	out	0x35, r24	; 53


//	GICR|=_BV(INT0);
	GICR|=_BV(INT1);
     120:	8b b7       	in	r24, 0x3b	; 59
     122:	80 68       	ori	r24, 0x80	; 128
     124:	8b bf       	out	0x3b, r24	; 59

}
     126:	08 95       	ret

00000128 <ADC_init>:


void ADC_init(){
//ADC nustatymai	
	ADCSRA |=_BV(ADEN);	
     128:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA |=_BV(ADPS0) | _BV(ADPS1) | _BV(ADPS2); //| _BV(ADIE);
     12a:	86 b1       	in	r24, 0x06	; 6
     12c:	87 60       	ori	r24, 0x07	; 7
     12e:	86 b9       	out	0x06, r24	; 6

	ADMUX  |= _BV(MUX0) | _BV(MUX2);
     130:	87 b1       	in	r24, 0x07	; 7
     132:	85 60       	ori	r24, 0x05	; 5
     134:	87 b9       	out	0x07, r24	; 7
	ADMUX  &=~(_BV(REFS1));
     136:	3f 98       	cbi	0x07, 7	; 7
	ADMUX  |= _BV(REFS0);
     138:	3e 9a       	sbi	0x07, 6	; 7

	ADCSRA |=_BV(ADSC);
     13a:	36 9a       	sbi	0x06, 6	; 6

	
}
     13c:	08 95       	ret

0000013e <timer_init_1>:


void timer_init_1(){ //count down timer
 
      TCCR1B=(1<<WGM12)|(1<<CS11)|(1<<CS10);
     13e:	8b e0       	ldi	r24, 0x0B	; 11
     140:	8e bd       	out	0x2e, r24	; 46
      OCR1A=0x007C;
     142:	8c e7       	ldi	r24, 0x7C	; 124
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	9b bd       	out	0x2b, r25	; 43
     148:	8a bd       	out	0x2a, r24	; 42

}
     14a:	08 95       	ret

0000014c <timer_init_0>:

void timer_init_0()
{
	TIFR |= (1<<TOV0);		//set interrupt on overflow
     14c:	88 b7       	in	r24, 0x38	; 56
     14e:	81 60       	ori	r24, 0x01	; 1
     150:	88 bf       	out	0x38, r24	; 56
	TIMSK |= (1<<TOIE0);
     152:	89 b7       	in	r24, 0x39	; 57
     154:	81 60       	ori	r24, 0x01	; 1
     156:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 223;
     158:	8f ed       	ldi	r24, 0xDF	; 223
     15a:	82 bf       	out	0x32, r24	; 50
}
     15c:	08 95       	ret

0000015e <start_timer0>:

void start_timer0()	{TCCR0 |= (1<<CS00)|(1<<CS02); }
     15e:	83 b7       	in	r24, 0x33	; 51
     160:	85 60       	ori	r24, 0x05	; 5
     162:	83 bf       	out	0x33, r24	; 51
     164:	08 95       	ret

00000166 <stop_timer0>:
void stop_timer0()	{TCCR0 =0x00;}
     166:	13 be       	out	0x33, r1	; 51
     168:	08 95       	ret

0000016a <start_timer1>:

void start_timer1() {TIMSK |=(_BV(OCIE1A));}
     16a:	89 b7       	in	r24, 0x39	; 57
     16c:	80 61       	ori	r24, 0x10	; 16
     16e:	89 bf       	out	0x39, r24	; 57
     170:	08 95       	ret

00000172 <stop_timer1>:
void stop_timer1()	{TIMSK &=~(_BV(OCIE1A));}
     172:	89 b7       	in	r24, 0x39	; 57
     174:	8f 7e       	andi	r24, 0xEF	; 239
     176:	89 bf       	out	0x39, r24	; 57
     178:	08 95       	ret

0000017a <timer2_set>:

void timer2_set(unsigned char skaicius){ //TIMER2 valdymui: nustato OCR2 bei visiskai isjungia TIMER2, jei nustatom, kad OCR2==0  
	OCR2=skaicius;	
     17a:	83 bd       	out	0x23, r24	; 35

	if (skaicius==0) TCCR2 &=~((1<<CS21)|(1<<CS20)|(1<<COM21)); // No clock source || Normal port operation, OC2 disconnected
     17c:	88 23       	and	r24, r24
     17e:	19 f4       	brne	.+6      	; 0x186 <timer2_set+0xc>
     180:	85 b5       	in	r24, 0x25	; 37
     182:	8c 7d       	andi	r24, 0xDC	; 220
     184:	07 c0       	rjmp	.+14     	; 0x194 <timer2_set+0x1a>
	else if (TCCR2!=0x6B) TCCR2 |= (1<<CS21)|(1<<CS20)|(1<<COM21); // /32 clock source prescaler || Clear OC2 on Compare Match, set OC2 at BOTTOM (PWM->OC2)
     186:	85 b5       	in	r24, 0x25	; 37
     188:	8b 36       	cpi	r24, 0x6B	; 107
     18a:	19 f0       	breq	.+6      	; 0x192 <timer2_set+0x18>
     18c:	85 b5       	in	r24, 0x25	; 37
     18e:	83 62       	ori	r24, 0x23	; 35
     190:	01 c0       	rjmp	.+2      	; 0x194 <timer2_set+0x1a>
	else TCCR2=TCCR2;
     192:	85 b5       	in	r24, 0x25	; 37
     194:	85 bd       	out	0x25, r24	; 37
     196:	08 95       	ret

00000198 <EEPROM_write>:


void EEPROM_write(unsigned int uiAddress, unsigned long int ucData)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEWE));
     198:	e1 99       	sbic	0x1c, 1	; 28
     19a:	fe cf       	rjmp	.-4      	; 0x198 <EEPROM_write>
/* Set up address and data registers */
EEAR = uiAddress;
     19c:	9f bb       	out	0x1f, r25	; 31
     19e:	8e bb       	out	0x1e, r24	; 30
EEDR = ucData;
     1a0:	4d bb       	out	0x1d, r20	; 29

/* Write logical one to EEMWE */
EECR |= (1<<EEMWE);
     1a2:	e2 9a       	sbi	0x1c, 2	; 28
/* Start eeprom write by setting EEWE */
EECR |= (1<<EEWE);
     1a4:	e1 9a       	sbi	0x1c, 1	; 28
}
     1a6:	08 95       	ret

000001a8 <EEPROM_read>:

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEWE))
     1a8:	e1 99       	sbic	0x1c, 1	; 28
     1aa:	fe cf       	rjmp	.-4      	; 0x1a8 <EEPROM_read>
;
/* Set up address register */
EEAR = uiAddress;
     1ac:	9f bb       	out	0x1f, r25	; 31
     1ae:	8e bb       	out	0x1e, r24	; 30
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
     1b0:	e0 9a       	sbi	0x1c, 0	; 28
/* Return data from data register */
return EEDR;
     1b2:	8d b3       	in	r24, 0x1d	; 29
}
     1b4:	08 95       	ret

000001b6 <first_time_boot>:
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEWE))
     1b6:	e1 99       	sbic	0x1c, 1	; 28
     1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <first_time_boot>
;
/* Set up address register */
EEAR = uiAddress;
     1ba:	8c e0       	ldi	r24, 0x0C	; 12
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	9f bb       	out	0x1f, r25	; 31
     1c0:	8e bb       	out	0x1e, r24	; 30
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
     1c2:	e0 9a       	sbi	0x1c, 0	; 28
/* Return data from data register */
return EEDR;
     1c4:	8d b3       	in	r24, 0x1d	; 29

void first_time_boot(){

unsigned int first_boot=EEPROM_read(12);

if(first_boot!=0x55){
     1c6:	85 35       	cpi	r24, 0x55	; 85
     1c8:	09 f4       	brne	.+2      	; 0x1cc <first_time_boot+0x16>
     1ca:	53 c0       	rjmp	.+166    	; 0x272 <first_time_boot+0xbc>
	EEPROM_write(24, 0xFF); //setting PWM to fully on
     1cc:	88 e1       	ldi	r24, 0x18	; 24
     1ce:	90 e0       	ldi	r25, 0x00	; 0
     1d0:	4f ef       	ldi	r20, 0xFF	; 255
     1d2:	50 e0       	ldi	r21, 0x00	; 0
     1d4:	60 e0       	ldi	r22, 0x00	; 0
     1d6:	70 e0       	ldi	r23, 0x00	; 0
     1d8:	df df       	rcall	.-66     	; 0x198 <EEPROM_write>
	EEPROM_write(30, 0x08);//minPWM
     1da:	8e e1       	ldi	r24, 0x1E	; 30
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	48 e0       	ldi	r20, 0x08	; 8
     1e0:	50 e0       	ldi	r21, 0x00	; 0
     1e2:	60 e0       	ldi	r22, 0x00	; 0
     1e4:	70 e0       	ldi	r23, 0x00	; 0
     1e6:	d8 df       	rcall	.-80     	; 0x198 <EEPROM_write>
	EEPROM_write(31, 0xFF);//maxPWM
     1e8:	8f e1       	ldi	r24, 0x1F	; 31
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	4f ef       	ldi	r20, 0xFF	; 255
     1ee:	50 e0       	ldi	r21, 0x00	; 0
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	70 e0       	ldi	r23, 0x00	; 0
     1f4:	d1 df       	rcall	.-94     	; 0x198 <EEPROM_write>
	EEPROM_write(32, 25);//timeOUT
     1f6:	80 e2       	ldi	r24, 0x20	; 32
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	49 e1       	ldi	r20, 0x19	; 25
     1fc:	50 e0       	ldi	r21, 0x00	; 0
     1fe:	60 e0       	ldi	r22, 0x00	; 0
     200:	70 e0       	ldi	r23, 0x00	; 0
     202:	ca df       	rcall	.-108    	; 0x198 <EEPROM_write>
	EEPROM_write(33, 20);//LDRth
     204:	81 e2       	ldi	r24, 0x21	; 33
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	44 e1       	ldi	r20, 0x14	; 20
     20a:	50 e0       	ldi	r21, 0x00	; 0
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	70 e0       	ldi	r23, 0x00	; 0
     210:	c3 df       	rcall	.-122    	; 0x198 <EEPROM_write>
	EEPROM_write(34, 0);//LDRinv
     212:	82 e2       	ldi	r24, 0x22	; 34
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	40 e0       	ldi	r20, 0x00	; 0
     218:	50 e0       	ldi	r21, 0x00	; 0
     21a:	60 e0       	ldi	r22, 0x00	; 0
     21c:	70 e0       	ldi	r23, 0x00	; 0
     21e:	bc df       	rcall	.-136    	; 0x198 <EEPROM_write>
	EEPROM_write(35, 0);//LDRkoef
     220:	83 e2       	ldi	r24, 0x23	; 35
     222:	90 e0       	ldi	r25, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	60 e0       	ldi	r22, 0x00	; 0
     22a:	70 e0       	ldi	r23, 0x00	; 0
     22c:	b5 df       	rcall	.-150    	; 0x198 <EEPROM_write>
	EEPROM_write(36, 10);//ADCgain
     22e:	84 e2       	ldi	r24, 0x24	; 36
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	4a e0       	ldi	r20, 0x0A	; 10
     234:	50 e0       	ldi	r21, 0x00	; 0
     236:	60 e0       	ldi	r22, 0x00	; 0
     238:	70 e0       	ldi	r23, 0x00	; 0
     23a:	ae df       	rcall	.-164    	; 0x198 <EEPROM_write>

	EEPROM_write(12, 0x55); //making a note, that first boot is over
     23c:	8c e0       	ldi	r24, 0x0C	; 12
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	45 e5       	ldi	r20, 0x55	; 85
     242:	50 e0       	ldi	r21, 0x00	; 0
     244:	60 e0       	ldi	r22, 0x00	; 0
     246:	70 e0       	ldi	r23, 0x00	; 0
     248:	a7 df       	rcall	.-178    	; 0x198 <EEPROM_write>
     24a:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     24c:	48 ec       	ldi	r20, 0xC8	; 200
     24e:	50 e0       	ldi	r21, 0x00	; 0

	for(unsigned char k=0; k<=5; k++){
	PORTDDR(LED_PORT)^= (1<<LED3_BIT);
     250:	81 b3       	in	r24, 0x11	; 17
     252:	80 58       	subi	r24, 0x80	; 128
     254:	81 bb       	out	0x11, r24	; 17
     256:	84 ec       	ldi	r24, 0xC4	; 196
     258:	99 e0       	ldi	r25, 0x09	; 9
     25a:	fa 01       	movw	r30, r20
     25c:	31 97       	sbiw	r30, 0x01	; 1
     25e:	f1 f7       	brne	.-4      	; 0x25c <first_time_boot+0xa6>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     260:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     262:	d9 f7       	brne	.-10     	; 0x25a <first_time_boot+0xa4>
	EEPROM_write(35, 0);//LDRkoef
	EEPROM_write(36, 10);//ADCgain

	EEPROM_write(12, 0x55); //making a note, that first boot is over

	for(unsigned char k=0; k<=5; k++){
     264:	2f 5f       	subi	r18, 0xFF	; 255
     266:	26 30       	cpi	r18, 0x06	; 6
     268:	99 f7       	brne	.-26     	; 0x250 <first_time_boot+0x9a>
	PORTDDR(LED_PORT)^= (1<<LED3_BIT);
	_delay_ms(250);
	}
	
	send_string("--- FIRST BOOT ---");
     26a:	80 e6       	ldi	r24, 0x60	; 96
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	40 df       	rcall	.-384    	; 0xf0 <send_string>
     270:	08 95       	ret
     272:	20 e0       	ldi	r18, 0x00	; 0
     274:	48 ec       	ldi	r20, 0xC8	; 200
     276:	50 e0       	ldi	r21, 0x00	; 0
	
}

else{  //not the first boot
	for(unsigned char k=0; k<=5; k++){
	PORTDDR(LED_PORT)^= (1<<LED3_BIT);
     278:	81 b3       	in	r24, 0x11	; 17
     27a:	80 58       	subi	r24, 0x80	; 128
     27c:	81 bb       	out	0x11, r24	; 17
     27e:	84 ef       	ldi	r24, 0xF4	; 244
     280:	91 e0       	ldi	r25, 0x01	; 1
     282:	fa 01       	movw	r30, r20
     284:	31 97       	sbiw	r30, 0x01	; 1
     286:	f1 f7       	brne	.-4      	; 0x284 <first_time_boot+0xce>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     288:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     28a:	d9 f7       	brne	.-10     	; 0x282 <first_time_boot+0xcc>
	send_string("--- FIRST BOOT ---");
	
}

else{  //not the first boot
	for(unsigned char k=0; k<=5; k++){
     28c:	2f 5f       	subi	r18, 0xFF	; 255
     28e:	26 30       	cpi	r18, 0x06	; 6
     290:	99 f7       	brne	.-26     	; 0x278 <first_time_boot+0xc2>
     292:	08 95       	ret

00000294 <read_config>:
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEWE))
     294:	e1 99       	sbic	0x1c, 1	; 28
     296:	fe cf       	rjmp	.-4      	; 0x294 <read_config>
;
/* Set up address register */
EEAR = uiAddress;
     298:	8e e1       	ldi	r24, 0x1E	; 30
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	9f bb       	out	0x1f, r25	; 31
     29e:	8e bb       	out	0x1e, r24	; 30
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
     2a0:	e0 9a       	sbi	0x1c, 0	; 28
/* Return data from data register */
return EEDR;
     2a2:	8d b3       	in	r24, 0x1d	; 29

//--------------nuskaitom config is eeprom-------

void read_config(){

	minPWM=EEPROM_read(30);
     2a4:	80 93 40 01 	sts	0x0140, r24
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEWE))
     2a8:	e1 99       	sbic	0x1c, 1	; 28
     2aa:	fe cf       	rjmp	.-4      	; 0x2a8 <read_config+0x14>
;
/* Set up address register */
EEAR = uiAddress;
     2ac:	8f e1       	ldi	r24, 0x1F	; 31
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	9f bb       	out	0x1f, r25	; 31
     2b2:	8e bb       	out	0x1e, r24	; 30
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
     2b4:	e0 9a       	sbi	0x1c, 0	; 28
/* Return data from data register */
return EEDR;
     2b6:	8d b3       	in	r24, 0x1d	; 29
//--------------nuskaitom config is eeprom-------

void read_config(){

	minPWM=EEPROM_read(30);
	maxPWM=EEPROM_read(31);
     2b8:	80 93 41 01 	sts	0x0141, r24
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEWE))
     2bc:	e1 99       	sbic	0x1c, 1	; 28
     2be:	fe cf       	rjmp	.-4      	; 0x2bc <read_config+0x28>
;
/* Set up address register */
EEAR = uiAddress;
     2c0:	80 e2       	ldi	r24, 0x20	; 32
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	9f bb       	out	0x1f, r25	; 31
     2c6:	8e bb       	out	0x1e, r24	; 30
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
     2c8:	e0 9a       	sbi	0x1c, 0	; 28
/* Return data from data register */
return EEDR;
     2ca:	8d b3       	in	r24, 0x1d	; 29

void read_config(){

	minPWM=EEPROM_read(30);
	maxPWM=EEPROM_read(31);
	timeOUT=EEPROM_read(32);
     2cc:	80 93 42 01 	sts	0x0142, r24
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEWE))
     2d0:	e1 99       	sbic	0x1c, 1	; 28
     2d2:	fe cf       	rjmp	.-4      	; 0x2d0 <read_config+0x3c>
;
/* Set up address register */
EEAR = uiAddress;
     2d4:	81 e2       	ldi	r24, 0x21	; 33
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	9f bb       	out	0x1f, r25	; 31
     2da:	8e bb       	out	0x1e, r24	; 30
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
     2dc:	e0 9a       	sbi	0x1c, 0	; 28
/* Return data from data register */
return EEDR;
     2de:	8d b3       	in	r24, 0x1d	; 29
void read_config(){

	minPWM=EEPROM_read(30);
	maxPWM=EEPROM_read(31);
	timeOUT=EEPROM_read(32);
	LDRth=EEPROM_read(33);
     2e0:	80 93 43 01 	sts	0x0143, r24
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEWE))
     2e4:	e1 99       	sbic	0x1c, 1	; 28
     2e6:	fe cf       	rjmp	.-4      	; 0x2e4 <read_config+0x50>
;
/* Set up address register */
EEAR = uiAddress;
     2e8:	82 e2       	ldi	r24, 0x22	; 34
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	9f bb       	out	0x1f, r25	; 31
     2ee:	8e bb       	out	0x1e, r24	; 30
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
     2f0:	e0 9a       	sbi	0x1c, 0	; 28
/* Return data from data register */
return EEDR;
     2f2:	8d b3       	in	r24, 0x1d	; 29

	minPWM=EEPROM_read(30);
	maxPWM=EEPROM_read(31);
	timeOUT=EEPROM_read(32);
	LDRth=EEPROM_read(33);
	LDRinv=EEPROM_read(34);
     2f4:	80 93 44 01 	sts	0x0144, r24
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEWE))
     2f8:	e1 99       	sbic	0x1c, 1	; 28
     2fa:	fe cf       	rjmp	.-4      	; 0x2f8 <read_config+0x64>
;
/* Set up address register */
EEAR = uiAddress;
     2fc:	83 e2       	ldi	r24, 0x23	; 35
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	9f bb       	out	0x1f, r25	; 31
     302:	8e bb       	out	0x1e, r24	; 30
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
     304:	e0 9a       	sbi	0x1c, 0	; 28
/* Return data from data register */
return EEDR;
     306:	8d b3       	in	r24, 0x1d	; 29
	minPWM=EEPROM_read(30);
	maxPWM=EEPROM_read(31);
	timeOUT=EEPROM_read(32);
	LDRth=EEPROM_read(33);
	LDRinv=EEPROM_read(34);
	LDRkoef=EEPROM_read(35);
     308:	80 93 45 01 	sts	0x0145, r24
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEWE))
     30c:	e1 99       	sbic	0x1c, 1	; 28
     30e:	fe cf       	rjmp	.-4      	; 0x30c <read_config+0x78>
;
/* Set up address register */
EEAR = uiAddress;
     310:	84 e2       	ldi	r24, 0x24	; 36
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	9f bb       	out	0x1f, r25	; 31
     316:	8e bb       	out	0x1e, r24	; 30
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
     318:	e0 9a       	sbi	0x1c, 0	; 28
/* Return data from data register */
return EEDR;
     31a:	8d b3       	in	r24, 0x1d	; 29
	maxPWM=EEPROM_read(31);
	timeOUT=EEPROM_read(32);
	LDRth=EEPROM_read(33);
	LDRinv=EEPROM_read(34);
	LDRkoef=EEPROM_read(35);
	ADCgain=EEPROM_read(36);
     31c:	80 93 f7 00 	sts	0x00F7, r24

}
     320:	08 95       	ret

00000322 <write_config>:

//--------------irasom config i eeprom-------

void write_config(){

	EEPROM_write(30, minPWM);
     322:	40 91 40 01 	lds	r20, 0x0140
     326:	50 e0       	ldi	r21, 0x00	; 0
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	70 e0       	ldi	r23, 0x00	; 0
     32c:	8e e1       	ldi	r24, 0x1E	; 30
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	33 df       	rcall	.-410    	; 0x198 <EEPROM_write>
	EEPROM_write(31, maxPWM);
     332:	40 91 41 01 	lds	r20, 0x0141
     336:	50 e0       	ldi	r21, 0x00	; 0
     338:	60 e0       	ldi	r22, 0x00	; 0
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	8f e1       	ldi	r24, 0x1F	; 31
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	2b df       	rcall	.-426    	; 0x198 <EEPROM_write>
	EEPROM_write(32, timeOUT);
     342:	40 91 42 01 	lds	r20, 0x0142
     346:	50 e0       	ldi	r21, 0x00	; 0
     348:	60 e0       	ldi	r22, 0x00	; 0
     34a:	70 e0       	ldi	r23, 0x00	; 0
     34c:	80 e2       	ldi	r24, 0x20	; 32
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	23 df       	rcall	.-442    	; 0x198 <EEPROM_write>
	EEPROM_write(33, LDRth);
     352:	40 91 43 01 	lds	r20, 0x0143
     356:	50 e0       	ldi	r21, 0x00	; 0
     358:	60 e0       	ldi	r22, 0x00	; 0
     35a:	70 e0       	ldi	r23, 0x00	; 0
     35c:	81 e2       	ldi	r24, 0x21	; 33
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	1b df       	rcall	.-458    	; 0x198 <EEPROM_write>
	EEPROM_write(34, LDRinv);
     362:	40 91 44 01 	lds	r20, 0x0144
     366:	50 e0       	ldi	r21, 0x00	; 0
     368:	60 e0       	ldi	r22, 0x00	; 0
     36a:	70 e0       	ldi	r23, 0x00	; 0
     36c:	82 e2       	ldi	r24, 0x22	; 34
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	13 df       	rcall	.-474    	; 0x198 <EEPROM_write>
	EEPROM_write(35, LDRkoef);
     372:	40 91 45 01 	lds	r20, 0x0145
     376:	50 e0       	ldi	r21, 0x00	; 0
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	70 e0       	ldi	r23, 0x00	; 0
     37c:	83 e2       	ldi	r24, 0x23	; 35
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	0b df       	rcall	.-490    	; 0x198 <EEPROM_write>
	EEPROM_write(36, ADCgain);
     382:	40 91 f7 00 	lds	r20, 0x00F7
     386:	50 e0       	ldi	r21, 0x00	; 0
     388:	60 e0       	ldi	r22, 0x00	; 0
     38a:	70 e0       	ldi	r23, 0x00	; 0
     38c:	84 e2       	ldi	r24, 0x24	; 36
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	03 df       	rcall	.-506    	; 0x198 <EEPROM_write>

}	
     392:	08 95       	ret

00000394 <read_keypad>:

char read_keypad () {	// funkcija klausytis klaviaturos
     394:	90 91 5b 01 	lds	r25, 0x015B
     398:	80 e0       	ldi	r24, 0x00	; 0


	while(1) { 

		
		if (bit_is_clear(PINB, PB6)) {
     39a:	b6 9b       	sbis	0x16, 6	; 22
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <read_keypad+0xe>
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	fc cf       	rjmp	.-8      	; 0x39a <read_keypad+0x6>
			if (button_pressed == 0) {
     3a2:	99 23       	and	r25, r25
     3a4:	19 f4       	brne	.+6      	; 0x3ac <read_keypad+0x18>
     3a6:	81 e0       	ldi	r24, 0x01	; 1
     3a8:	91 e0       	ldi	r25, 0x01	; 1
     3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <read_keypad+0x1c>
		else {
			button_pressed = 0;
		//	break; // kad skaitmenis visa laika rodytu
		}

		if (button_pressed == 1) {
     3ac:	91 30       	cpi	r25, 0x01	; 1
     3ae:	a9 f7       	brne	.-22     	; 0x39a <read_keypad+0x6>
     3b0:	90 93 5b 01 	sts	0x015B, r25
		}		
	}

	return which_button;

}
     3b4:	08 95       	ret

000003b6 <nuostato_radimas>:


unsigned char nuostato_radimas(char nustatymas){
     3b6:	28 2f       	mov	r18, r24
     3b8:	e2 e1       	ldi	r30, 0x12	; 18
     3ba:	f1 e0       	ldi	r31, 0x01	; 1
     3bc:	90 e0       	ldi	r25, 0x00	; 0
char eilnr;
for(unsigned char i=0;i<=46;i++){ //randam atitikmeni masyve

	 if (fadein[i]>=nustatymas) {
     3be:	80 81       	ld	r24, Z
     3c0:	82 17       	cp	r24, r18
     3c2:	10 f0       	brcs	.+4      	; 0x3c8 <nuostato_radimas+0x12>
     3c4:	89 2f       	mov	r24, r25
     3c6:	08 95       	ret
}


unsigned char nuostato_radimas(char nustatymas){
char eilnr;
for(unsigned char i=0;i<=46;i++){ //randam atitikmeni masyve
     3c8:	9f 5f       	subi	r25, 0xFF	; 255
     3ca:	31 96       	adiw	r30, 0x01	; 1
     3cc:	9f 32       	cpi	r25, 0x2F	; 47
     3ce:	b9 f7       	brne	.-18     	; 0x3be <nuostato_radimas+0x8>
	 eilnr=i;
	 break;} 
	}
return eilnr;

}
     3d0:	08 95       	ret

000003d2 <fade_in>:



// grynai PIR darbo rezimui
void fade_in(){
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
char min=nuostato_radimas(OCR2); // kad nepradetu fade_in daryti nuo min_PWM is configo.
     3da:	93 b5       	in	r25, 0x23	; 35
     3dc:	c2 e1       	ldi	r28, 0x12	; 18
     3de:	d1 e0       	ldi	r29, 0x01	; 1
     3e0:	de 01       	movw	r26, r28
     3e2:	e0 e0       	ldi	r30, 0x00	; 0

unsigned char nuostato_radimas(char nustatymas){
char eilnr;
for(unsigned char i=0;i<=46;i++){ //randam atitikmeni masyve

	 if (fadein[i]>=nustatymas) {
     3e4:	8c 91       	ld	r24, X
     3e6:	89 17       	cp	r24, r25
     3e8:	10 f0       	brcs	.+4      	; 0x3ee <fade_in+0x1c>
     3ea:	0e 2f       	mov	r16, r30
     3ec:	04 c0       	rjmp	.+8      	; 0x3f6 <fade_in+0x24>
}


unsigned char nuostato_radimas(char nustatymas){
char eilnr;
for(unsigned char i=0;i<=46;i++){ //randam atitikmeni masyve
     3ee:	ef 5f       	subi	r30, 0xFF	; 255
     3f0:	11 96       	adiw	r26, 0x01	; 1
     3f2:	ef 32       	cpi	r30, 0x2F	; 47
     3f4:	b9 f7       	brne	.-18     	; 0x3e4 <fade_in+0x12>
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEWE))
     3f6:	e1 99       	sbic	0x1c, 1	; 28
     3f8:	fe cf       	rjmp	.-4      	; 0x3f6 <fade_in+0x24>
;
/* Set up address register */
EEAR = uiAddress;
     3fa:	8f e1       	ldi	r24, 0x1F	; 31
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	9f bb       	out	0x1f, r25	; 31
     400:	8e bb       	out	0x1e, r24	; 30
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
     402:	e0 9a       	sbi	0x1c, 0	; 28
/* Return data from data register */
return EEDR;
     404:	9d b3       	in	r25, 0x1d	; 29
     406:	10 e0       	ldi	r17, 0x00	; 0

unsigned char nuostato_radimas(char nustatymas){
char eilnr;
for(unsigned char i=0;i<=46;i++){ //randam atitikmeni masyve

	 if (fadein[i]>=nustatymas) {
     408:	88 81       	ld	r24, Y
     40a:	89 17       	cp	r24, r25
     40c:	a8 f4       	brcc	.+42     	; 0x438 <fade_in+0x66>
}


unsigned char nuostato_radimas(char nustatymas){
char eilnr;
for(unsigned char i=0;i<=46;i++){ //randam atitikmeni masyve
     40e:	1f 5f       	subi	r17, 0xFF	; 255
     410:	21 96       	adiw	r28, 0x01	; 1
     412:	1f 32       	cpi	r17, 0x2F	; 47
     414:	c9 f7       	brne	.-14     	; 0x408 <fade_in+0x36>
     416:	10 e0       	ldi	r17, 0x00	; 0
     418:	0f c0       	rjmp	.+30     	; 0x438 <fade_in+0x66>


for( char i=min;i<=max;i++){

	//OCR2=fadein[i];
	timer2_set(fadein[i]);
     41a:	e0 2f       	mov	r30, r16
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	ee 5e       	subi	r30, 0xEE	; 238
     420:	fe 4f       	sbci	r31, 0xFE	; 254
     422:	80 81       	ld	r24, Z
     424:	aa de       	rcall	.-684    	; 0x17a <timer2_set>
     426:	84 ef       	ldi	r24, 0xF4	; 244
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	fe 01       	movw	r30, r28
     42c:	31 97       	sbiw	r30, 0x01	; 1
     42e:	f1 f7       	brne	.-4      	; 0x42c <fade_in+0x5a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     430:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     432:	d9 f7       	brne	.-10     	; 0x42a <fade_in+0x58>
#endif




for( char i=min;i<=max;i++){
     434:	0f 5f       	subi	r16, 0xFF	; 255
     436:	02 c0       	rjmp	.+4      	; 0x43c <fade_in+0x6a>
     438:	c8 ec       	ldi	r28, 0xC8	; 200
     43a:	d0 e0       	ldi	r29, 0x00	; 0
     43c:	10 17       	cp	r17, r16
     43e:	68 f7       	brcc	.-38     	; 0x41a <fade_in+0x48>
	timer2_set(fadein[i]);
	_delay_ms(50);
}

 	 
}
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	1f 91       	pop	r17
     446:	0f 91       	pop	r16
     448:	08 95       	ret

0000044a <fade_out>:



// grynai PIR darbo rezimui
void fade_out(){
     44a:	0f 93       	push	r16
     44c:	1f 93       	push	r17
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29

char max=nuostato_radimas(OCR2); // kad nepradetu fade_out daryti nuo max_PWM is configo.
     452:	93 b5       	in	r25, 0x23	; 35
     454:	c2 e1       	ldi	r28, 0x12	; 18
     456:	d1 e0       	ldi	r29, 0x01	; 1
     458:	de 01       	movw	r26, r28
     45a:	e0 e0       	ldi	r30, 0x00	; 0

unsigned char nuostato_radimas(char nustatymas){
char eilnr;
for(unsigned char i=0;i<=46;i++){ //randam atitikmeni masyve

	 if (fadein[i]>=nustatymas) {
     45c:	8c 91       	ld	r24, X
     45e:	89 17       	cp	r24, r25
     460:	10 f0       	brcs	.+4      	; 0x466 <__stack+0x7>
     462:	0e 2f       	mov	r16, r30
     464:	04 c0       	rjmp	.+8      	; 0x46e <__stack+0xf>
}


unsigned char nuostato_radimas(char nustatymas){
char eilnr;
for(unsigned char i=0;i<=46;i++){ //randam atitikmeni masyve
     466:	ef 5f       	subi	r30, 0xFF	; 255
     468:	11 96       	adiw	r26, 0x01	; 1
     46a:	ef 32       	cpi	r30, 0x2F	; 47
     46c:	b9 f7       	brne	.-18     	; 0x45c <fade_out+0x12>
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEWE))
     46e:	e1 99       	sbic	0x1c, 1	; 28
     470:	fe cf       	rjmp	.-4      	; 0x46e <__stack+0xf>
;
/* Set up address register */
EEAR = uiAddress;
     472:	8e e1       	ldi	r24, 0x1E	; 30
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	9f bb       	out	0x1f, r25	; 31
     478:	8e bb       	out	0x1e, r24	; 30
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
     47a:	e0 9a       	sbi	0x1c, 0	; 28
/* Return data from data register */
return EEDR;
     47c:	9d b3       	in	r25, 0x1d	; 29
     47e:	10 e0       	ldi	r17, 0x00	; 0

unsigned char nuostato_radimas(char nustatymas){
char eilnr;
for(unsigned char i=0;i<=46;i++){ //randam atitikmeni masyve

	 if (fadein[i]>=nustatymas) {
     480:	88 81       	ld	r24, Y
     482:	89 17       	cp	r24, r25
     484:	d0 f4       	brcc	.+52     	; 0x4ba <__stack+0x5b>
}


unsigned char nuostato_radimas(char nustatymas){
char eilnr;
for(unsigned char i=0;i<=46;i++){ //randam atitikmeni masyve
     486:	1f 5f       	subi	r17, 0xFF	; 255
     488:	21 96       	adiw	r28, 0x01	; 1
     48a:	1f 32       	cpi	r17, 0x2F	; 47
     48c:	c9 f7       	brne	.-14     	; 0x480 <__stack+0x21>
     48e:	10 e0       	ldi	r17, 0x00	; 0
     490:	14 c0       	rjmp	.+40     	; 0x4ba <__stack+0x5b>
	send_string("  fadein[i]: ");
	send_string(itoa(fadein[i],buff,10));
	send_string("\n\r");
	*/

	if (i==0) {timer2_set(fadein[i]); break;}
     492:	00 23       	and	r16, r16
     494:	19 f4       	brne	.+6      	; 0x49c <__stack+0x3d>
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	70 de       	rcall	.-800    	; 0x17a <timer2_set>
     49a:	13 c0       	rjmp	.+38     	; 0x4c2 <__stack+0x63>
	else{
	//OCR2=fadein[i];
	timer2_set(fadein[i]);
     49c:	e0 2f       	mov	r30, r16
     49e:	f0 e0       	ldi	r31, 0x00	; 0
     4a0:	ee 5e       	subi	r30, 0xEE	; 238
     4a2:	fe 4f       	sbci	r31, 0xFE	; 254
     4a4:	80 81       	ld	r24, Z
     4a6:	69 de       	rcall	.-814    	; 0x17a <timer2_set>
     4a8:	84 ef       	ldi	r24, 0xF4	; 244
     4aa:	91 e0       	ldi	r25, 0x01	; 1
     4ac:	fe 01       	movw	r30, r28
     4ae:	31 97       	sbiw	r30, 0x01	; 1
     4b0:	f1 f7       	brne	.-4      	; 0x4ae <__stack+0x4f>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     4b2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     4b4:	d9 f7       	brne	.-10     	; 0x4ac <__stack+0x4d>
send_string("  min: ");
send_string(itoa(min,buff,10));
send_string("\n\r");
#endif

for(unsigned char i=max;i>=min;i--){
     4b6:	01 50       	subi	r16, 0x01	; 1
     4b8:	02 c0       	rjmp	.+4      	; 0x4be <__stack+0x5f>
     4ba:	c8 ec       	ldi	r28, 0xC8	; 200
     4bc:	d0 e0       	ldi	r29, 0x00	; 0
     4be:	01 17       	cp	r16, r17
     4c0:	40 f7       	brcc	.-48     	; 0x492 <__stack+0x33>
	_delay_ms(50);
	}
}

 	 
}
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	08 95       	ret

000004cc <adc_procentais>:

unsigned int adc_procentais(){
	return ((adc_value/8)*25)/256; 
     4cc:	80 91 55 01 	lds	r24, 0x0155
     4d0:	90 91 56 01 	lds	r25, 0x0156
     4d4:	23 e0       	ldi	r18, 0x03	; 3
     4d6:	96 95       	lsr	r25
     4d8:	87 95       	ror	r24
     4da:	2a 95       	dec	r18
     4dc:	e1 f7       	brne	.-8      	; 0x4d6 <adc_procentais+0xa>
     4de:	29 e1       	ldi	r18, 0x19	; 25
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	ac 01       	movw	r20, r24
     4e4:	42 9f       	mul	r20, r18
     4e6:	c0 01       	movw	r24, r0
     4e8:	43 9f       	mul	r20, r19
     4ea:	90 0d       	add	r25, r0
     4ec:	52 9f       	mul	r21, r18
     4ee:	90 0d       	add	r25, r0
     4f0:	11 24       	eor	r1, r1
}
     4f2:	89 2f       	mov	r24, r25
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	08 95       	ret

000004f8 <adc_procentais_P>:

unsigned int adc_procentais_P(unsigned int P){
	return ((adc_value/8)*(25-P))/256; 
     4f8:	20 91 55 01 	lds	r18, 0x0155
     4fc:	30 91 56 01 	lds	r19, 0x0156
     500:	49 e1       	ldi	r20, 0x19	; 25
     502:	50 e0       	ldi	r21, 0x00	; 0
     504:	48 1b       	sub	r20, r24
     506:	59 0b       	sbc	r21, r25
     508:	63 e0       	ldi	r22, 0x03	; 3
     50a:	36 95       	lsr	r19
     50c:	27 95       	ror	r18
     50e:	6a 95       	dec	r22
     510:	e1 f7       	brne	.-8      	; 0x50a <adc_procentais_P+0x12>
     512:	42 9f       	mul	r20, r18
     514:	c0 01       	movw	r24, r0
     516:	43 9f       	mul	r20, r19
     518:	90 0d       	add	r25, r0
     51a:	52 9f       	mul	r21, r18
     51c:	90 0d       	add	r25, r0
     51e:	11 24       	eor	r1, r1
}
     520:	89 2f       	mov	r24, r25
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	08 95       	ret

00000526 <adc_pwm>:

unsigned int adc_pwm(){
	return ((adc_value/8)*25)/100; 
     526:	80 91 55 01 	lds	r24, 0x0155
     52a:	90 91 56 01 	lds	r25, 0x0156
     52e:	73 e0       	ldi	r23, 0x03	; 3
     530:	96 95       	lsr	r25
     532:	87 95       	ror	r24
     534:	7a 95       	dec	r23
     536:	e1 f7       	brne	.-8      	; 0x530 <adc_pwm+0xa>
     538:	29 e1       	ldi	r18, 0x19	; 25
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	ac 01       	movw	r20, r24
     53e:	42 9f       	mul	r20, r18
     540:	c0 01       	movw	r24, r0
     542:	43 9f       	mul	r20, r19
     544:	90 0d       	add	r25, r0
     546:	52 9f       	mul	r21, r18
     548:	90 0d       	add	r25, r0
     54a:	11 24       	eor	r1, r1
     54c:	64 e6       	ldi	r22, 0x64	; 100
     54e:	70 e0       	ldi	r23, 0x00	; 0
     550:	dd d9       	rcall	.-3142   	; 0xfffff90c <__eeprom_end+0xff7ef90c>
     552:	cb 01       	movw	r24, r22
}
     554:	08 95       	ret

00000556 <adc_pwm_P>:

unsigned int adc_pwm_P(unsigned int P){
	return ((adc_value/8)*(25-P))/100;
     556:	40 91 55 01 	lds	r20, 0x0155
     55a:	50 91 56 01 	lds	r21, 0x0156
     55e:	29 e1       	ldi	r18, 0x19	; 25
     560:	30 e0       	ldi	r19, 0x00	; 0
     562:	28 1b       	sub	r18, r24
     564:	39 0b       	sbc	r19, r25
     566:	e3 e0       	ldi	r30, 0x03	; 3
     568:	56 95       	lsr	r21
     56a:	47 95       	ror	r20
     56c:	ea 95       	dec	r30
     56e:	e1 f7       	brne	.-8      	; 0x568 <adc_pwm_P+0x12>
     570:	24 9f       	mul	r18, r20
     572:	c0 01       	movw	r24, r0
     574:	25 9f       	mul	r18, r21
     576:	90 0d       	add	r25, r0
     578:	34 9f       	mul	r19, r20
     57a:	90 0d       	add	r25, r0
     57c:	11 24       	eor	r1, r1
     57e:	64 e6       	ldi	r22, 0x64	; 100
     580:	70 e0       	ldi	r23, 0x00	; 0
     582:	c4 d9       	rcall	.-3192   	; 0xfffff90c <__eeprom_end+0xff7ef90c>
     584:	cb 01       	movw	r24, r22
}
     586:	08 95       	ret

00000588 <adc_gain>:

unsigned int adc_gain(unsigned char gain){
	unsigned int temp;

	if(ADCW*gain/10<=1023) temp=ADCW*gain/10;
     588:	24 b1       	in	r18, 0x04	; 4
     58a:	35 b1       	in	r19, 0x05	; 5
     58c:	48 2f       	mov	r20, r24
     58e:	50 e0       	ldi	r21, 0x00	; 0
     590:	42 9f       	mul	r20, r18
     592:	c0 01       	movw	r24, r0
     594:	43 9f       	mul	r20, r19
     596:	90 0d       	add	r25, r0
     598:	52 9f       	mul	r21, r18
     59a:	90 0d       	add	r25, r0
     59c:	11 24       	eor	r1, r1
     59e:	80 50       	subi	r24, 0x00	; 0
     5a0:	98 42       	sbci	r25, 0x28	; 40
     5a2:	18 f0       	brcs	.+6      	; 0x5aa <adc_gain+0x22>
     5a4:	2f ef       	ldi	r18, 0xFF	; 255
     5a6:	33 e0       	ldi	r19, 0x03	; 3
     5a8:	0e c0       	rjmp	.+28     	; 0x5c6 <adc_gain+0x3e>
     5aa:	84 b1       	in	r24, 0x04	; 4
     5ac:	95 b1       	in	r25, 0x05	; 5
     5ae:	9c 01       	movw	r18, r24
     5b0:	42 9f       	mul	r20, r18
     5b2:	c0 01       	movw	r24, r0
     5b4:	43 9f       	mul	r20, r19
     5b6:	90 0d       	add	r25, r0
     5b8:	52 9f       	mul	r21, r18
     5ba:	90 0d       	add	r25, r0
     5bc:	11 24       	eor	r1, r1
     5be:	6a e0       	ldi	r22, 0x0A	; 10
     5c0:	70 e0       	ldi	r23, 0x00	; 0
     5c2:	a4 d9       	rcall	.-3256   	; 0xfffff90c <__eeprom_end+0xff7ef90c>
     5c4:	9b 01       	movw	r18, r22
	else temp=1023;
	
	return temp;
}
     5c6:	c9 01       	movw	r24, r18
     5c8:	08 95       	ret

000005ca <PI_reguliatorius>:

void PI_reguliatorius(){ //LDR->PWM proporcinis reguliatorius
     5ca:	1f 93       	push	r17
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
	
	if(LDRinv==0) LDRn=nuostato_radimas(adc_pwm_P(LDRkoef));
     5d0:	80 91 44 01 	lds	r24, 0x0144
     5d4:	88 23       	and	r24, r24
     5d6:	81 f4       	brne	.+32     	; 0x5f8 <PI_reguliatorius+0x2e>
     5d8:	80 91 45 01 	lds	r24, 0x0145
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	bb df       	rcall	.-138    	; 0x556 <adc_pwm_P>
     5e0:	28 2f       	mov	r18, r24
     5e2:	e2 e1       	ldi	r30, 0x12	; 18
     5e4:	f1 e0       	ldi	r31, 0x01	; 1
     5e6:	90 e0       	ldi	r25, 0x00	; 0

unsigned char nuostato_radimas(char nustatymas){
char eilnr;
for(unsigned char i=0;i<=46;i++){ //randam atitikmeni masyve

	 if (fadein[i]>=nustatymas) {
     5e8:	80 81       	ld	r24, Z
     5ea:	82 17       	cp	r24, r18
     5ec:	b0 f4       	brcc	.+44     	; 0x61a <PI_reguliatorius+0x50>
}


unsigned char nuostato_radimas(char nustatymas){
char eilnr;
for(unsigned char i=0;i<=46;i++){ //randam atitikmeni masyve
     5ee:	9f 5f       	subi	r25, 0xFF	; 255
     5f0:	31 96       	adiw	r30, 0x01	; 1
     5f2:	9f 32       	cpi	r25, 0x2F	; 47
     5f4:	c9 f7       	brne	.-14     	; 0x5e8 <PI_reguliatorius+0x1e>
     5f6:	10 c0       	rjmp	.+32     	; 0x618 <PI_reguliatorius+0x4e>
}

void PI_reguliatorius(){ //LDR->PWM proporcinis reguliatorius
	
	if(LDRinv==0) LDRn=nuostato_radimas(adc_pwm_P(LDRkoef));
		else  LDRn=nuostato_radimas(255-adc_pwm_P(LDRkoef)); 
     5f8:	80 91 45 01 	lds	r24, 0x0145
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	ab df       	rcall	.-170    	; 0x556 <adc_pwm_P>
     600:	28 2f       	mov	r18, r24
     602:	20 95       	com	r18
     604:	e2 e1       	ldi	r30, 0x12	; 18
     606:	f1 e0       	ldi	r31, 0x01	; 1
     608:	90 e0       	ldi	r25, 0x00	; 0

unsigned char nuostato_radimas(char nustatymas){
char eilnr;
for(unsigned char i=0;i<=46;i++){ //randam atitikmeni masyve

	 if (fadein[i]>=nustatymas) {
     60a:	80 81       	ld	r24, Z
     60c:	82 17       	cp	r24, r18
     60e:	28 f4       	brcc	.+10     	; 0x61a <PI_reguliatorius+0x50>
}


unsigned char nuostato_radimas(char nustatymas){
char eilnr;
for(unsigned char i=0;i<=46;i++){ //randam atitikmeni masyve
     610:	9f 5f       	subi	r25, 0xFF	; 255
     612:	31 96       	adiw	r30, 0x01	; 1
     614:	9f 32       	cpi	r25, 0x2F	; 47
     616:	c9 f7       	brne	.-14     	; 0x60a <PI_reguliatorius+0x40>
     618:	90 e0       	ldi	r25, 0x00	; 0
}

void PI_reguliatorius(){ //LDR->PWM proporcinis reguliatorius
	
	if(LDRinv==0) LDRn=nuostato_radimas(adc_pwm_P(LDRkoef));
		else  LDRn=nuostato_radimas(255-adc_pwm_P(LDRkoef)); 
     61a:	90 93 57 01 	sts	0x0157, r25
//	else LDRn=LDRn;

	
	if(LDRn>LDRn0){
     61e:	90 91 57 01 	lds	r25, 0x0157
     622:	80 91 58 01 	lds	r24, 0x0158
     626:	89 17       	cp	r24, r25
     628:	c0 f4       	brcc	.+48     	; 0x65a <PI_reguliatorius+0x90>
			for(unsigned char i=LDRn0;i<=LDRn;i++){
     62a:	10 91 58 01 	lds	r17, 0x0158
     62e:	c8 ec       	ldi	r28, 0xC8	; 200
     630:	d0 e0       	ldi	r29, 0x00	; 0
     632:	0e c0       	rjmp	.+28     	; 0x650 <PI_reguliatorius+0x86>
			timer2_set(fadein[i]); //OCR2=fadein[i];
     634:	e1 2f       	mov	r30, r17
     636:	f0 e0       	ldi	r31, 0x00	; 0
     638:	ee 5e       	subi	r30, 0xEE	; 238
     63a:	fe 4f       	sbci	r31, 0xFE	; 254
     63c:	80 81       	ld	r24, Z
     63e:	9d dd       	rcall	.-1222   	; 0x17a <timer2_set>
     640:	84 ef       	ldi	r24, 0xF4	; 244
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	fe 01       	movw	r30, r28
     646:	31 97       	sbiw	r30, 0x01	; 1
     648:	f1 f7       	brne	.-4      	; 0x646 <PI_reguliatorius+0x7c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     64a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     64c:	d9 f7       	brne	.-10     	; 0x644 <PI_reguliatorius+0x7a>
		else  LDRn=nuostato_radimas(255-adc_pwm_P(LDRkoef)); 
//	else LDRn=LDRn;

	
	if(LDRn>LDRn0){
			for(unsigned char i=LDRn0;i<=LDRn;i++){
     64e:	1f 5f       	subi	r17, 0xFF	; 255
     650:	80 91 57 01 	lds	r24, 0x0157
     654:	81 17       	cp	r24, r17
     656:	70 f7       	brcc	.-36     	; 0x634 <PI_reguliatorius+0x6a>
     658:	1d c0       	rjmp	.+58     	; 0x694 <PI_reguliatorius+0xca>
			_delay_ms(50);
			}
	LDRn0=LDRn; //lyginimas su pries tai buvusia reiksme
	}
	
	else if (LDRn<LDRn0) {	
     65a:	90 91 57 01 	lds	r25, 0x0157
     65e:	80 91 58 01 	lds	r24, 0x0158
     662:	98 17       	cp	r25, r24
     664:	d0 f4       	brcc	.+52     	; 0x69a <PI_reguliatorius+0xd0>
			for(unsigned char i=LDRn0;i>LDRn;i--){
     666:	10 91 58 01 	lds	r17, 0x0158
     66a:	c8 ec       	ldi	r28, 0xC8	; 200
     66c:	d0 e0       	ldi	r29, 0x00	; 0
     66e:	0e c0       	rjmp	.+28     	; 0x68c <PI_reguliatorius+0xc2>
			timer2_set(fadein[i]); //OCR2=fadein[i];
     670:	e1 2f       	mov	r30, r17
     672:	f0 e0       	ldi	r31, 0x00	; 0
     674:	ee 5e       	subi	r30, 0xEE	; 238
     676:	fe 4f       	sbci	r31, 0xFE	; 254
     678:	80 81       	ld	r24, Z
     67a:	7f dd       	rcall	.-1282   	; 0x17a <timer2_set>
     67c:	84 ef       	ldi	r24, 0xF4	; 244
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	fe 01       	movw	r30, r28
     682:	31 97       	sbiw	r30, 0x01	; 1
     684:	f1 f7       	brne	.-4      	; 0x682 <PI_reguliatorius+0xb8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     686:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     688:	d9 f7       	brne	.-10     	; 0x680 <PI_reguliatorius+0xb6>
			}
	LDRn0=LDRn; //lyginimas su pries tai buvusia reiksme
	}
	
	else if (LDRn<LDRn0) {	
			for(unsigned char i=LDRn0;i>LDRn;i--){
     68a:	11 50       	subi	r17, 0x01	; 1
     68c:	80 91 57 01 	lds	r24, 0x0157
     690:	81 17       	cp	r24, r17
     692:	70 f3       	brcs	.-36     	; 0x670 <PI_reguliatorius+0xa6>
				#endif	
			_delay_ms(50);

			
			}
	LDRn0=LDRn;
     694:	80 91 57 01 	lds	r24, 0x0157
     698:	02 c0       	rjmp	.+4      	; 0x69e <PI_reguliatorius+0xd4>
	} 
	else LDRn0=LDRn0;
     69a:	80 91 58 01 	lds	r24, 0x0158
     69e:	80 93 58 01 	sts	0x0158, r24
	send_string(" OCR2: ");
	send_string(itoa(OCR2,buff,10));
	send_string("\n\r");
	#endif	

}
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	08 95       	ret

000006aa <wmode>:


//funcionalumo ijungimas/isjungimas
void wmode(unsigned char kuris){

	switch(kuris){
     6aa:	82 30       	cpi	r24, 0x02	; 2
     6ac:	e1 f0       	breq	.+56     	; 0x6e6 <wmode+0x3c>
     6ae:	83 30       	cpi	r24, 0x03	; 3
     6b0:	30 f4       	brcc	.+12     	; 0x6be <wmode+0x14>
     6b2:	88 23       	and	r24, r24
     6b4:	49 f0       	breq	.+18     	; 0x6c8 <wmode+0x1e>
     6b6:	81 30       	cpi	r24, 0x01	; 1
     6b8:	09 f0       	breq	.+2      	; 0x6bc <wmode+0x12>
     6ba:	40 c0       	rjmp	.+128    	; 0x73c <wmode+0x92>
     6bc:	07 c0       	rjmp	.+14     	; 0x6cc <wmode+0x22>
     6be:	83 30       	cpi	r24, 0x03	; 3
     6c0:	29 f1       	breq	.+74     	; 0x70c <wmode+0x62>
     6c2:	84 30       	cpi	r24, 0x04	; 4
     6c4:	d9 f5       	brne	.+118    	; 0x73c <wmode+0x92>
     6c6:	32 c0       	rjmp	.+100    	; 0x72c <wmode+0x82>
		//OFF
		case 0: {
				TCCR2=0x00; 	//isjungiam PWM
     6c8:	15 bc       	out	0x25, r1	; 37
     6ca:	0b c0       	rjmp	.+22     	; 0x6e2 <wmode+0x38>
		//		stop_timer1();
				break;
				}	
		//ON
		case 1: {
				TCCR2=0x6B; //ijungiam PWM
     6cc:	8b e6       	ldi	r24, 0x6B	; 107
     6ce:	85 bd       	out	0x25, r24	; 37
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEWE))
     6d0:	e1 99       	sbic	0x1c, 1	; 28
     6d2:	fe cf       	rjmp	.-4      	; 0x6d0 <wmode+0x26>
;
/* Set up address register */
EEAR = uiAddress;
     6d4:	88 e1       	ldi	r24, 0x18	; 24
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	9f bb       	out	0x1f, r25	; 31
     6da:	8e bb       	out	0x1e, r24	; 30
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
     6dc:	e0 9a       	sbi	0x1c, 0	; 28
/* Return data from data register */
return EEDR;
     6de:	8d b3       	in	r24, 0x1d	; 29
				break;
				}	
		//ON
		case 1: {
				TCCR2=0x6B; //ijungiam PWM
				timer2_set(EEPROM_read(24)); //OCR2=EEPROM_read(24);
     6e0:	4c dd       	rcall	.-1384   	; 0x17a <timer2_set>
	TIMSK |= (1<<TOIE0);
	TCNT0 = 223;
}

void start_timer0()	{TCCR0 |= (1<<CS00)|(1<<CS02); }
void stop_timer0()	{TCCR0 =0x00;}
     6e2:	13 be       	out	0x33, r1	; 51
     6e4:	10 c0       	rjmp	.+32     	; 0x706 <wmode+0x5c>
				break;
				}

		//PIR/LDR
		case 2: {
				TCCR2=0x6B; //ijungiam PWM
     6e6:	8b e6       	ldi	r24, 0x6B	; 107
     6e8:	85 bd       	out	0x25, r24	; 37
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEWE))
     6ea:	e1 99       	sbic	0x1c, 1	; 28
     6ec:	fe cf       	rjmp	.-4      	; 0x6ea <wmode+0x40>
;
/* Set up address register */
EEAR = uiAddress;
     6ee:	8e e1       	ldi	r24, 0x1E	; 30
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	9f bb       	out	0x1f, r25	; 31
     6f4:	8e bb       	out	0x1e, r24	; 30
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
     6f6:	e0 9a       	sbi	0x1c, 0	; 28
/* Return data from data register */
return EEDR;
     6f8:	8d b3       	in	r24, 0x1d	; 29
				}

		//PIR/LDR
		case 2: {
				TCCR2=0x6B; //ijungiam PWM
				timer2_set(EEPROM_read(30)); //OCR2=EEPROM_read(30); //minPWM
     6fa:	3f dd       	rcall	.-1410   	; 0x17a <timer2_set>
	TIFR |= (1<<TOV0);		//set interrupt on overflow
	TIMSK |= (1<<TOIE0);
	TCNT0 = 223;
}

void start_timer0()	{TCCR0 |= (1<<CS00)|(1<<CS02); }
     6fc:	83 b7       	in	r24, 0x33	; 51
     6fe:	85 60       	ori	r24, 0x05	; 5
     700:	83 bf       	out	0x33, r24	; 51
		//PIR/LDR
		case 2: {
				TCCR2=0x6B; //ijungiam PWM
				timer2_set(EEPROM_read(30)); //OCR2=EEPROM_read(30); //minPWM
				start_timer0(); //ADC nuskaitymas
				PIR=0;
     702:	10 92 59 01 	sts	0x0159, r1
				GICR&=~_BV(INT0); //Kol ADCW nenukrenta iki LDRth, tol PIR pertrauktis isjungta
     706:	8b b7       	in	r24, 0x3b	; 59
     708:	8f 7b       	andi	r24, 0xBF	; 191
     70a:	0e c0       	rjmp	.+28     	; 0x728 <wmode+0x7e>
				break;
				}			
		
		//PIR
		case 3: {
				TCCR2=0x6B; //ijungiam PWM
     70c:	8b e6       	ldi	r24, 0x6B	; 107
     70e:	85 bd       	out	0x25, r24	; 37
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEWE))
     710:	e1 99       	sbic	0x1c, 1	; 28
     712:	fe cf       	rjmp	.-4      	; 0x710 <wmode+0x66>
;
/* Set up address register */
EEAR = uiAddress;
     714:	8e e1       	ldi	r24, 0x1E	; 30
     716:	90 e0       	ldi	r25, 0x00	; 0
     718:	9f bb       	out	0x1f, r25	; 31
     71a:	8e bb       	out	0x1e, r24	; 30
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
     71c:	e0 9a       	sbi	0x1c, 0	; 28
/* Return data from data register */
return EEDR;
     71e:	8d b3       	in	r24, 0x1d	; 29
				}			
		
		//PIR
		case 3: {
				TCCR2=0x6B; //ijungiam PWM
				timer2_set(EEPROM_read(30)); //OCR2=EEPROM_read(30); //minPWM
     720:	2c dd       	rcall	.-1448   	; 0x17a <timer2_set>
	TIMSK |= (1<<TOIE0);
	TCNT0 = 223;
}

void start_timer0()	{TCCR0 |= (1<<CS00)|(1<<CS02); }
void stop_timer0()	{TCCR0 =0x00;}
     722:	13 be       	out	0x33, r1	; 51
		//PIR
		case 3: {
				TCCR2=0x6B; //ijungiam PWM
				timer2_set(EEPROM_read(30)); //OCR2=EEPROM_read(30); //minPWM
				stop_timer0(); 	//isjungia ADC skaityma
				GICR|=_BV(INT0);
     724:	8b b7       	in	r24, 0x3b	; 59
     726:	80 64       	ori	r24, 0x40	; 64
     728:	8b bf       	out	0x3b, r24	; 59
     72a:	08 95       	ret
		//		stop_timer1();
				break;
				}
		//LDR
		case 4: {
				TCCR2=0x6B; //ijungiam PWM
     72c:	8b e6       	ldi	r24, 0x6B	; 107
     72e:	85 bd       	out	0x25, r24	; 37
	TIFR |= (1<<TOV0);		//set interrupt on overflow
	TIMSK |= (1<<TOIE0);
	TCNT0 = 223;
}

void start_timer0()	{TCCR0 |= (1<<CS00)|(1<<CS02); }
     730:	83 b7       	in	r24, 0x33	; 51
     732:	85 60       	ori	r24, 0x05	; 5
     734:	83 bf       	out	0x33, r24	; 51
				}
		//LDR
		case 4: {
				TCCR2=0x6B; //ijungiam PWM
				start_timer0(); //ADC nuskaitymas
				GICR&=~_BV(INT0);
     736:	8b b7       	in	r24, 0x3b	; 59
     738:	8f 7b       	andi	r24, 0xBF	; 191
     73a:	8b bf       	out	0x3b, r24	; 59
     73c:	08 95       	ret

0000073e <__vector_9>:
*/	
}


ISR (TIMER0_OVF_vect) //praktiskai ADC nuskaitymas
{
     73e:	1f 92       	push	r1
     740:	0f 92       	push	r0
     742:	0f b6       	in	r0, 0x3f	; 63
     744:	0f 92       	push	r0
     746:	11 24       	eor	r1, r1
     748:	0f 93       	push	r16
     74a:	1f 93       	push	r17
     74c:	2f 93       	push	r18
     74e:	3f 93       	push	r19
     750:	4f 93       	push	r20
     752:	5f 93       	push	r21
     754:	6f 93       	push	r22
     756:	7f 93       	push	r23
     758:	8f 93       	push	r24
     75a:	9f 93       	push	r25
     75c:	af 93       	push	r26
     75e:	bf 93       	push	r27
     760:	ef 93       	push	r30
     762:	ff 93       	push	r31
	TIMSK |= (1<<TOIE0);
	TCNT0 = 223;
}

void start_timer0()	{TCCR0 |= (1<<CS00)|(1<<CS02); }
void stop_timer0()	{TCCR0 =0x00;}
     764:	13 be       	out	0x33, r1	; 51

stop_timer0();

adc_read_times++;
     766:	80 91 54 01 	lds	r24, 0x0154
     76a:	8f 5f       	subi	r24, 0xFF	; 255
     76c:	80 93 54 01 	sts	0x0154, r24

ADCSRA |=_BV(ADSC); 
     770:	36 9a       	sbi	0x06, 6	; 6
loop_until_bit_is_set(ADCSRA, ADIF);
     772:	34 9b       	sbis	0x06, 4	; 6
     774:	fe cf       	rjmp	.-4      	; 0x772 <__vector_9+0x34>


//adc_value=adc_value+ADCW;
adc_value=adc_value+adc_gain(ADCgain);
     776:	00 91 55 01 	lds	r16, 0x0155
     77a:	10 91 56 01 	lds	r17, 0x0156
     77e:	80 91 f7 00 	lds	r24, 0x00F7
     782:	02 df       	rcall	.-508    	; 0x588 <adc_gain>
     784:	08 0f       	add	r16, r24
     786:	19 1f       	adc	r17, r25
     788:	10 93 56 01 	sts	0x0156, r17
     78c:	00 93 55 01 	sts	0x0155, r16



//preview LDRth ir LDRinv config mode'ui 
if((config_menu_page==3 || config_menu_page==4 || config_menu_page==5) && meniu==3 && config==2 && adc_read_times==8){
     790:	80 91 4e 01 	lds	r24, 0x014E
     794:	83 30       	cpi	r24, 0x03	; 3
     796:	49 f0       	breq	.+18     	; 0x7aa <__vector_9+0x6c>
     798:	80 91 4e 01 	lds	r24, 0x014E
     79c:	84 30       	cpi	r24, 0x04	; 4
     79e:	29 f0       	breq	.+10     	; 0x7aa <__vector_9+0x6c>
     7a0:	80 91 4e 01 	lds	r24, 0x014E
     7a4:	85 30       	cpi	r24, 0x05	; 5
     7a6:	09 f0       	breq	.+2      	; 0x7aa <__vector_9+0x6c>
     7a8:	56 c0       	rjmp	.+172    	; 0x856 <__vector_9+0x118>
     7aa:	80 91 48 01 	lds	r24, 0x0148
     7ae:	83 30       	cpi	r24, 0x03	; 3
     7b0:	09 f0       	breq	.+2      	; 0x7b4 <__vector_9+0x76>
     7b2:	51 c0       	rjmp	.+162    	; 0x856 <__vector_9+0x118>
     7b4:	80 91 49 01 	lds	r24, 0x0149
     7b8:	82 30       	cpi	r24, 0x02	; 2
     7ba:	09 f0       	breq	.+2      	; 0x7be <__vector_9+0x80>
     7bc:	4c c0       	rjmp	.+152    	; 0x856 <__vector_9+0x118>
     7be:	80 91 54 01 	lds	r24, 0x0154
     7c2:	88 30       	cpi	r24, 0x08	; 8
     7c4:	09 f0       	breq	.+2      	; 0x7c8 <__vector_9+0x8a>
     7c6:	47 c0       	rjmp	.+142    	; 0x856 <__vector_9+0x118>
		
	if(config_menu_page==5) lcd_gotoxy(5,1); else lcd_gotoxy(1,1); //jei ADCgain confige, tai (5,1), jei kitur, tai (1,1)	
     7c8:	80 91 4e 01 	lds	r24, 0x014E
     7cc:	85 30       	cpi	r24, 0x05	; 5
     7ce:	09 f0       	breq	.+2      	; 0x7d2 <__vector_9+0x94>
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	61 e0       	ldi	r22, 0x01	; 1
     7d4:	21 d8       	rcall	.-4030   	; 0xfffff818 <__eeprom_end+0xff7ef818>
			 
	lcd_puts(itoa(adc_procentais(), buff, 10)); 
     7d6:	7a de       	rcall	.-780    	; 0x4cc <adc_procentais>
     7d8:	6c e5       	ldi	r22, 0x5C	; 92
     7da:	71 e0       	ldi	r23, 0x01	; 1
     7dc:	4a e0       	ldi	r20, 0x0A	; 10
     7de:	50 e0       	ldi	r21, 0x00	; 0
     7e0:	bc d8       	rcall	.-3720   	; 0xfffff95a <__eeprom_end+0xff7ef95a>
     7e2:	3c d8       	rcall	.-3976   	; 0xfffff85c <__eeprom_end+0xff7ef85c>
	if(config_menu_page==5) lcd_puts_p(procentas); //preview ADCgain confige
     7e4:	80 91 4e 01 	lds	r24, 0x014E
     7e8:	85 30       	cpi	r24, 0x05	; 5
     7ea:	19 f4       	brne	.+6      	; 0x7f2 <__vector_9+0xb4>
     7ec:	83 e3       	ldi	r24, 0x33	; 51
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	40 d8       	rcall	.-3968   	; 0xfffff872 <__eeprom_end+0xff7ef872>
	if(adc_procentais()<=9) lcd_puts(" ");
     7f2:	6c de       	rcall	.-808    	; 0x4cc <adc_procentais>
     7f4:	0a 97       	sbiw	r24, 0x0a	; 10
     7f6:	18 f4       	brcc	.+6      	; 0x7fe <__vector_9+0xc0>
     7f8:	83 e7       	ldi	r24, 0x73	; 115
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	2f d8       	rcall	.-4002   	; 0xfffff85c <__eeprom_end+0xff7ef85c>
	if(adc_procentais()<=99) lcd_puts(" ");
     7fe:	66 de       	rcall	.-820    	; 0x4cc <adc_procentais>
     800:	84 36       	cpi	r24, 0x64	; 100
     802:	91 05       	cpc	r25, r1
     804:	18 f4       	brcc	.+6      	; 0x80c <__vector_9+0xce>
     806:	83 e7       	ldi	r24, 0x73	; 115
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	28 d8       	rcall	.-4016   	; 0xfffff85c <__eeprom_end+0xff7ef85c>

	if(config_menu_page==4){//LDRinv config preview: invertuotos reiksmes parodymui
     80c:	80 91 4e 01 	lds	r24, 0x014E
     810:	84 30       	cpi	r24, 0x04	; 4
     812:	09 f0       	breq	.+2      	; 0x816 <__vector_9+0xd8>
     814:	17 c1       	rjmp	.+558    	; 0xa44 <__vector_9+0x306>
		lcd_gotoxy(5,1); 
     816:	85 e0       	ldi	r24, 0x05	; 5
     818:	61 e0       	ldi	r22, 0x01	; 1
     81a:	fe d7       	rcall	.+4092   	; 0x1818 <lcd_gotoxy>
		if(LDRinv==0) lcd_puts(itoa(adc_procentais(), buff, 10)); 
     81c:	80 91 44 01 	lds	r24, 0x0144
     820:	88 23       	and	r24, r24
     822:	11 f4       	brne	.+4      	; 0x828 <__vector_9+0xea>
     824:	53 de       	rcall	.-858    	; 0x4cc <adc_procentais>
     826:	07 c0       	rjmp	.+14     	; 0x836 <__vector_9+0xf8>
		else lcd_puts(itoa(100-(adc_procentais()), buff, 10));
     828:	51 de       	rcall	.-862    	; 0x4cc <adc_procentais>
     82a:	24 e6       	ldi	r18, 0x64	; 100
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	a9 01       	movw	r20, r18
     830:	48 1b       	sub	r20, r24
     832:	59 0b       	sbc	r21, r25
     834:	ca 01       	movw	r24, r20
     836:	6c e5       	ldi	r22, 0x5C	; 92
     838:	71 e0       	ldi	r23, 0x01	; 1
     83a:	4a e0       	ldi	r20, 0x0A	; 10
     83c:	50 e0       	ldi	r21, 0x00	; 0
     83e:	8d d8       	rcall	.-3814   	; 0xfffff95a <__eeprom_end+0xff7ef95a>
     840:	0d d8       	rcall	.-4070   	; 0xfffff85c <__eeprom_end+0xff7ef85c>
		
		if(adc_procentais()<=9 && LDRinv==0) lcd_puts(" ");
     842:	44 de       	rcall	.-888    	; 0x4cc <adc_procentais>
     844:	0a 97       	sbiw	r24, 0x0a	; 10
     846:	28 f4       	brcc	.+10     	; 0x852 <__vector_9+0x114>
     848:	80 91 44 01 	lds	r24, 0x0144
     84c:	88 23       	and	r24, r24
     84e:	09 f4       	brne	.+2      	; 0x852 <__vector_9+0x114>
     850:	f5 c0       	rjmp	.+490    	; 0xa3c <__vector_9+0x2fe>
		else if((100-adc_procentais())<=9 && LDRinv==1) lcd_puts(" ");
     852:	3c de       	rcall	.-904    	; 0x4cc <adc_procentais>
     854:	e8 c0       	rjmp	.+464    	; 0xa26 <__vector_9+0x2e8>
	} 
}


//LDR+PIR mode (ijungiam PIR pertraukti tik tada kai, LDRn<=LRDth)
else if(work_mode==2 && meniu==0 && config==0 && adc_read_times==8){
     856:	80 91 4b 01 	lds	r24, 0x014B
     85a:	82 30       	cpi	r24, 0x02	; 2
     85c:	09 f0       	breq	.+2      	; 0x860 <__vector_9+0x122>
     85e:	68 c0       	rjmp	.+208    	; 0x930 <__vector_9+0x1f2>
     860:	80 91 48 01 	lds	r24, 0x0148
     864:	88 23       	and	r24, r24
     866:	09 f0       	breq	.+2      	; 0x86a <__vector_9+0x12c>
     868:	63 c0       	rjmp	.+198    	; 0x930 <__vector_9+0x1f2>
     86a:	80 91 49 01 	lds	r24, 0x0149
     86e:	88 23       	and	r24, r24
     870:	09 f0       	breq	.+2      	; 0x874 <__vector_9+0x136>
     872:	5e c0       	rjmp	.+188    	; 0x930 <__vector_9+0x1f2>
     874:	80 91 54 01 	lds	r24, 0x0154
     878:	88 30       	cpi	r24, 0x08	; 8
     87a:	09 f0       	breq	.+2      	; 0x87e <__vector_9+0x140>
     87c:	59 c0       	rjmp	.+178    	; 0x930 <__vector_9+0x1f2>

	if(PIR==0){
     87e:	80 91 59 01 	lds	r24, 0x0159
     882:	88 23       	and	r24, r24
     884:	41 f5       	brne	.+80     	; 0x8d6 <__vector_9+0x198>
	lcd_gotoxy(0,1); lcd_puts_p(R);
     886:	61 e0       	ldi	r22, 0x01	; 1
     888:	c7 d7       	rcall	.+3982   	; 0x1818 <lcd_gotoxy>
     88a:	81 e4       	ldi	r24, 0x41	; 65
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	f1 d7       	rcall	.+4066   	; 0x1872 <lcd_puts_p>

	lcd_puts(itoa(adc_procentais(), buff, 10)); 
     890:	1d de       	rcall	.-966    	; 0x4cc <adc_procentais>
     892:	6c e5       	ldi	r22, 0x5C	; 92
     894:	71 e0       	ldi	r23, 0x01	; 1
     896:	4a e0       	ldi	r20, 0x0A	; 10
     898:	50 e0       	ldi	r21, 0x00	; 0
     89a:	5f d8       	rcall	.-3906   	; 0xfffff95a <__eeprom_end+0xff7ef95a>
     89c:	df d7       	rcall	.+4030   	; 0x185c <lcd_puts>
//	lcd_puts_p(procentas);
	if(adc_procentais()<=9) lcd_puts(" ");
     89e:	16 de       	rcall	.-980    	; 0x4cc <adc_procentais>
     8a0:	0a 97       	sbiw	r24, 0x0a	; 10
     8a2:	18 f4       	brcc	.+6      	; 0x8aa <__vector_9+0x16c>
     8a4:	83 e7       	ldi	r24, 0x73	; 115
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	d9 d7       	rcall	.+4018   	; 0x185c <lcd_puts>
	if(adc_procentais()<=99) lcd_puts(" ");			 							
     8aa:	10 de       	rcall	.-992    	; 0x4cc <adc_procentais>
     8ac:	84 36       	cpi	r24, 0x64	; 100
     8ae:	91 05       	cpc	r25, r1
     8b0:	18 f4       	brcc	.+6      	; 0x8b8 <__vector_9+0x17a>
     8b2:	83 e7       	ldi	r24, 0x73	; 115
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	d2 d7       	rcall	.+4004   	; 0x185c <lcd_puts>
	lcd_gotoxy(4,1); lcd_puts_p(T); 
     8b8:	84 e0       	ldi	r24, 0x04	; 4
     8ba:	61 e0       	ldi	r22, 0x01	; 1
     8bc:	ad d7       	rcall	.+3930   	; 0x1818 <lcd_gotoxy>
     8be:	83 e4       	ldi	r24, 0x43	; 67
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	d7 d7       	rcall	.+4014   	; 0x1872 <lcd_puts_p>
	lcd_puts(itoa(LDRth, buff, 10)); //iskarto procentais!
     8c4:	80 91 43 01 	lds	r24, 0x0143
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	6c e5       	ldi	r22, 0x5C	; 92
     8cc:	71 e0       	ldi	r23, 0x01	; 1
     8ce:	4a e0       	ldi	r20, 0x0A	; 10
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	43 d8       	rcall	.-3962   	; 0xfffff95a <__eeprom_end+0xff7ef95a>
     8d4:	c3 d7       	rcall	.+3974   	; 0x185c <lcd_puts>

	}



	if(adc_procentais()<=LDRth && LDRthISR==0){
     8d6:	fa dd       	rcall	.-1036   	; 0x4cc <adc_procentais>
     8d8:	20 91 43 01 	lds	r18, 0x0143
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	28 17       	cp	r18, r24
     8e0:	39 07       	cpc	r19, r25
     8e2:	68 f0       	brcs	.+26     	; 0x8fe <__vector_9+0x1c0>
     8e4:	80 91 5a 01 	lds	r24, 0x015A
     8e8:	88 23       	and	r24, r24
     8ea:	49 f4       	brne	.+18     	; 0x8fe <__vector_9+0x1c0>
		LDRthISR=1;
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	80 93 5a 01 	sts	0x015A, r24
		send_string("PIR ISR: ON \n\r");
     8f2:	85 e7       	ldi	r24, 0x75	; 117
     8f4:	90 e0       	ldi	r25, 0x00	; 0
     8f6:	fc db       	rcall	.-2056   	; 0xf0 <send_string>
		//Ijungiam PIR pertraukti
		GICR|=_BV(INT0);
     8f8:	8b b7       	in	r24, 0x3b	; 59
     8fa:	80 64       	ori	r24, 0x40	; 64
     8fc:	12 c0       	rjmp	.+36     	; 0x922 <__vector_9+0x1e4>
		}

	else if (adc_procentais()>LDRth && LDRthISR==1){
     8fe:	e6 dd       	rcall	.-1076   	; 0x4cc <adc_procentais>
     900:	20 91 43 01 	lds	r18, 0x0143
     904:	30 e0       	ldi	r19, 0x00	; 0
     906:	28 17       	cp	r18, r24
     908:	39 07       	cpc	r19, r25
     90a:	68 f4       	brcc	.+26     	; 0x926 <__vector_9+0x1e8>
     90c:	80 91 5a 01 	lds	r24, 0x015A
     910:	81 30       	cpi	r24, 0x01	; 1
     912:	49 f4       	brne	.+18     	; 0x926 <__vector_9+0x1e8>
		LDRthISR=0;
     914:	10 92 5a 01 	sts	0x015A, r1
		send_string("PIR ISR: OFF \n\r");
     918:	84 e8       	ldi	r24, 0x84	; 132
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	e9 db       	rcall	.-2094   	; 0xf0 <send_string>
		//Isjungiam PIR pertraukti
		GICR&=~_BV(INT0);
     91e:	8b b7       	in	r24, 0x3b	; 59
     920:	8f 7b       	andi	r24, 0xBF	; 191
     922:	8b bf       	out	0x3b, r24	; 59
     924:	8f c0       	rjmp	.+286    	; 0xa44 <__vector_9+0x306>
		}

	else LDRthISR=LDRthISR;
     926:	80 91 5a 01 	lds	r24, 0x015A
     92a:	80 93 5a 01 	sts	0x015A, r24
     92e:	8a c0       	rjmp	.+276    	; 0xa44 <__vector_9+0x306>


}

//LDR mode (proporcinis PWM)
else if(work_mode==4 && meniu==0 && config==0 && adc_read_times==8){
     930:	80 91 4b 01 	lds	r24, 0x014B
     934:	84 30       	cpi	r24, 0x04	; 4
     936:	09 f0       	breq	.+2      	; 0x93a <__vector_9+0x1fc>
     938:	85 c0       	rjmp	.+266    	; 0xa44 <__vector_9+0x306>
     93a:	80 91 48 01 	lds	r24, 0x0148
     93e:	88 23       	and	r24, r24
     940:	09 f0       	breq	.+2      	; 0x944 <__vector_9+0x206>
     942:	80 c0       	rjmp	.+256    	; 0xa44 <__vector_9+0x306>
     944:	80 91 49 01 	lds	r24, 0x0149
     948:	88 23       	and	r24, r24
     94a:	09 f0       	breq	.+2      	; 0x94e <__vector_9+0x210>
     94c:	7b c0       	rjmp	.+246    	; 0xa44 <__vector_9+0x306>
     94e:	80 91 54 01 	lds	r24, 0x0154
     952:	88 30       	cpi	r24, 0x08	; 8
     954:	09 f0       	breq	.+2      	; 0x958 <__vector_9+0x21a>
     956:	76 c0       	rjmp	.+236    	; 0xa44 <__vector_9+0x306>


		//Realus LDR rodmenys
		lcd_gotoxy(5,0);
     958:	85 e0       	ldi	r24, 0x05	; 5
     95a:	60 e0       	ldi	r22, 0x00	; 0
     95c:	5d d7       	rcall	.+3770   	; 0x1818 <lcd_gotoxy>
		lcd_puts(itoa(adc_procentais(), buff, 10));
     95e:	b6 dd       	rcall	.-1172   	; 0x4cc <adc_procentais>
     960:	6c e5       	ldi	r22, 0x5C	; 92
     962:	71 e0       	ldi	r23, 0x01	; 1
     964:	4a e0       	ldi	r20, 0x0A	; 10
     966:	50 e0       	ldi	r21, 0x00	; 0
     968:	f8 d7       	rcall	.+4080   	; 0x195a <itoa>
     96a:	78 d7       	rcall	.+3824   	; 0x185c <lcd_puts>
		lcd_puts_p(procentas);
     96c:	83 e3       	ldi	r24, 0x33	; 51
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	80 d7       	rcall	.+3840   	; 0x1872 <lcd_puts_p>
		if(adc_procentais()<=9) lcd_puts(" ");
     972:	ac dd       	rcall	.-1192   	; 0x4cc <adc_procentais>
     974:	0a 97       	sbiw	r24, 0x0a	; 10
     976:	18 f4       	brcc	.+6      	; 0x97e <__vector_9+0x240>
     978:	83 e7       	ldi	r24, 0x73	; 115
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	6f d7       	rcall	.+3806   	; 0x185c <lcd_puts>
		if(adc_procentais()<=99) lcd_puts(" ");
     97e:	a6 dd       	rcall	.-1204   	; 0x4cc <adc_procentais>
     980:	84 36       	cpi	r24, 0x64	; 100
     982:	91 05       	cpc	r25, r1
     984:	18 f4       	brcc	.+6      	; 0x98c <__vector_9+0x24e>
     986:	83 e7       	ldi	r24, 0x73	; 115
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	68 d7       	rcall	.+3792   	; 0x185c <lcd_puts>
		
		//PI reguliatoriaus rodmenys (LDRkoef koeficiento ir LDR invertavimo itaka), ale, kas petenka i OCR2 
		lcd_gotoxy(0,1); 
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	61 e0       	ldi	r22, 0x01	; 1
     990:	43 d7       	rcall	.+3718   	; 0x1818 <lcd_gotoxy>
		lcd_puts_p(K);
     992:	87 e4       	ldi	r24, 0x47	; 71
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	6d d7       	rcall	.+3802   	; 0x1872 <lcd_puts_p>
		if(LDRkoef>0) lcd_puts_p(minusas); 
     998:	80 91 45 01 	lds	r24, 0x0145
     99c:	88 23       	and	r24, r24
     99e:	19 f0       	breq	.+6      	; 0x9a6 <__vector_9+0x268>
     9a0:	8f e3       	ldi	r24, 0x3F	; 63
     9a2:	90 e0       	ldi	r25, 0x00	; 0
     9a4:	66 d7       	rcall	.+3788   	; 0x1872 <lcd_puts_p>
		lcd_puts(itoa(LDRkoef, buff, 10));		
     9a6:	80 91 45 01 	lds	r24, 0x0145
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	6c e5       	ldi	r22, 0x5C	; 92
     9ae:	71 e0       	ldi	r23, 0x01	; 1
     9b0:	4a e0       	ldi	r20, 0x0A	; 10
     9b2:	50 e0       	ldi	r21, 0x00	; 0
     9b4:	d2 d7       	rcall	.+4004   	; 0x195a <itoa>
     9b6:	52 d7       	rcall	.+3748   	; 0x185c <lcd_puts>
		if(LDRkoef<=9) lcd_puts("  ");
     9b8:	80 91 45 01 	lds	r24, 0x0145
     9bc:	8a 30       	cpi	r24, 0x0A	; 10
     9be:	18 f4       	brcc	.+6      	; 0x9c6 <__vector_9+0x288>
     9c0:	84 e9       	ldi	r24, 0x94	; 148
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	4b d7       	rcall	.+3734   	; 0x185c <lcd_puts>

		//Tas kas patenka i PWM 
		lcd_gotoxy(4,1); 
     9c6:	84 e0       	ldi	r24, 0x04	; 4
     9c8:	61 e0       	ldi	r22, 0x01	; 1
     9ca:	26 d7       	rcall	.+3660   	; 0x1818 <lcd_gotoxy>
		lcd_puts_p(tilde);
     9cc:	8d e3       	ldi	r24, 0x3D	; 61
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	50 d7       	rcall	.+3744   	; 0x1872 <lcd_puts_p>
		lcd_puts_p(procentas);
		
		if(adc_procentais()<=9 && LDRinv==0) lcd_puts(" ");
		else if((100-adc_procentais())<=9 && LDRinv==1) lcd_puts(" ");
*/
		if(LDRinv==0)lcd_puts(itoa(adc_procentais_P(LDRkoef), buff, 10));
     9d2:	80 91 44 01 	lds	r24, 0x0144
     9d6:	88 23       	and	r24, r24
     9d8:	29 f4       	brne	.+10     	; 0x9e4 <__vector_9+0x2a6>
     9da:	80 91 45 01 	lds	r24, 0x0145
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	8b dd       	rcall	.-1258   	; 0x4f8 <adc_procentais_P>
     9e2:	0a c0       	rjmp	.+20     	; 0x9f8 <__vector_9+0x2ba>
		else lcd_puts(itoa(100-adc_procentais_P(LDRkoef), buff, 10)); 
     9e4:	80 91 45 01 	lds	r24, 0x0145
     9e8:	90 e0       	ldi	r25, 0x00	; 0
     9ea:	86 dd       	rcall	.-1268   	; 0x4f8 <adc_procentais_P>
     9ec:	24 e6       	ldi	r18, 0x64	; 100
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	a9 01       	movw	r20, r18
     9f2:	48 1b       	sub	r20, r24
     9f4:	59 0b       	sbc	r21, r25
     9f6:	ca 01       	movw	r24, r20
     9f8:	6c e5       	ldi	r22, 0x5C	; 92
     9fa:	71 e0       	ldi	r23, 0x01	; 1
     9fc:	4a e0       	ldi	r20, 0x0A	; 10
     9fe:	50 e0       	ldi	r21, 0x00	; 0
     a00:	ac d7       	rcall	.+3928   	; 0x195a <itoa>
     a02:	2c d7       	rcall	.+3672   	; 0x185c <lcd_puts>
		lcd_puts_p(procentas);
     a04:	83 e3       	ldi	r24, 0x33	; 51
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	34 d7       	rcall	.+3688   	; 0x1872 <lcd_puts_p>
		
		if(adc_procentais_P(LDRkoef)<=9 && LDRinv==0) lcd_puts(" ");
     a0a:	80 91 45 01 	lds	r24, 0x0145
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	73 dd       	rcall	.-1306   	; 0x4f8 <adc_procentais_P>
     a12:	0a 97       	sbiw	r24, 0x0a	; 10
     a14:	20 f4       	brcc	.+8      	; 0xa1e <__vector_9+0x2e0>
     a16:	80 91 44 01 	lds	r24, 0x0144
     a1a:	88 23       	and	r24, r24
     a1c:	79 f0       	breq	.+30     	; 0xa3c <__vector_9+0x2fe>
		else if((100-adc_procentais_P(LDRkoef))<=9 && LDRinv==1) lcd_puts(" ");
     a1e:	80 91 45 01 	lds	r24, 0x0145
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	69 dd       	rcall	.-1326   	; 0x4f8 <adc_procentais_P>
     a26:	24 e6       	ldi	r18, 0x64	; 100
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	28 1b       	sub	r18, r24
     a2c:	39 0b       	sbc	r19, r25
     a2e:	2a 30       	cpi	r18, 0x0A	; 10
     a30:	31 05       	cpc	r19, r1
     a32:	38 f4       	brcc	.+14     	; 0xa42 <__vector_9+0x304>
     a34:	80 91 44 01 	lds	r24, 0x0144
     a38:	81 30       	cpi	r24, 0x01	; 1
     a3a:	19 f4       	brne	.+6      	; 0xa42 <__vector_9+0x304>
     a3c:	83 e7       	ldi	r24, 0x73	; 115
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	0d d7       	rcall	.+3610   	; 0x185c <lcd_puts>
		
		
		PI_reguliatorius();
     a42:	c3 dd       	rcall	.-1146   	; 0x5ca <PI_reguliatorius>
#endif
PI_reguliatorius();
}
*/

if(adc_read_times==8){
     a44:	80 91 54 01 	lds	r24, 0x0154
     a48:	88 30       	cpi	r24, 0x08	; 8
     a4a:	31 f4       	brne	.+12     	; 0xa58 <__vector_9+0x31a>
	send_string(itoa(adc_procentais(), buff, 10));
	send_string("%");
	send_string("\n\r");
#endif

	adc_value=0;
     a4c:	10 92 56 01 	sts	0x0156, r1
     a50:	10 92 55 01 	sts	0x0155, r1
	adc_read_times=0;
     a54:	10 92 54 01 	sts	0x0154, r1
	TIFR |= (1<<TOV0);		//set interrupt on overflow
	TIMSK |= (1<<TOIE0);
	TCNT0 = 223;
}

void start_timer0()	{TCCR0 |= (1<<CS00)|(1<<CS02); }
     a58:	83 b7       	in	r24, 0x33	; 51
     a5a:	85 60       	ori	r24, 0x05	; 5
     a5c:	83 bf       	out	0x33, r24	; 51


start_timer0();


} //End of ISR
     a5e:	ff 91       	pop	r31
     a60:	ef 91       	pop	r30
     a62:	bf 91       	pop	r27
     a64:	af 91       	pop	r26
     a66:	9f 91       	pop	r25
     a68:	8f 91       	pop	r24
     a6a:	7f 91       	pop	r23
     a6c:	6f 91       	pop	r22
     a6e:	5f 91       	pop	r21
     a70:	4f 91       	pop	r20
     a72:	3f 91       	pop	r19
     a74:	2f 91       	pop	r18
     a76:	1f 91       	pop	r17
     a78:	0f 91       	pop	r16
     a7a:	0f 90       	pop	r0
     a7c:	0f be       	out	0x3f, r0	; 63
     a7e:	0f 90       	pop	r0
     a80:	1f 90       	pop	r1
     a82:	18 95       	reti

00000a84 <__vector_1>:
#include "lcd.h"
#include "menu.h"


//PIR sensorius
ISR(INT0_vect){
     a84:	1f 92       	push	r1
     a86:	0f 92       	push	r0
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	0f 92       	push	r0
     a8c:	11 24       	eor	r1, r1
     a8e:	2f 93       	push	r18
     a90:	3f 93       	push	r19
     a92:	4f 93       	push	r20
     a94:	5f 93       	push	r21
     a96:	6f 93       	push	r22
     a98:	7f 93       	push	r23
     a9a:	8f 93       	push	r24
     a9c:	9f 93       	push	r25
     a9e:	af 93       	push	r26
     aa0:	bf 93       	push	r27
     aa2:	ef 93       	push	r30
     aa4:	ff 93       	push	r31
//	GICR&=~_BV(INT0); //isjungiam PIR pertraukti
	send_string("PIR \n\r");
     aa6:	87 e9       	ldi	r24, 0x97	; 151
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	22 db       	rcall	.-2492   	; 0xf0 <send_string>


	clock_second=0;
     aac:	10 92 52 01 	sts	0x0152, r1
	clock_millisecond=0;
     ab0:	10 92 51 01 	sts	0x0151, r1
     ab4:	10 92 50 01 	sts	0x0150, r1
	timer=0;
     ab8:	10 92 53 01 	sts	0x0153, r1

	if(meniu==0 && config==0){
     abc:	80 91 48 01 	lds	r24, 0x0148
     ac0:	88 23       	and	r24, r24
     ac2:	c1 f5       	brne	.+112    	; 0xb34 <__vector_1+0xb0>
     ac4:	80 91 49 01 	lds	r24, 0x0149
     ac8:	88 23       	and	r24, r24
     aca:	a1 f5       	brne	.+104    	; 0xb34 <__vector_1+0xb0>
	lcd_light=1; //trumpam ijungiam LCD pasvietima
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	80 93 47 01 	sts	0x0147, r24
	LCD_LED_PORT |= _BV(LCD_LED_BIT); //ijungiam LCD pasvietima
     ad2:	ac 9a       	sbi	0x15, 4	; 21

	if(work_mode==3){
     ad4:	80 91 4b 01 	lds	r24, 0x014B
     ad8:	83 30       	cpi	r24, 0x03	; 3
     ada:	79 f4       	brne	.+30     	; 0xafa <__vector_1+0x76>
		lcd_gotoxy(4,0); 
     adc:	84 e0       	ldi	r24, 0x04	; 4
     ade:	60 e0       	ldi	r22, 0x00	; 0
     ae0:	9b d6       	rcall	.+3382   	; 0x1818 <lcd_gotoxy>
		lcd_puts(itoa(timeOUT, buff, 10)); 
     ae2:	80 91 42 01 	lds	r24, 0x0142
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	6c e5       	ldi	r22, 0x5C	; 92
     aea:	71 e0       	ldi	r23, 0x01	; 1
     aec:	4a e0       	ldi	r20, 0x0A	; 10
     aee:	50 e0       	ldi	r21, 0x00	; 0
     af0:	34 d7       	rcall	.+3688   	; 0x195a <itoa>
     af2:	b4 d6       	rcall	.+3432   	; 0x185c <lcd_puts>
		lcd_gotoxy(6,0); 
     af4:	86 e0       	ldi	r24, 0x06	; 6
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	19 c0       	rjmp	.+50     	; 0xb2c <__vector_1+0xa8>
		lcd_puts_p(sekunde);}
	
	else{
		//PIR/LDR darbo rezime, kai suveikia PIR pertrauktis
		//isvedamas tekstas PIR:
		lcd_gotoxy(0,1);
     afa:	80 e0       	ldi	r24, 0x00	; 0
     afc:	61 e0       	ldi	r22, 0x01	; 1
     afe:	8c d6       	rcall	.+3352   	; 0x1818 <lcd_gotoxy>
		lcd_puts_p(Menu1[2]);
     b00:	80 91 fc 00 	lds	r24, 0x00FC
     b04:	90 91 fd 00 	lds	r25, 0x00FD
     b08:	b4 d6       	rcall	.+3432   	; 0x1872 <lcd_puts_p>
		lcd_puts_p(dvitaskis_t);
     b0a:	80 e3       	ldi	r24, 0x30	; 48
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	b1 d6       	rcall	.+3426   	; 0x1872 <lcd_puts_p>
		
		lcd_gotoxy(4,1); 
     b10:	84 e0       	ldi	r24, 0x04	; 4
     b12:	61 e0       	ldi	r22, 0x01	; 1
     b14:	81 d6       	rcall	.+3330   	; 0x1818 <lcd_gotoxy>
		lcd_puts(itoa(timeOUT, buff, 10)); 
     b16:	80 91 42 01 	lds	r24, 0x0142
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	6c e5       	ldi	r22, 0x5C	; 92
     b1e:	71 e0       	ldi	r23, 0x01	; 1
     b20:	4a e0       	ldi	r20, 0x0A	; 10
     b22:	50 e0       	ldi	r21, 0x00	; 0
     b24:	1a d7       	rcall	.+3636   	; 0x195a <itoa>
     b26:	9a d6       	rcall	.+3380   	; 0x185c <lcd_puts>
		lcd_gotoxy(6,1); 
     b28:	86 e0       	ldi	r24, 0x06	; 6
     b2a:	61 e0       	ldi	r22, 0x01	; 1
     b2c:	75 d6       	rcall	.+3306   	; 0x1818 <lcd_gotoxy>
		lcd_puts_p(sekunde);}
     b2e:	88 e3       	ldi	r24, 0x38	; 56
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	9f d6       	rcall	.+3390   	; 0x1872 <lcd_puts_p>


	}


	fade_in();
     b34:	4e dc       	rcall	.-1892   	; 0x3d2 <fade_in>
	PIR=1; //nuo cia visa darba atlieka TIMER1 pertrauktis
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	80 93 59 01 	sts	0x0159, r24


//	GICR|=_BV(INT0); //ijungiam PIR pertraukti


}
     b3c:	ff 91       	pop	r31
     b3e:	ef 91       	pop	r30
     b40:	bf 91       	pop	r27
     b42:	af 91       	pop	r26
     b44:	9f 91       	pop	r25
     b46:	8f 91       	pop	r24
     b48:	7f 91       	pop	r23
     b4a:	6f 91       	pop	r22
     b4c:	5f 91       	pop	r21
     b4e:	4f 91       	pop	r20
     b50:	3f 91       	pop	r19
     b52:	2f 91       	pop	r18
     b54:	0f 90       	pop	r0
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	0f 90       	pop	r0
     b5a:	1f 90       	pop	r1
     b5c:	18 95       	reti

00000b5e <puslapiai_config_2>:
	if(config_menu_page==config_menu_page_max) lcd_puts_p(Menu3[0]); else lcd_puts_p(Menu3[config_menu_page+1]);
}

void puslapiai_config_2(){

	lcd_clrscr();
     b5e:	66 d6       	rcall	.+3276   	; 0x182c <lcd_clrscr>
	lcd_puts_p(Menu3[config_menu_page]); 
     b60:	e0 91 4e 01 	lds	r30, 0x014E
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	ee 0f       	add	r30, r30
     b68:	ff 1f       	adc	r31, r31
     b6a:	ec 5f       	subi	r30, 0xFC	; 252
     b6c:	fe 4f       	sbci	r31, 0xFE	; 254
     b6e:	80 81       	ld	r24, Z
     b70:	91 81       	ldd	r25, Z+1	; 0x01
     b72:	7f d6       	rcall	.+3326   	; 0x1872 <lcd_puts_p>
	lcd_puts_p(dvitaskis_n);
     b74:	8d e2       	ldi	r24, 0x2D	; 45
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	7c d6       	rcall	.+3320   	; 0x1872 <lcd_puts_p>



	switch(config_menu_page){
     b7a:	80 91 4e 01 	lds	r24, 0x014E
     b7e:	82 30       	cpi	r24, 0x02	; 2
     b80:	89 f1       	breq	.+98     	; 0xbe4 <puslapiai_config_2+0x86>
     b82:	83 30       	cpi	r24, 0x03	; 3
     b84:	30 f4       	brcc	.+12     	; 0xb92 <puslapiai_config_2+0x34>
     b86:	88 23       	and	r24, r24
     b88:	69 f0       	breq	.+26     	; 0xba4 <puslapiai_config_2+0x46>
     b8a:	81 30       	cpi	r24, 0x01	; 1
     b8c:	09 f0       	breq	.+2      	; 0xb90 <puslapiai_config_2+0x32>
     b8e:	88 c0       	rjmp	.+272    	; 0xca0 <puslapiai_config_2+0x142>
     b90:	11 c0       	rjmp	.+34     	; 0xbb4 <puslapiai_config_2+0x56>
     b92:	84 30       	cpi	r24, 0x04	; 4
     b94:	09 f4       	brne	.+2      	; 0xb98 <puslapiai_config_2+0x3a>
     b96:	4a c0       	rjmp	.+148    	; 0xc2c <puslapiai_config_2+0xce>
     b98:	84 30       	cpi	r24, 0x04	; 4
     b9a:	80 f1       	brcs	.+96     	; 0xbfc <puslapiai_config_2+0x9e>
     b9c:	85 30       	cpi	r24, 0x05	; 5
     b9e:	09 f0       	breq	.+2      	; 0xba2 <puslapiai_config_2+0x44>
     ba0:	7f c0       	rjmp	.+254    	; 0xca0 <puslapiai_config_2+0x142>
     ba2:	5f c0       	rjmp	.+190    	; 0xc62 <puslapiai_config_2+0x104>

		case 0:{ //minPWM config langas
				//live preview
				wmode(1);
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	81 dd       	rcall	.-1278   	; 0x6aa <wmode>
				timer2_set(minPWM); //OCR2=minPWM;
     ba8:	80 91 40 01 	lds	r24, 0x0140
     bac:	e6 da       	rcall	.-2612   	; 0x17a <timer2_set>

				lcd_puts(itoa(minPWM*100/255, buff, 10));
     bae:	90 91 40 01 	lds	r25, 0x0140
     bb2:	07 c0       	rjmp	.+14     	; 0xbc2 <puslapiai_config_2+0x64>
				break;
				}

		case 1:{ //maxPWM config langas
				//live preview
				wmode(1);
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	79 dd       	rcall	.-1294   	; 0x6aa <wmode>
				timer2_set(maxPWM); //OCR2=maxPWM;				
     bb8:	80 91 41 01 	lds	r24, 0x0141
     bbc:	de da       	rcall	.-2628   	; 0x17a <timer2_set>

				lcd_puts(itoa(maxPWM*100/255, buff, 10));
     bbe:	90 91 41 01 	lds	r25, 0x0141
     bc2:	84 e6       	ldi	r24, 0x64	; 100
     bc4:	98 9f       	mul	r25, r24
     bc6:	c0 01       	movw	r24, r0
     bc8:	11 24       	eor	r1, r1
     bca:	6f ef       	ldi	r22, 0xFF	; 255
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	b2 d6       	rcall	.+3428   	; 0x1934 <__divmodhi4>
     bd0:	cb 01       	movw	r24, r22
     bd2:	6c e5       	ldi	r22, 0x5C	; 92
     bd4:	71 e0       	ldi	r23, 0x01	; 1
     bd6:	4a e0       	ldi	r20, 0x0A	; 10
     bd8:	50 e0       	ldi	r21, 0x00	; 0
     bda:	bf d6       	rcall	.+3454   	; 0x195a <itoa>
     bdc:	3f d6       	rcall	.+3198   	; 0x185c <lcd_puts>
				lcd_puts_p(procentas_n);
     bde:	85 e3       	ldi	r24, 0x35	; 53
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	3d c0       	rjmp	.+122    	; 0xc5e <puslapiai_config_2+0x100>
				break;
				}

		case 2:{ //timeOUT PIR pertraukciai (kiek laiko ant maxPWM bus uzdegta diodu juosta)
				lcd_puts(itoa(timeOUT, buff, 10));
     be4:	80 91 42 01 	lds	r24, 0x0142
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	6c e5       	ldi	r22, 0x5C	; 92
     bec:	71 e0       	ldi	r23, 0x01	; 1
     bee:	4a e0       	ldi	r20, 0x0A	; 10
     bf0:	50 e0       	ldi	r21, 0x00	; 0
     bf2:	b3 d6       	rcall	.+3430   	; 0x195a <itoa>
     bf4:	33 d6       	rcall	.+3174   	; 0x185c <lcd_puts>
				lcd_puts_p(sekunde_n);
     bf6:	8a e3       	ldi	r24, 0x3A	; 58
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	31 c0       	rjmp	.+98     	; 0xc5e <puslapiai_config_2+0x100>
				break;
				}
			
		case 3:{ //LDR threshold nustatymas 
				 //live preview realizuotas ISR (TIMER0_OVF_vect) pertrauktyje
				wmode(4);
     bfc:	84 e0       	ldi	r24, 0x04	; 4
     bfe:	55 dd       	rcall	.-1366   	; 0x6aa <wmode>

				lcd_gotoxy(0,1); lcd_puts_p(R);
     c00:	80 e0       	ldi	r24, 0x00	; 0
     c02:	61 e0       	ldi	r22, 0x01	; 1
     c04:	09 d6       	rcall	.+3090   	; 0x1818 <lcd_gotoxy>
     c06:	81 e4       	ldi	r24, 0x41	; 65
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	33 d6       	rcall	.+3174   	; 0x1872 <lcd_puts_p>
				// "reali" ADC reiksme atvaizduojama LDR ISR pertrauktyje 							
				lcd_gotoxy(4,1); lcd_puts_p(T); 
     c0c:	84 e0       	ldi	r24, 0x04	; 4
     c0e:	61 e0       	ldi	r22, 0x01	; 1
     c10:	03 d6       	rcall	.+3078   	; 0x1818 <lcd_gotoxy>
     c12:	83 e4       	ldi	r24, 0x43	; 67
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	2d d6       	rcall	.+3162   	; 0x1872 <lcd_puts_p>
				lcd_puts(itoa(LDRth, buff, 10)); //iskarto procentais!
     c18:	80 91 43 01 	lds	r24, 0x0143
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	6c e5       	ldi	r22, 0x5C	; 92
     c20:	71 e0       	ldi	r23, 0x01	; 1
     c22:	4a e0       	ldi	r20, 0x0A	; 10
     c24:	50 e0       	ldi	r21, 0x00	; 0
     c26:	99 d6       	rcall	.+3378   	; 0x195a <itoa>
     c28:	19 d6       	rcall	.+3122   	; 0x185c <lcd_puts>
     c2a:	08 95       	ret

		case 4:{ //LDR reiksmes invertavimo nustatymas
		 		//live preview realizuotas ISR (TIMER0_OVF_vect) pertrauktyje
		

				wmode(4);
     c2c:	84 e0       	ldi	r24, 0x04	; 4
     c2e:	3d dd       	rcall	.-1414   	; 0x6aa <wmode>
				
				lcd_gotoxy(7,0);
     c30:	87 e0       	ldi	r24, 0x07	; 7
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	f1 d5       	rcall	.+3042   	; 0x1818 <lcd_gotoxy>
				lcd_puts(itoa(LDRinv, buff, 10));
     c36:	80 91 44 01 	lds	r24, 0x0144
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	6c e5       	ldi	r22, 0x5C	; 92
     c3e:	71 e0       	ldi	r23, 0x01	; 1
     c40:	4a e0       	ldi	r20, 0x0A	; 10
     c42:	50 e0       	ldi	r21, 0x00	; 0
     c44:	8a d6       	rcall	.+3348   	; 0x195a <itoa>
     c46:	0a d6       	rcall	.+3092   	; 0x185c <lcd_puts>

				lcd_gotoxy(0,1); lcd_puts_p(R);
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	61 e0       	ldi	r22, 0x01	; 1
     c4c:	e5 d5       	rcall	.+3018   	; 0x1818 <lcd_gotoxy>
     c4e:	81 e4       	ldi	r24, 0x41	; 65
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	0f d6       	rcall	.+3102   	; 0x1872 <lcd_puts_p>
				// "reali" ADC reiksme atvaizduojama LDR ISR pertrauktyje 							
				lcd_gotoxy(4,1); lcd_puts_p(I);
     c54:	84 e0       	ldi	r24, 0x04	; 4
     c56:	61 e0       	ldi	r22, 0x01	; 1
     c58:	df d5       	rcall	.+3006   	; 0x1818 <lcd_gotoxy>
     c5a:	85 e4       	ldi	r24, 0x45	; 69
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	09 d6       	rcall	.+3090   	; 0x1872 <lcd_puts_p>
     c60:	08 95       	ret
									
				break;
				}

		case 5:{//ADCgain nustatymas
				wmode(4);	
     c62:	84 e0       	ldi	r24, 0x04	; 4
     c64:	22 dd       	rcall	.-1468   	; 0x6aa <wmode>

				lcd_gotoxy(0,1);
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	61 e0       	ldi	r22, 0x01	; 1
     c6a:	d6 d5       	rcall	.+2988   	; 0x1818 <lcd_gotoxy>

				lcd_puts(itoa(ADCgain/10, buff, 10));
     c6c:	80 91 f7 00 	lds	r24, 0x00F7
     c70:	6a e0       	ldi	r22, 0x0A	; 10
     c72:	40 d6       	rcall	.+3200   	; 0x18f4 <__udivmodqi4>
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	6c e5       	ldi	r22, 0x5C	; 92
     c78:	71 e0       	ldi	r23, 0x01	; 1
     c7a:	4a e0       	ldi	r20, 0x0A	; 10
     c7c:	50 e0       	ldi	r21, 0x00	; 0
     c7e:	6d d6       	rcall	.+3290   	; 0x195a <itoa>
     c80:	ed d5       	rcall	.+3034   	; 0x185c <lcd_puts>
				lcd_puts(".");
     c82:	8e e9       	ldi	r24, 0x9E	; 158
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	ea d5       	rcall	.+3028   	; 0x185c <lcd_puts>
				lcd_puts(itoa(ADCgain%10, buff, 10));
     c88:	80 91 f7 00 	lds	r24, 0x00F7
     c8c:	6a e0       	ldi	r22, 0x0A	; 10
     c8e:	32 d6       	rcall	.+3172   	; 0x18f4 <__udivmodqi4>
     c90:	89 2f       	mov	r24, r25
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	6c e5       	ldi	r22, 0x5C	; 92
     c96:	71 e0       	ldi	r23, 0x01	; 1
     c98:	4a e0       	ldi	r20, 0x0A	; 10
     c9a:	50 e0       	ldi	r21, 0x00	; 0
     c9c:	5e d6       	rcall	.+3260   	; 0x195a <itoa>
     c9e:	de d5       	rcall	.+3004   	; 0x185c <lcd_puts>
     ca0:	08 95       	ret

00000ca2 <menu_config_2>:
//config meniu (2as lygis)
void menu_config_2(){
		
		
		
		switch(config_menu_page){
     ca2:	80 91 4e 01 	lds	r24, 0x014E
     ca6:	82 30       	cpi	r24, 0x02	; 2
     ca8:	09 f4       	brne	.+2      	; 0xcac <menu_config_2+0xa>
     caa:	59 c0       	rjmp	.+178    	; 0xd5e <menu_config_2+0xbc>
     cac:	83 30       	cpi	r24, 0x03	; 3
     cae:	30 f4       	brcc	.+12     	; 0xcbc <menu_config_2+0x1a>
     cb0:	88 23       	and	r24, r24
     cb2:	71 f0       	breq	.+28     	; 0xcd0 <menu_config_2+0x2e>
     cb4:	81 30       	cpi	r24, 0x01	; 1
     cb6:	09 f0       	breq	.+2      	; 0xcba <menu_config_2+0x18>
     cb8:	c5 c0       	rjmp	.+394    	; 0xe44 <menu_config_2+0x1a2>
     cba:	2d c0       	rjmp	.+90     	; 0xd16 <menu_config_2+0x74>
     cbc:	84 30       	cpi	r24, 0x04	; 4
     cbe:	09 f4       	brne	.+2      	; 0xcc2 <menu_config_2+0x20>
     cc0:	8e c0       	rjmp	.+284    	; 0xdde <menu_config_2+0x13c>
     cc2:	84 30       	cpi	r24, 0x04	; 4
     cc4:	08 f4       	brcc	.+2      	; 0xcc8 <menu_config_2+0x26>
     cc6:	64 c0       	rjmp	.+200    	; 0xd90 <menu_config_2+0xee>
     cc8:	85 30       	cpi	r24, 0x05	; 5
     cca:	09 f0       	breq	.+2      	; 0xcce <menu_config_2+0x2c>
     ccc:	bb c0       	rjmp	.+374    	; 0xe44 <menu_config_2+0x1a2>
     cce:	a2 c0       	rjmp	.+324    	; 0xe14 <menu_config_2+0x172>

			case 0:{ //minPWM
					if(bit_is_set(PIND, PD4)) {if (nuostatas!=(sizeof(fadein)/sizeof(fadein[0])-1))
     cd0:	84 9b       	sbis	0x10, 4	; 16
     cd2:	0b c0       	rjmp	.+22     	; 0xcea <menu_config_2+0x48>
     cd4:	80 91 46 01 	lds	r24, 0x0146
     cd8:	8d 32       	cpi	r24, 0x2D	; 45
     cda:	21 f0       	breq	.+8      	; 0xce4 <menu_config_2+0x42>
												nuostatas++; else nuostatas=0;} 												
     cdc:	80 91 46 01 	lds	r24, 0x0146
     ce0:	8f 5f       	subi	r24, 0xFF	; 255
     ce2:	0c c0       	rjmp	.+24     	; 0xcfc <menu_config_2+0x5a>
     ce4:	10 92 46 01 	sts	0x0146, r1
     ce8:	0b c0       	rjmp	.+22     	; 0xd00 <menu_config_2+0x5e>
												
												else {if (nuostatas==0 )
     cea:	80 91 46 01 	lds	r24, 0x0146
     cee:	88 23       	and	r24, r24
     cf0:	11 f4       	brne	.+4      	; 0xcf6 <menu_config_2+0x54>
														nuostatas=(sizeof(fadein)/sizeof(fadein[0])-1); else nuostatas--;}		
     cf2:	8d e2       	ldi	r24, 0x2D	; 45
     cf4:	03 c0       	rjmp	.+6      	; 0xcfc <menu_config_2+0x5a>
     cf6:	80 91 46 01 	lds	r24, 0x0146
     cfa:	81 50       	subi	r24, 0x01	; 1
     cfc:	80 93 46 01 	sts	0x0146, r24
											
					minPWM=fadein[nuostatas];					
     d00:	e0 91 46 01 	lds	r30, 0x0146
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	ee 5e       	subi	r30, 0xEE	; 238
     d08:	fe 4f       	sbci	r31, 0xFE	; 254
     d0a:	80 81       	ld	r24, Z
     d0c:	80 93 40 01 	sts	0x0140, r24
					timer2_set(minPWM); //OCR2=minPWM;					
     d10:	80 91 40 01 	lds	r24, 0x0140
     d14:	22 c0       	rjmp	.+68     	; 0xd5a <menu_config_2+0xb8>
					break;
					}
			
			case 1:{ //maxPWM
					if(bit_is_set(PIND, PD4)) {if (nuostatas!=(sizeof(fadein)/sizeof(fadein[0])-1))
     d16:	84 9b       	sbis	0x10, 4	; 16
     d18:	0b c0       	rjmp	.+22     	; 0xd30 <menu_config_2+0x8e>
     d1a:	80 91 46 01 	lds	r24, 0x0146
     d1e:	8d 32       	cpi	r24, 0x2D	; 45
     d20:	21 f0       	breq	.+8      	; 0xd2a <menu_config_2+0x88>
												nuostatas++; else nuostatas=0;} 												
     d22:	80 91 46 01 	lds	r24, 0x0146
     d26:	8f 5f       	subi	r24, 0xFF	; 255
     d28:	0c c0       	rjmp	.+24     	; 0xd42 <menu_config_2+0xa0>
     d2a:	10 92 46 01 	sts	0x0146, r1
     d2e:	0b c0       	rjmp	.+22     	; 0xd46 <menu_config_2+0xa4>
												
												else {if (nuostatas==0 )
     d30:	80 91 46 01 	lds	r24, 0x0146
     d34:	88 23       	and	r24, r24
     d36:	11 f4       	brne	.+4      	; 0xd3c <menu_config_2+0x9a>
														nuostatas=(sizeof(fadein)/sizeof(fadein[0])-1); else nuostatas--;}						
     d38:	8d e2       	ldi	r24, 0x2D	; 45
     d3a:	03 c0       	rjmp	.+6      	; 0xd42 <menu_config_2+0xa0>
     d3c:	80 91 46 01 	lds	r24, 0x0146
     d40:	81 50       	subi	r24, 0x01	; 1
     d42:	80 93 46 01 	sts	0x0146, r24
					
					maxPWM=fadein[nuostatas];					
     d46:	e0 91 46 01 	lds	r30, 0x0146
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	ee 5e       	subi	r30, 0xEE	; 238
     d4e:	fe 4f       	sbci	r31, 0xFE	; 254
     d50:	80 81       	ld	r24, Z
     d52:	80 93 41 01 	sts	0x0141, r24
					timer2_set(maxPWM); //OCR2=maxPWM;
     d56:	80 91 41 01 	lds	r24, 0x0141
     d5a:	0f da       	rcall	.-3042   	; 0x17a <timer2_set>
     d5c:	73 c0       	rjmp	.+230    	; 0xe44 <menu_config_2+0x1a2>
					break;
					}

			case 2:{ //PIR TimeOUT
					if(bit_is_set(PIND, PD4)) {if (timeOUT!=60) timeOUT++; else timeOUT=0;} 
     d5e:	84 9b       	sbis	0x10, 4	; 16
     d60:	0b c0       	rjmp	.+22     	; 0xd78 <menu_config_2+0xd6>
     d62:	80 91 42 01 	lds	r24, 0x0142
     d66:	8c 33       	cpi	r24, 0x3C	; 60
     d68:	21 f0       	breq	.+8      	; 0xd72 <menu_config_2+0xd0>
     d6a:	80 91 42 01 	lds	r24, 0x0142
     d6e:	8f 5f       	subi	r24, 0xFF	; 255
     d70:	08 c0       	rjmp	.+16     	; 0xd82 <menu_config_2+0xe0>
     d72:	10 92 42 01 	sts	0x0142, r1
     d76:	66 c0       	rjmp	.+204    	; 0xe44 <menu_config_2+0x1a2>
												else {if (timeOUT==0) timeOUT=60; else timeOUT--;}
     d78:	80 91 42 01 	lds	r24, 0x0142
     d7c:	88 23       	and	r24, r24
     d7e:	21 f4       	brne	.+8      	; 0xd88 <menu_config_2+0xe6>
     d80:	8c e3       	ldi	r24, 0x3C	; 60
     d82:	80 93 42 01 	sts	0x0142, r24
     d86:	5e c0       	rjmp	.+188    	; 0xe44 <menu_config_2+0x1a2>
     d88:	80 91 42 01 	lds	r24, 0x0142
     d8c:	81 50       	subi	r24, 0x01	; 1
     d8e:	f9 cf       	rjmp	.-14     	; 0xd82 <menu_config_2+0xe0>
					break;
					}

			case 3:{ //LDRth

					if(bit_is_set(PIND, PD4)) {if (LDRth!=100) LDRth=(255/100)*LDRth++; else LDRth=0;} 
     d90:	84 9b       	sbis	0x10, 4	; 16
     d92:	11 c0       	rjmp	.+34     	; 0xdb6 <menu_config_2+0x114>
     d94:	80 91 43 01 	lds	r24, 0x0143
     d98:	84 36       	cpi	r24, 0x64	; 100
     d9a:	51 f0       	breq	.+20     	; 0xdb0 <menu_config_2+0x10e>
     d9c:	20 91 43 01 	lds	r18, 0x0143
     da0:	82 2f       	mov	r24, r18
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	80 93 43 01 	sts	0x0143, r24
     dac:	2f 5f       	subi	r18, 0xFF	; 255
     dae:	14 c0       	rjmp	.+40     	; 0xdd8 <menu_config_2+0x136>
     db0:	10 92 43 01 	sts	0x0143, r1
     db4:	47 c0       	rjmp	.+142    	; 0xe44 <menu_config_2+0x1a2>
												else {if (LDRth==0) LDRth=100; else LDRth=(255/100)*LDRth--;}			
     db6:	80 91 43 01 	lds	r24, 0x0143
     dba:	88 23       	and	r24, r24
     dbc:	21 f4       	brne	.+8      	; 0xdc6 <menu_config_2+0x124>
     dbe:	84 e6       	ldi	r24, 0x64	; 100
     dc0:	80 93 43 01 	sts	0x0143, r24
     dc4:	3f c0       	rjmp	.+126    	; 0xe44 <menu_config_2+0x1a2>
     dc6:	20 91 43 01 	lds	r18, 0x0143
     dca:	82 2f       	mov	r24, r18
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	80 93 43 01 	sts	0x0143, r24
     dd6:	21 50       	subi	r18, 0x01	; 1
     dd8:	20 93 43 01 	sts	0x0143, r18
     ddc:	33 c0       	rjmp	.+102    	; 0xe44 <menu_config_2+0x1a2>
					break;
					}

			case 4:{ //LDRinv

					if(bit_is_set(PIND, PD4)) {if (LDRinv!=1) LDRinv=LDRinv++; else LDRinv=0;} 
     dde:	84 9b       	sbis	0x10, 4	; 16
     de0:	0d c0       	rjmp	.+26     	; 0xdfc <menu_config_2+0x15a>
     de2:	80 91 44 01 	lds	r24, 0x0144
     de6:	81 30       	cpi	r24, 0x01	; 1
     de8:	31 f0       	breq	.+12     	; 0xdf6 <menu_config_2+0x154>
     dea:	80 91 44 01 	lds	r24, 0x0144
     dee:	80 93 44 01 	sts	0x0144, r24
     df2:	8f 5f       	subi	r24, 0xFF	; 255
     df4:	0c c0       	rjmp	.+24     	; 0xe0e <menu_config_2+0x16c>
     df6:	10 92 44 01 	sts	0x0144, r1
     dfa:	24 c0       	rjmp	.+72     	; 0xe44 <menu_config_2+0x1a2>
												else {if (LDRinv==0) LDRinv=1; else LDRinv--;}			
     dfc:	80 91 44 01 	lds	r24, 0x0144
     e00:	88 23       	and	r24, r24
     e02:	11 f4       	brne	.+4      	; 0xe08 <menu_config_2+0x166>
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	03 c0       	rjmp	.+6      	; 0xe0e <menu_config_2+0x16c>
     e08:	80 91 44 01 	lds	r24, 0x0144
     e0c:	81 50       	subi	r24, 0x01	; 1
     e0e:	80 93 44 01 	sts	0x0144, r24
     e12:	18 c0       	rjmp	.+48     	; 0xe44 <menu_config_2+0x1a2>
					break;
					}

			case 5:{ //LDRinv

					if(bit_is_set(PIND, PD4)) {if (ADCgain!=20) ADCgain++; else ADCgain=0;} 
     e14:	84 9b       	sbis	0x10, 4	; 16
     e16:	0b c0       	rjmp	.+22     	; 0xe2e <menu_config_2+0x18c>
     e18:	80 91 f7 00 	lds	r24, 0x00F7
     e1c:	84 31       	cpi	r24, 0x14	; 20
     e1e:	21 f0       	breq	.+8      	; 0xe28 <menu_config_2+0x186>
     e20:	80 91 f7 00 	lds	r24, 0x00F7
     e24:	8f 5f       	subi	r24, 0xFF	; 255
     e26:	0c c0       	rjmp	.+24     	; 0xe40 <menu_config_2+0x19e>
     e28:	10 92 f7 00 	sts	0x00F7, r1
     e2c:	0b c0       	rjmp	.+22     	; 0xe44 <menu_config_2+0x1a2>
												else {if (ADCgain==0) ADCgain=20; else ADCgain--;}			
     e2e:	80 91 f7 00 	lds	r24, 0x00F7
     e32:	88 23       	and	r24, r24
     e34:	11 f4       	brne	.+4      	; 0xe3a <menu_config_2+0x198>
     e36:	84 e1       	ldi	r24, 0x14	; 20
     e38:	03 c0       	rjmp	.+6      	; 0xe40 <menu_config_2+0x19e>
     e3a:	80 91 f7 00 	lds	r24, 0x00F7
     e3e:	81 50       	subi	r24, 0x01	; 1
     e40:	80 93 f7 00 	sts	0x00F7, r24


		//if(config_menu_page!=config_menu_page_max) config_menu_page++; else config_menu_page=0;
		//else {if(config_menu_page==0)	config_menu_page=config_menu_page_max; else config_menu_page--;}

		puslapiai_config_2();
     e44:	8c de       	rcall	.-744    	; 0xb5e <puslapiai_config_2>
		send_string(itoa((config_menu_page),buff,10));
		send_string(" nuostatas: ");
		send_string(itoa((nuostatas),buff,10));
		send_string("\n\r");
		#endif
}
     e46:	08 95       	ret

00000e48 <puslapiai_config>:
}


void puslapiai_config(){

	lcd_clrscr();
     e48:	f1 d4       	rcall	.+2530   	; 0x182c <lcd_clrscr>
	lcd_puts_p(Menu3[config_menu_page]); lcd_gotoxy(7,0); lcd_puts_p(rodykle_n);
     e4a:	e0 91 4e 01 	lds	r30, 0x014E
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	ee 0f       	add	r30, r30
     e52:	ff 1f       	adc	r31, r31
     e54:	ec 5f       	subi	r30, 0xFC	; 252
     e56:	fe 4f       	sbci	r31, 0xFE	; 254
     e58:	80 81       	ld	r24, Z
     e5a:	91 81       	ldd	r25, Z+1	; 0x01
     e5c:	0a d5       	rcall	.+2580   	; 0x1872 <lcd_puts_p>
     e5e:	87 e0       	ldi	r24, 0x07	; 7
     e60:	60 e0       	ldi	r22, 0x00	; 0
     e62:	da d4       	rcall	.+2484   	; 0x1818 <lcd_gotoxy>
     e64:	88 e2       	ldi	r24, 0x28	; 40
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	04 d5       	rcall	.+2568   	; 0x1872 <lcd_puts_p>
	
	if(config_menu_page==config_menu_page_max) lcd_puts_p(Menu3[0]); else lcd_puts_p(Menu3[config_menu_page+1]);
     e6a:	80 91 4e 01 	lds	r24, 0x014E
     e6e:	86 30       	cpi	r24, 0x06	; 6
     e70:	29 f4       	brne	.+10     	; 0xe7c <puslapiai_config+0x34>
     e72:	80 91 04 01 	lds	r24, 0x0104
     e76:	90 91 05 01 	lds	r25, 0x0105
     e7a:	09 c0       	rjmp	.+18     	; 0xe8e <puslapiai_config+0x46>
     e7c:	e0 91 4e 01 	lds	r30, 0x014E
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	ee 0f       	add	r30, r30
     e84:	ff 1f       	adc	r31, r31
     e86:	ea 5f       	subi	r30, 0xFA	; 250
     e88:	fe 4f       	sbci	r31, 0xFE	; 254
     e8a:	80 81       	ld	r24, Z
     e8c:	91 81       	ldd	r25, Z+1	; 0x01
     e8e:	f1 d4       	rcall	.+2530   	; 0x1872 <lcd_puts_p>
     e90:	08 95       	ret

00000e92 <menu_config>:
}

//config meniu (1as lygis)
void menu_config(){
	
		if(bit_is_set(PIND, PD4)) //i kuria puse sukasi rot encoderis
     e92:	84 9b       	sbis	0x10, 4	; 16
     e94:	0b c0       	rjmp	.+22     	; 0xeac <menu_config+0x1a>
		if(config_menu_page!=config_menu_page_max) config_menu_page++; else config_menu_page=0;
     e96:	80 91 4e 01 	lds	r24, 0x014E
     e9a:	86 30       	cpi	r24, 0x06	; 6
     e9c:	21 f0       	breq	.+8      	; 0xea6 <menu_config+0x14>
     e9e:	80 91 4e 01 	lds	r24, 0x014E
     ea2:	8f 5f       	subi	r24, 0xFF	; 255
     ea4:	0c c0       	rjmp	.+24     	; 0xebe <menu_config+0x2c>
     ea6:	10 92 4e 01 	sts	0x014E, r1
     eaa:	0b c0       	rjmp	.+22     	; 0xec2 <menu_config+0x30>
		else {if(config_menu_page==0)	config_menu_page=config_menu_page_max; else config_menu_page--;}
     eac:	80 91 4e 01 	lds	r24, 0x014E
     eb0:	88 23       	and	r24, r24
     eb2:	11 f4       	brne	.+4      	; 0xeb8 <menu_config+0x26>
     eb4:	86 e0       	ldi	r24, 0x06	; 6
     eb6:	03 c0       	rjmp	.+6      	; 0xebe <menu_config+0x2c>
     eb8:	80 91 4e 01 	lds	r24, 0x014E
     ebc:	81 50       	subi	r24, 0x01	; 1
     ebe:	80 93 4e 01 	sts	0x014E, r24
		
		
					


		puslapiai_config();
     ec2:	c2 df       	rcall	.-124    	; 0xe48 <puslapiai_config>
		#if debug_mode
		send_string("config_menu_page: ");
		send_string(itoa((config_menu_page),buff,10));
		send_string("\n\r");
		#endif
}
     ec4:	08 95       	ret

00000ec6 <puslapiai_2>:
}


void puslapiai_2(){

	lcd_clrscr();
     ec6:	b2 d4       	rcall	.+2404   	; 0x182c <lcd_clrscr>
	lcd_puts_p(Menu20); 
     ec8:	8c e6       	ldi	r24, 0x6C	; 108
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	d2 d4       	rcall	.+2468   	; 0x1872 <lcd_puts_p>
	lcd_puts("\n");
     ece:	80 ea       	ldi	r24, 0xA0	; 160
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	c4 d4       	rcall	.+2440   	; 0x185c <lcd_puts>
	lcd_puts_p(Menu21); 
     ed4:	8f e6       	ldi	r24, 0x6F	; 111
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	cc d4       	rcall	.+2456   	; 0x1872 <lcd_puts_p>

	if(sub_menu_page==0) {lcd_gotoxy(7,0); lcd_puts_p(rodykle); }
     eda:	80 91 4d 01 	lds	r24, 0x014D
     ede:	88 23       	and	r24, r24
     ee0:	19 f4       	brne	.+6      	; 0xee8 <puslapiai_2+0x22>
     ee2:	87 e0       	ldi	r24, 0x07	; 7
     ee4:	60 e0       	ldi	r22, 0x00	; 0
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <puslapiai_2+0x26>
	else {lcd_gotoxy(7,1); lcd_puts_p(rodykle);}
     ee8:	87 e0       	ldi	r24, 0x07	; 7
     eea:	61 e0       	ldi	r22, 0x01	; 1
     eec:	95 d4       	rcall	.+2346   	; 0x1818 <lcd_gotoxy>
     eee:	86 e2       	ldi	r24, 0x26	; 38
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	bf d4       	rcall	.+2430   	; 0x1872 <lcd_puts_p>
     ef4:	08 95       	ret

00000ef6 <menu_2>:
}

//2as meniu lygis
void menu_2(){
	
		if(bit_is_set(PIND, PD4)) //i kuria puse sukasi rot encoderis
     ef6:	84 9b       	sbis	0x10, 4	; 16
     ef8:	0b c0       	rjmp	.+22     	; 0xf10 <menu_2+0x1a>
		if(sub_menu_page!=sub_menu_page_max) sub_menu_page++; else sub_menu_page=0;
     efa:	80 91 4d 01 	lds	r24, 0x014D
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	21 f0       	breq	.+8      	; 0xf0a <menu_2+0x14>
     f02:	80 91 4d 01 	lds	r24, 0x014D
     f06:	8f 5f       	subi	r24, 0xFF	; 255
     f08:	0c c0       	rjmp	.+24     	; 0xf22 <menu_2+0x2c>
     f0a:	10 92 4d 01 	sts	0x014D, r1
     f0e:	0b c0       	rjmp	.+22     	; 0xf26 <menu_2+0x30>
		else {if(sub_menu_page==0)	sub_menu_page=sub_menu_page_max; else sub_menu_page--;}
     f10:	80 91 4d 01 	lds	r24, 0x014D
     f14:	88 23       	and	r24, r24
     f16:	11 f4       	brne	.+4      	; 0xf1c <menu_2+0x26>
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	03 c0       	rjmp	.+6      	; 0xf22 <menu_2+0x2c>
     f1c:	80 91 4d 01 	lds	r24, 0x014D
     f20:	81 50       	subi	r24, 0x01	; 1
     f22:	80 93 4d 01 	sts	0x014D, r24

		puslapiai_2();
     f26:	cf df       	rcall	.-98     	; 0xec6 <puslapiai_2>
		#if debug_mode
		send_string("sub_menu_page: ");
		send_string(itoa((sub_menu_page),buff,10));
		send_string("\n\r");
		#endif
}
     f28:	08 95       	ret

00000f2a <puslapiai>:
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------

void puslapiai(){

	lcd_clrscr();
     f2a:	80 d4       	rcall	.+2304   	; 0x182c <lcd_clrscr>
	lcd_puts_p(Menu1[menu_page]); lcd_gotoxy(7,0); lcd_puts_p(rodykle_n);
     f2c:	e0 91 4c 01 	lds	r30, 0x014C
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	ee 0f       	add	r30, r30
     f34:	ff 1f       	adc	r31, r31
     f36:	e8 50       	subi	r30, 0x08	; 8
     f38:	ff 4f       	sbci	r31, 0xFF	; 255
     f3a:	80 81       	ld	r24, Z
     f3c:	91 81       	ldd	r25, Z+1	; 0x01
     f3e:	99 d4       	rcall	.+2354   	; 0x1872 <lcd_puts_p>
     f40:	87 e0       	ldi	r24, 0x07	; 7
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	69 d4       	rcall	.+2258   	; 0x1818 <lcd_gotoxy>
     f46:	88 e2       	ldi	r24, 0x28	; 40
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	93 d4       	rcall	.+2342   	; 0x1872 <lcd_puts_p>
	
	if(menu_page==menu_page_max) lcd_puts_p(Menu1[0]); else lcd_puts_p(Menu1[menu_page+1]);
     f4c:	80 91 4c 01 	lds	r24, 0x014C
     f50:	85 30       	cpi	r24, 0x05	; 5
     f52:	29 f4       	brne	.+10     	; 0xf5e <puslapiai+0x34>
     f54:	80 91 f8 00 	lds	r24, 0x00F8
     f58:	90 91 f9 00 	lds	r25, 0x00F9
     f5c:	09 c0       	rjmp	.+18     	; 0xf70 <puslapiai+0x46>
     f5e:	e0 91 4c 01 	lds	r30, 0x014C
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	ee 0f       	add	r30, r30
     f66:	ff 1f       	adc	r31, r31
     f68:	e6 50       	subi	r30, 0x06	; 6
     f6a:	ff 4f       	sbci	r31, 0xFF	; 255
     f6c:	80 81       	ld	r24, Z
     f6e:	91 81       	ldd	r25, Z+1	; 0x01
     f70:	80 d4       	rcall	.+2304   	; 0x1872 <lcd_puts_p>
     f72:	08 95       	ret

00000f74 <menu>:

//------------------- MENIUS ISVEDIMAS I LCD ----------------------//
//pirmas meniu lygis
void menu(){
	
		if(bit_is_set(PIND, PD4)) //i kuria puse sukasi rot encoderis
     f74:	84 9b       	sbis	0x10, 4	; 16
     f76:	0b c0       	rjmp	.+22     	; 0xf8e <menu+0x1a>
		if(menu_page!=menu_page_max) menu_page++; else menu_page=0;
     f78:	80 91 4c 01 	lds	r24, 0x014C
     f7c:	85 30       	cpi	r24, 0x05	; 5
     f7e:	21 f0       	breq	.+8      	; 0xf88 <menu+0x14>
     f80:	80 91 4c 01 	lds	r24, 0x014C
     f84:	8f 5f       	subi	r24, 0xFF	; 255
     f86:	0c c0       	rjmp	.+24     	; 0xfa0 <menu+0x2c>
     f88:	10 92 4c 01 	sts	0x014C, r1
     f8c:	0b c0       	rjmp	.+22     	; 0xfa4 <menu+0x30>
		else {if(menu_page==0)	menu_page=menu_page_max; else menu_page--;}
     f8e:	80 91 4c 01 	lds	r24, 0x014C
     f92:	88 23       	and	r24, r24
     f94:	11 f4       	brne	.+4      	; 0xf9a <menu+0x26>
     f96:	85 e0       	ldi	r24, 0x05	; 5
     f98:	03 c0       	rjmp	.+6      	; 0xfa0 <menu+0x2c>
     f9a:	80 91 4c 01 	lds	r24, 0x014C
     f9e:	81 50       	subi	r24, 0x01	; 1
     fa0:	80 93 4c 01 	sts	0x014C, r24

		puslapiai();
     fa4:	c2 df       	rcall	.-124    	; 0xf2a <puslapiai>
		#if debug_mode
		send_string("menu_page: ");
		send_string(itoa((menu_page),buff,10));
		send_string("\n\r");
		#endif
}
     fa6:	08 95       	ret

00000fa8 <show_work_mode>:
void show_work_mode(){
	

	switch(work_mode){
     fa8:	80 91 4b 01 	lds	r24, 0x014B
     fac:	82 30       	cpi	r24, 0x02	; 2
     fae:	51 f1       	breq	.+84     	; 0x1004 <show_work_mode+0x5c>
     fb0:	83 30       	cpi	r24, 0x03	; 3
     fb2:	28 f4       	brcc	.+10     	; 0xfbe <show_work_mode+0x16>
     fb4:	88 23       	and	r24, r24
     fb6:	41 f0       	breq	.+16     	; 0xfc8 <show_work_mode+0x20>
     fb8:	81 30       	cpi	r24, 0x01	; 1
     fba:	d1 f5       	brne	.+116    	; 0x1030 <show_work_mode+0x88>
     fbc:	09 c0       	rjmp	.+18     	; 0xfd0 <show_work_mode+0x28>
     fbe:	83 30       	cpi	r24, 0x03	; 3
     fc0:	39 f1       	breq	.+78     	; 0x1010 <show_work_mode+0x68>
     fc2:	84 30       	cpi	r24, 0x04	; 4
     fc4:	a9 f5       	brne	.+106    	; 0x1030 <show_work_mode+0x88>
     fc6:	2b c0       	rjmp	.+86     	; 0x101e <show_work_mode+0x76>
		case 0: {lcd_clrscr();
     fc8:	31 d4       	rcall	.+2146   	; 0x182c <lcd_clrscr>
		        lcd_puts_p(Menu21); //OFF
     fca:	8f e6       	ldi	r24, 0x6F	; 111
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	25 c0       	rjmp	.+74     	; 0x101a <show_work_mode+0x72>
				break;}	

		case 1: {lcd_clrscr();
     fd0:	2d d4       	rcall	.+2138   	; 0x182c <lcd_clrscr>
				lcd_puts_p(Menu20); //ON
     fd2:	8c e6       	ldi	r24, 0x6C	; 108
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	4d d4       	rcall	.+2202   	; 0x1872 <lcd_puts_p>
				lcd_puts_p(dvitaskis_t);
     fd8:	80 e3       	ldi	r24, 0x30	; 48
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	4a d4       	rcall	.+2196   	; 0x1872 <lcd_puts_p>
		        lcd_puts(itoa(OCR2*100/255, buff, 10));
     fde:	83 b5       	in	r24, 0x23	; 35
     fe0:	94 e6       	ldi	r25, 0x64	; 100
     fe2:	89 9f       	mul	r24, r25
     fe4:	c0 01       	movw	r24, r0
     fe6:	11 24       	eor	r1, r1
     fe8:	6f ef       	ldi	r22, 0xFF	; 255
     fea:	70 e0       	ldi	r23, 0x00	; 0
     fec:	a3 d4       	rcall	.+2374   	; 0x1934 <__divmodhi4>
     fee:	cb 01       	movw	r24, r22
     ff0:	6c e5       	ldi	r22, 0x5C	; 92
     ff2:	71 e0       	ldi	r23, 0x01	; 1
     ff4:	4a e0       	ldi	r20, 0x0A	; 10
     ff6:	50 e0       	ldi	r21, 0x00	; 0
     ff8:	b0 d4       	rcall	.+2400   	; 0x195a <itoa>
     ffa:	30 d4       	rcall	.+2144   	; 0x185c <lcd_puts>
				lcd_puts("%");
     ffc:	82 ea       	ldi	r24, 0xA2	; 162
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	2d d4       	rcall	.+2138   	; 0x185c <lcd_puts>
    1002:	08 95       	ret
		      	break;}	

		case 2: {lcd_clrscr();
    1004:	13 d4       	rcall	.+2086   	; 0x182c <lcd_clrscr>
		        lcd_puts_p(Menu1[1]); //PIR/LDR
    1006:	80 91 fa 00 	lds	r24, 0x00FA
    100a:	90 91 fb 00 	lds	r25, 0x00FB
    100e:	05 c0       	rjmp	.+10     	; 0x101a <show_work_mode+0x72>
			//	lcd_puts("");
				break;}	

		case 3: {lcd_clrscr();
    1010:	0d d4       	rcall	.+2074   	; 0x182c <lcd_clrscr>
		        lcd_puts_p(Menu1[2]); //PIR
    1012:	80 91 fc 00 	lds	r24, 0x00FC
    1016:	90 91 fd 00 	lds	r25, 0x00FD
    101a:	2b d4       	rcall	.+2134   	; 0x1872 <lcd_puts_p>
    101c:	08 95       	ret
				break;}	

		case 4:	{lcd_clrscr();
    101e:	06 d4       	rcall	.+2060   	; 0x182c <lcd_clrscr>
		        lcd_puts_p(Menu1[3]); //LDR				
    1020:	80 91 fe 00 	lds	r24, 0x00FE
    1024:	90 91 ff 00 	lds	r25, 0x00FF
    1028:	24 d4       	rcall	.+2120   	; 0x1872 <lcd_puts_p>
				lcd_puts_p(dvitaskis_t);
    102a:	80 e3       	ldi	r24, 0x30	; 48
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	21 d4       	rcall	.+2114   	; 0x1872 <lcd_puts_p>
    1030:	08 95       	ret

00001032 <__vector_6>:

//ADCSRA |= _BV(ADSC);
}
*/

ISR(TIMER1_COMPA_vect){
    1032:	1f 92       	push	r1
    1034:	0f 92       	push	r0
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	0f 92       	push	r0
    103a:	11 24       	eor	r1, r1
    103c:	2f 93       	push	r18
    103e:	3f 93       	push	r19
    1040:	4f 93       	push	r20
    1042:	5f 93       	push	r21
    1044:	6f 93       	push	r22
    1046:	7f 93       	push	r23
    1048:	8f 93       	push	r24
    104a:	9f 93       	push	r25
    104c:	af 93       	push	r26
    104e:	bf 93       	push	r27
    1050:	ef 93       	push	r30
    1052:	ff 93       	push	r31

   clock_millisecond++;
    1054:	80 91 50 01 	lds	r24, 0x0150
    1058:	90 91 51 01 	lds	r25, 0x0151
    105c:	01 96       	adiw	r24, 0x01	; 1
    105e:	90 93 51 01 	sts	0x0151, r25
    1062:	80 93 50 01 	sts	0x0150, r24
	
	if (clock_millisecond==100)
    1066:	80 91 50 01 	lds	r24, 0x0150
    106a:	90 91 51 01 	lds	r25, 0x0151
    106e:	84 36       	cpi	r24, 0x64	; 100
    1070:	91 05       	cpc	r25, r1
    1072:	69 f4       	brne	.+26     	; 0x108e <__vector_6+0x5c>
   {
	timer++; //sekundziu skaiciavimui
    1074:	80 91 53 01 	lds	r24, 0x0153
    1078:	8f 5f       	subi	r24, 0xFF	; 255
    107a:	80 93 53 01 	sts	0x0153, r24
	clock_millisecond=0;
    107e:	10 92 51 01 	sts	0x0151, r1
    1082:	10 92 50 01 	sts	0x0150, r1
	PORTDDR(LED_PORT)^= (1<<LED1_BIT);
    1086:	81 b3       	in	r24, 0x11	; 17
    1088:	90 e2       	ldi	r25, 0x20	; 32
    108a:	89 27       	eor	r24, r25
    108c:	81 bb       	out	0x11, r24	; 17
   }


   if(timer==10)
    108e:	80 91 53 01 	lds	r24, 0x0153
    1092:	8a 30       	cpi	r24, 0x0A	; 10
    1094:	09 f0       	breq	.+2      	; 0x1098 <__vector_6+0x66>
    1096:	76 c0       	rjmp	.+236    	; 0x1184 <__vector_6+0x152>
   {
      clock_second++;
    1098:	80 91 52 01 	lds	r24, 0x0152
    109c:	8f 5f       	subi	r24, 0xFF	; 255
    109e:	80 93 52 01 	sts	0x0152, r24
      timer=0;
    10a2:	10 92 53 01 	sts	0x0153, r1

	
	if(lcd_light==1){ 
    10a6:	80 91 47 01 	lds	r24, 0x0147
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	39 f4       	brne	.+14     	; 0x10bc <__vector_6+0x8a>
	//LCD pasvietimo timeoutas, t. y. viena karta paspaudus rot encoderi, 
	//esant show_work_mode, ijungiamas LCD pasvietimas ir po LCD LIGHT_TIMEOUT sekundziu yra isjungiamas.
	
		if (clock_second==LCD_LIGHT_TIMEOUT) { 
    10ae:	80 91 52 01 	lds	r24, 0x0152
    10b2:	84 30       	cpi	r24, 0x04	; 4
    10b4:	19 f4       	brne	.+6      	; 0x10bc <__vector_6+0x8a>
				lcd_light=0;
    10b6:	10 92 47 01 	sts	0x0147, r1
			//	clock_second=0;
			//	clock_millisecond=0;
				LCD_LED_PORT &= ~_BV(LCD_LED_BIT); //isjungiam LCD pasvietima			
    10ba:	ac 98       	cbi	0x15, 4	; 21
				}
	}


	//PIR timeOUT
	if((work_mode == 2 || work_mode==3) && PIR==1){
    10bc:	80 91 4b 01 	lds	r24, 0x014B
    10c0:	82 30       	cpi	r24, 0x02	; 2
    10c2:	29 f0       	breq	.+10     	; 0x10ce <__vector_6+0x9c>
    10c4:	80 91 4b 01 	lds	r24, 0x014B
    10c8:	83 30       	cpi	r24, 0x03	; 3
    10ca:	09 f0       	breq	.+2      	; 0x10ce <__vector_6+0x9c>
    10cc:	5b c0       	rjmp	.+182    	; 0x1184 <__vector_6+0x152>
    10ce:	80 91 59 01 	lds	r24, 0x0159
    10d2:	81 30       	cpi	r24, 0x01	; 1
    10d4:	09 f0       	breq	.+2      	; 0x10d8 <__vector_6+0xa6>
    10d6:	56 c0       	rjmp	.+172    	; 0x1184 <__vector_6+0x152>

	
	if(meniu==0 && config==0){
    10d8:	80 91 48 01 	lds	r24, 0x0148
    10dc:	88 23       	and	r24, r24
    10de:	09 f0       	breq	.+2      	; 0x10e2 <__vector_6+0xb0>
    10e0:	45 c0       	rjmp	.+138    	; 0x116c <__vector_6+0x13a>
    10e2:	80 91 49 01 	lds	r24, 0x0149
    10e6:	88 23       	and	r24, r24
    10e8:	09 f0       	breq	.+2      	; 0x10ec <__vector_6+0xba>
    10ea:	40 c0       	rjmp	.+128    	; 0x116c <__vector_6+0x13a>
		 
			show_work_mode(); //PIR arba PIR/LDR
    10ec:	5d df       	rcall	.-326    	; 0xfa8 <show_work_mode>

			if(work_mode==2){ //tik PIR/LDR darbo rezimui
    10ee:	80 91 4b 01 	lds	r24, 0x014B
    10f2:	82 30       	cpi	r24, 0x02	; 2
    10f4:	59 f4       	brne	.+22     	; 0x110c <__vector_6+0xda>
			lcd_gotoxy(0,1);
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	61 e0       	ldi	r22, 0x01	; 1
    10fa:	8e d3       	rcall	.+1820   	; 0x1818 <lcd_gotoxy>
			lcd_puts_p(Menu1[2]);
    10fc:	80 91 fc 00 	lds	r24, 0x00FC
    1100:	90 91 fd 00 	lds	r25, 0x00FD
    1104:	b6 d3       	rcall	.+1900   	; 0x1872 <lcd_puts_p>
			lcd_puts_p(dvitaskis_t);
    1106:	80 e3       	ldi	r24, 0x30	; 48
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	b3 d3       	rcall	.+1894   	; 0x1872 <lcd_puts_p>
			}

			if(work_mode==3){ 	if(timeOUT-clock_second<=9) lcd_gotoxy(5,0); else  lcd_gotoxy(4,0); } 	//PIR
    110c:	80 91 4b 01 	lds	r24, 0x014B
    1110:	83 30       	cpi	r24, 0x03	; 3
    1112:	71 f4       	brne	.+28     	; 0x1130 <__vector_6+0xfe>
    1114:	80 91 42 01 	lds	r24, 0x0142
    1118:	20 91 52 01 	lds	r18, 0x0152
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	82 1b       	sub	r24, r18
    1120:	91 09       	sbc	r25, r1
    1122:	0a 97       	sbiw	r24, 0x0a	; 10
    1124:	14 f4       	brge	.+4      	; 0x112a <__vector_6+0xf8>
    1126:	85 e0       	ldi	r24, 0x05	; 5
    1128:	01 c0       	rjmp	.+2      	; 0x112c <__vector_6+0xfa>
    112a:	84 e0       	ldi	r24, 0x04	; 4
    112c:	60 e0       	ldi	r22, 0x00	; 0
    112e:	0d c0       	rjmp	.+26     	; 0x114a <__vector_6+0x118>
			else {					
								if(timeOUT-clock_second<=9) lcd_gotoxy(5,1); else  lcd_gotoxy(4,1); 	//PIR/LDR
    1130:	80 91 42 01 	lds	r24, 0x0142
    1134:	20 91 52 01 	lds	r18, 0x0152
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	82 1b       	sub	r24, r18
    113c:	91 09       	sbc	r25, r1
    113e:	0a 97       	sbiw	r24, 0x0a	; 10
    1140:	14 f4       	brge	.+4      	; 0x1146 <__vector_6+0x114>
    1142:	85 e0       	ldi	r24, 0x05	; 5
    1144:	01 c0       	rjmp	.+2      	; 0x1148 <__vector_6+0x116>
    1146:	84 e0       	ldi	r24, 0x04	; 4
    1148:	61 e0       	ldi	r22, 0x01	; 1
    114a:	66 d3       	rcall	.+1740   	; 0x1818 <lcd_gotoxy>
				 }
			lcd_puts(itoa(timeOUT-clock_second, buff, 10)); 
    114c:	80 91 42 01 	lds	r24, 0x0142
    1150:	20 91 52 01 	lds	r18, 0x0152
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	82 1b       	sub	r24, r18
    1158:	91 09       	sbc	r25, r1
    115a:	6c e5       	ldi	r22, 0x5C	; 92
    115c:	71 e0       	ldi	r23, 0x01	; 1
    115e:	4a e0       	ldi	r20, 0x0A	; 10
    1160:	50 e0       	ldi	r21, 0x00	; 0
    1162:	fb d3       	rcall	.+2038   	; 0x195a <itoa>
    1164:	7b d3       	rcall	.+1782   	; 0x185c <lcd_puts>
			lcd_puts_p(sekunde);
    1166:	88 e3       	ldi	r24, 0x38	; 56
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	83 d3       	rcall	.+1798   	; 0x1872 <lcd_puts_p>
		
	}
	//lcd_puts(" ");
		
		
		if (clock_second==timeOUT) { 
    116c:	90 91 52 01 	lds	r25, 0x0152
    1170:	80 91 42 01 	lds	r24, 0x0142
    1174:	98 17       	cp	r25, r24
    1176:	31 f4       	brne	.+12     	; 0x1184 <__vector_6+0x152>
			clock_second=0; 
    1178:	10 92 52 01 	sts	0x0152, r1
		//	GICR|=_BV(INT0); //ijungiam PIR pertraukti	
		//	stop_timer1();
			PIR=0;
    117c:	10 92 59 01 	sts	0x0159, r1
			show_work_mode();
    1180:	13 df       	rcall	.-474    	; 0xfa8 <show_work_mode>
			fade_out();	 
    1182:	63 d9       	rcall	.-3386   	; 0x44a <fade_out>
timer_temp=timer;
send_string("\n\r");
send_string(itoa((timer),buff,10));
}
*/	
}
    1184:	ff 91       	pop	r31
    1186:	ef 91       	pop	r30
    1188:	bf 91       	pop	r27
    118a:	af 91       	pop	r26
    118c:	9f 91       	pop	r25
    118e:	8f 91       	pop	r24
    1190:	7f 91       	pop	r23
    1192:	6f 91       	pop	r22
    1194:	5f 91       	pop	r21
    1196:	4f 91       	pop	r20
    1198:	3f 91       	pop	r19
    119a:	2f 91       	pop	r18
    119c:	0f 90       	pop	r0
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	0f 90       	pop	r0
    11a2:	1f 90       	pop	r1
    11a4:	18 95       	reti

000011a6 <__vector_2>:
}



//Rotary Encoder 
ISR(INT1_vect){
    11a6:	1f 92       	push	r1
    11a8:	0f 92       	push	r0
    11aa:	0f b6       	in	r0, 0x3f	; 63
    11ac:	0f 92       	push	r0
    11ae:	11 24       	eor	r1, r1
    11b0:	2f 93       	push	r18
    11b2:	3f 93       	push	r19
    11b4:	4f 93       	push	r20
    11b6:	5f 93       	push	r21
    11b8:	6f 93       	push	r22
    11ba:	7f 93       	push	r23
    11bc:	8f 93       	push	r24
    11be:	9f 93       	push	r25
    11c0:	af 93       	push	r26
    11c2:	bf 93       	push	r27
    11c4:	ef 93       	push	r30
    11c6:	ff 93       	push	r31


if(meniu==1 && config ==0) menu();
    11c8:	80 91 48 01 	lds	r24, 0x0148
    11cc:	81 30       	cpi	r24, 0x01	; 1
    11ce:	31 f4       	brne	.+12     	; 0x11dc <__vector_2+0x36>
    11d0:	80 91 49 01 	lds	r24, 0x0149
    11d4:	88 23       	and	r24, r24
    11d6:	11 f4       	brne	.+4      	; 0x11dc <__vector_2+0x36>
    11d8:	cd de       	rcall	.-614    	; 0xf74 <menu>
    11da:	a4 c0       	rjmp	.+328    	; 0x1324 <__vector_2+0x17e>

else if (meniu==0 && config==0 && work_mode==1){
    11dc:	80 91 48 01 	lds	r24, 0x0148
    11e0:	88 23       	and	r24, r24
    11e2:	09 f0       	breq	.+2      	; 0x11e6 <__vector_2+0x40>
    11e4:	4b c0       	rjmp	.+150    	; 0x127c <__vector_2+0xd6>
    11e6:	80 91 49 01 	lds	r24, 0x0149
    11ea:	88 23       	and	r24, r24
    11ec:	09 f0       	breq	.+2      	; 0x11f0 <__vector_2+0x4a>
    11ee:	46 c0       	rjmp	.+140    	; 0x127c <__vector_2+0xd6>
    11f0:	80 91 4b 01 	lds	r24, 0x014B
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	09 f0       	breq	.+2      	; 0x11fa <__vector_2+0x54>
    11f8:	41 c0       	rjmp	.+130    	; 0x127c <__vector_2+0xd6>
	//trumpam ijungiam LCD pasvietima	
	clock_second=0;
    11fa:	10 92 52 01 	sts	0x0152, r1
	clock_millisecond=0;
    11fe:	10 92 51 01 	sts	0x0151, r1
    1202:	10 92 50 01 	sts	0x0150, r1
	lcd_light=1;
    1206:	80 93 47 01 	sts	0x0147, r24
	LCD_LED_PORT |= _BV(LCD_LED_BIT); 	
    120a:	ac 9a       	sbi	0x15, 4	; 21

	//--------PWM nustatymai ------------ 
	//buvo {OCR2=OCR2+0x05;} else {OCR2=OCR2-0x05;}
	nuostatas=nuostato_radimas(OCR2); 
    120c:	23 b5       	in	r18, 0x23	; 35
    120e:	e2 e1       	ldi	r30, 0x12	; 18
    1210:	f1 e0       	ldi	r31, 0x01	; 1
    1212:	90 e0       	ldi	r25, 0x00	; 0

unsigned char nuostato_radimas(char nustatymas){
char eilnr;
for(unsigned char i=0;i<=46;i++){ //randam atitikmeni masyve

	 if (fadein[i]>=nustatymas) {
    1214:	80 81       	ld	r24, Z
    1216:	82 17       	cp	r24, r18
    1218:	28 f4       	brcc	.+10     	; 0x1224 <__vector_2+0x7e>
}


unsigned char nuostato_radimas(char nustatymas){
char eilnr;
for(unsigned char i=0;i<=46;i++){ //randam atitikmeni masyve
    121a:	9f 5f       	subi	r25, 0xFF	; 255
    121c:	31 96       	adiw	r30, 0x01	; 1
    121e:	9f 32       	cpi	r25, 0x2F	; 47
    1220:	c9 f7       	brne	.-14     	; 0x1214 <__vector_2+0x6e>
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	90 93 46 01 	sts	0x0146, r25
	if(bit_is_set(PIND, PD4)) {if (nuostatas!=(sizeof(fadein)/sizeof(fadein[0])-1))
    1228:	84 9b       	sbis	0x10, 4	; 16
    122a:	0b c0       	rjmp	.+22     	; 0x1242 <__vector_2+0x9c>
    122c:	80 91 46 01 	lds	r24, 0x0146
    1230:	8d 32       	cpi	r24, 0x2D	; 45
    1232:	21 f0       	breq	.+8      	; 0x123c <__vector_2+0x96>
												nuostatas++; else nuostatas=0;} 												
    1234:	80 91 46 01 	lds	r24, 0x0146
    1238:	8f 5f       	subi	r24, 0xFF	; 255
    123a:	0c c0       	rjmp	.+24     	; 0x1254 <__vector_2+0xae>
    123c:	10 92 46 01 	sts	0x0146, r1
    1240:	0b c0       	rjmp	.+22     	; 0x1258 <__vector_2+0xb2>
	else {if(nuostatas==0) nuostatas=(sizeof(fadein)/sizeof(fadein[0])-1); else nuostatas--;}		
    1242:	80 91 46 01 	lds	r24, 0x0146
    1246:	88 23       	and	r24, r24
    1248:	11 f4       	brne	.+4      	; 0x124e <__vector_2+0xa8>
    124a:	8d e2       	ldi	r24, 0x2D	; 45
    124c:	03 c0       	rjmp	.+6      	; 0x1254 <__vector_2+0xae>
    124e:	80 91 46 01 	lds	r24, 0x0146
    1252:	81 50       	subi	r24, 0x01	; 1
    1254:	80 93 46 01 	sts	0x0146, r24
											
//	OCR2=fadein[nuostatas];					
	timer2_set(fadein[nuostatas]);
    1258:	e0 91 46 01 	lds	r30, 0x0146
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	ee 5e       	subi	r30, 0xEE	; 238
    1260:	fe 4f       	sbci	r31, 0xFE	; 254
    1262:	80 81       	ld	r24, Z
    1264:	8a d7       	rcall	.+3860   	; 0x217a <__data_load_end+0x6de>

	show_work_mode(work_mode);
    1266:	80 91 4b 01 	lds	r24, 0x014B
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	9d de       	rcall	.-710    	; 0xfa8 <show_work_mode>
	EEPROM_write(24, OCR2);
    126e:	43 b5       	in	r20, 0x23	; 35
    1270:	50 e0       	ldi	r21, 0x00	; 0
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	70 e0       	ldi	r23, 0x00	; 0
    1276:	88 e1       	ldi	r24, 0x18	; 24
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	35 c0       	rjmp	.+106    	; 0x12e6 <__vector_2+0x140>
	send_string(itoa(EEPROM_read(24), buff, 10));
	send_string("\n\r");
	#endif
}

else if (meniu==0 && config==0 && work_mode==4){
    127c:	80 91 48 01 	lds	r24, 0x0148
    1280:	88 23       	and	r24, r24
    1282:	99 f5       	brne	.+102    	; 0x12ea <__vector_2+0x144>
    1284:	80 91 49 01 	lds	r24, 0x0149
    1288:	88 23       	and	r24, r24
    128a:	79 f5       	brne	.+94     	; 0x12ea <__vector_2+0x144>
    128c:	80 91 4b 01 	lds	r24, 0x014B
    1290:	84 30       	cpi	r24, 0x04	; 4
    1292:	59 f5       	brne	.+86     	; 0x12ea <__vector_2+0x144>
	//trumpam ijungiam LCD pasvietima	
	clock_second=0;
    1294:	10 92 52 01 	sts	0x0152, r1
	clock_millisecond=0;
    1298:	10 92 51 01 	sts	0x0151, r1
    129c:	10 92 50 01 	sts	0x0150, r1
	lcd_light=1;
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	80 93 47 01 	sts	0x0147, r24
	LCD_LED_PORT |= _BV(LCD_LED_BIT); 
    12a6:	ac 9a       	sbi	0x15, 4	; 21


	//--------- LDR->PWM konvertavimo koeficineto (LDRkoef) nustatymas -----
	if(bit_is_set(PIND, PD4)) 
    12a8:	84 9b       	sbis	0x10, 4	; 16
    12aa:	0b c0       	rjmp	.+22     	; 0x12c2 <__vector_2+0x11c>
		{if (LDRkoef!=25) LDRkoef++; else LDRkoef=0;} 
    12ac:	80 91 45 01 	lds	r24, 0x0145
    12b0:	89 31       	cpi	r24, 0x19	; 25
    12b2:	21 f0       	breq	.+8      	; 0x12bc <__vector_2+0x116>
    12b4:	80 91 45 01 	lds	r24, 0x0145
    12b8:	8f 5f       	subi	r24, 0xFF	; 255
    12ba:	0c c0       	rjmp	.+24     	; 0x12d4 <__vector_2+0x12e>
    12bc:	10 92 45 01 	sts	0x0145, r1
    12c0:	0b c0       	rjmp	.+22     	; 0x12d8 <__vector_2+0x132>
	else {if (LDRkoef==0) LDRkoef=25; else LDRkoef--;}
    12c2:	80 91 45 01 	lds	r24, 0x0145
    12c6:	88 23       	and	r24, r24
    12c8:	11 f4       	brne	.+4      	; 0x12ce <__vector_2+0x128>
    12ca:	89 e1       	ldi	r24, 0x19	; 25
    12cc:	03 c0       	rjmp	.+6      	; 0x12d4 <__vector_2+0x12e>
    12ce:	80 91 45 01 	lds	r24, 0x0145
    12d2:	81 50       	subi	r24, 0x01	; 1
    12d4:	80 93 45 01 	sts	0x0145, r24

	EEPROM_write(35, LDRkoef);
    12d8:	40 91 45 01 	lds	r20, 0x0145
    12dc:	50 e0       	ldi	r21, 0x00	; 0
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	70 e0       	ldi	r23, 0x00	; 0
    12e2:	83 e2       	ldi	r24, 0x23	; 35
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	58 d7       	rcall	.+3760   	; 0x2198 <__data_load_end+0x6fc>
    12e8:	1d c0       	rjmp	.+58     	; 0x1324 <__vector_2+0x17e>
	send_string(itoa(LDRkoef, buff, 10));
	send_string("\n\r");
	#endif
	}

else if (meniu==2 && config ==0) { menu_2(); }
    12ea:	80 91 48 01 	lds	r24, 0x0148
    12ee:	82 30       	cpi	r24, 0x02	; 2
    12f0:	31 f4       	brne	.+12     	; 0x12fe <__vector_2+0x158>
    12f2:	80 91 49 01 	lds	r24, 0x0149
    12f6:	88 23       	and	r24, r24
    12f8:	11 f4       	brne	.+4      	; 0x12fe <__vector_2+0x158>
    12fa:	fd dd       	rcall	.-1030   	; 0xef6 <menu_2>
    12fc:	13 c0       	rjmp	.+38     	; 0x1324 <__vector_2+0x17e>
else if (meniu==3 && config ==1) { menu_config(); }
    12fe:	80 91 48 01 	lds	r24, 0x0148
    1302:	83 30       	cpi	r24, 0x03	; 3
    1304:	31 f4       	brne	.+12     	; 0x1312 <__vector_2+0x16c>
    1306:	80 91 49 01 	lds	r24, 0x0149
    130a:	81 30       	cpi	r24, 0x01	; 1
    130c:	11 f4       	brne	.+4      	; 0x1312 <__vector_2+0x16c>
    130e:	c1 dd       	rcall	.-1150   	; 0xe92 <menu_config>
    1310:	09 c0       	rjmp	.+18     	; 0x1324 <__vector_2+0x17e>
else if (meniu==3 && config ==2) { menu_config_2(); }
    1312:	80 91 48 01 	lds	r24, 0x0148
    1316:	83 30       	cpi	r24, 0x03	; 3
    1318:	29 f4       	brne	.+10     	; 0x1324 <__vector_2+0x17e>
    131a:	80 91 49 01 	lds	r24, 0x0149
    131e:	82 30       	cpi	r24, 0x02	; 2
    1320:	09 f4       	brne	.+2      	; 0x1324 <__vector_2+0x17e>
    1322:	bf dc       	rcall	.-1666   	; 0xca2 <menu_config_2>

}
    1324:	ff 91       	pop	r31
    1326:	ef 91       	pop	r30
    1328:	bf 91       	pop	r27
    132a:	af 91       	pop	r26
    132c:	9f 91       	pop	r25
    132e:	8f 91       	pop	r24
    1330:	7f 91       	pop	r23
    1332:	6f 91       	pop	r22
    1334:	5f 91       	pop	r21
    1336:	4f 91       	pop	r20
    1338:	3f 91       	pop	r19
    133a:	2f 91       	pop	r18
    133c:	0f 90       	pop	r0
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	0f 90       	pop	r0
    1342:	1f 90       	pop	r1
    1344:	18 95       	reti

00001346 <apie>:
void apie(){


	/* per USART */
	send_string("\033[2J"); //isvalo terminalo langa
    1346:	84 ea       	ldi	r24, 0xA4	; 164
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	d2 d6       	rcall	.+3492   	; 0x20f0 <__data_load_end+0x654>
	send_string("\033[0;0H"); //pastato kursoriu i 0,0
    134c:	89 ea       	ldi	r24, 0xA9	; 169
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	cf d6       	rcall	.+3486   	; 0x20f0 <__data_load_end+0x654>

	send_string("\n\r");
    1352:	80 eb       	ldi	r24, 0xB0	; 176
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	cc d6       	rcall	.+3480   	; 0x20f0 <__data_load_end+0x654>
	send_string("LED Dimmer V1.0 \n\r");
    1358:	83 eb       	ldi	r24, 0xB3	; 179
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	c9 d6       	rcall	.+3474   	; 0x20f0 <__data_load_end+0x654>
	send_string("Paulius Bautrenas 2014");
    135e:	86 ec       	ldi	r24, 0xC6	; 198
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	c6 d6       	rcall	.+3468   	; 0x20f0 <__data_load_end+0x654>
	send_string("\n\r");
    1364:	80 eb       	ldi	r24, 0xB0	; 176
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	c3 d6       	rcall	.+3462   	; 0x20f0 <__data_load_end+0x654>
	send_string("\n\r");
    136a:	80 eb       	ldi	r24, 0xB0	; 176
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	c0 d6       	rcall	.+3456   	; 0x20f0 <__data_load_end+0x654>



		/* clear display and home cursor */

        lcd_clrscr();
    1370:	5d d2       	rcall	.+1210   	; 0x182c <lcd_clrscr>
        
		lcd_puts("Paulius\n");
    1372:	8d ed       	ldi	r24, 0xDD	; 221
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	72 d2       	rcall	.+1252   	; 0x185c <lcd_puts>
		lcd_puts("Bau");
    1378:	86 ee       	ldi	r24, 0xE6	; 230
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	6f d2       	rcall	.+1246   	; 0x185c <lcd_puts>
    137e:	88 e8       	ldi	r24, 0x88	; 136
    1380:	93 e1       	ldi	r25, 0x13	; 19
    1382:	28 ec       	ldi	r18, 0xC8	; 200
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	f9 01       	movw	r30, r18
    1388:	31 97       	sbiw	r30, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <apie+0x42>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    138c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    138e:	d9 f7       	brne	.-10     	; 0x1386 <apie+0x40>
		_delay_ms(500);
        
		lcd_clrscr();
    1390:	4d d2       	rcall	.+1178   	; 0x182c <lcd_clrscr>
        lcd_puts("LedDmr\n");
    1392:	8a ee       	ldi	r24, 0xEA	; 234
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	62 d2       	rcall	.+1220   	; 0x185c <lcd_puts>
        lcd_puts("v1.0");
    1398:	82 ef       	ldi	r24, 0xF2	; 242
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	5f d2       	rcall	.+1214   	; 0x185c <lcd_puts>
    139e:	88 e8       	ldi	r24, 0x88	; 136
    13a0:	93 e1       	ldi	r25, 0x13	; 19
    13a2:	28 ec       	ldi	r18, 0xC8	; 200
    13a4:	30 e0       	ldi	r19, 0x00	; 0
    13a6:	f9 01       	movw	r30, r18
    13a8:	31 97       	sbiw	r30, 0x01	; 1
    13aa:	f1 f7       	brne	.-4      	; 0x13a8 <apie+0x62>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ac:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ae:	d9 f7       	brne	.-10     	; 0x13a6 <apie+0x60>
		_delay_ms(500);

	


}
    13b0:	08 95       	ret

000013b2 <main>:


} //End of ISR


int main(){
    13b2:	cf 92       	push	r12
    13b4:	df 92       	push	r13
    13b6:	ef 92       	push	r14
    13b8:	ff 92       	push	r15
    13ba:	0f 93       	push	r16
    13bc:	1f 93       	push	r17
    13be:	cf 93       	push	r28
    13c0:	df 93       	push	r29

	first_time_boot(); //first time boot parameters
    13c2:	f9 d6       	rcall	.+3570   	; 0x21b6 <__data_load_end+0x71a>
	read_config(); //nuskaitom config is eeprom	
    13c4:	67 d7       	rcall	.+3790   	; 0x2294 <__data_load_end+0x7f8>
	
	
	//------------- I/O nustatymai ------------------
	
	//LED
	PORTDDR(LED_PORT) |= _BV(LED1_BIT); 
    13c6:	8d 9a       	sbi	0x11, 5	; 17
	LED_PORT &= ~_BV(LED1_BIT); 
    13c8:	95 98       	cbi	0x12, 5	; 18
	PORTDDR(LED_PORT) |= _BV(LED2_BIT); 
    13ca:	8e 9a       	sbi	0x11, 6	; 17
	LED_PORT &= ~_BV(LED2_BIT); 
    13cc:	96 98       	cbi	0x12, 6	; 18
	PORTDDR(LED_PORT) |= _BV(LED3_BIT); 
    13ce:	8f 9a       	sbi	0x11, 7	; 17
	LED_PORT &= ~_BV(LED3_BIT); 
    13d0:	97 98       	cbi	0x12, 7	; 18

	PORTDDR(LCD_LED_PORT) |= _BV(LCD_LED_BIT); //LCD pasvietimas
    13d2:	a4 9a       	sbi	0x14, 4	; 20
	LCD_LED_PORT |= _BV(LCD_LED_BIT); //ijungiam LCD pasvietimas
    13d4:	ac 9a       	sbi	0x15, 4	; 21

	//USART
	DDRD|=_BV(PD1); //TX
    13d6:	89 9a       	sbi	0x11, 1	; 17
	PORTD|=_BV(PD1);
    13d8:	91 9a       	sbi	0x12, 1	; 18
	DDRD&=~_BV(PD0); //RX
    13da:	88 98       	cbi	0x11, 0	; 17

	//ROT ENCODER
	DDRD&=~_BV(PD3); //INT1 
    13dc:	8b 98       	cbi	0x11, 3	; 17
	PORTD|=_BV(PD3);
    13de:	93 9a       	sbi	0x12, 3	; 18
	DDRD&=~_BV(PD4); 
    13e0:	8c 98       	cbi	0x11, 4	; 17
	PORTD|=_BV(PD4);
    13e2:	94 9a       	sbi	0x12, 4	; 18
	//ROT ENCODER BUTTON
	DDRB&=~_BV(PB6); 
    13e4:	be 98       	cbi	0x17, 6	; 23
	PORTB|=_BV(PB6);
    13e6:	c6 9a       	sbi	0x18, 6	; 24


	//PIR
	DDRD&=~_BV(PD2); //INT0
    13e8:	8a 98       	cbi	0x11, 2	; 17
//	PORTD|=_BV(PD2);

	//PWM OUT
	DDRB|=_BV(PB3); 
    13ea:	bb 9a       	sbi	0x17, 3	; 23

void init_uart(unsigned int ubrr) {
	/* Set baud rate */
	UBRRH = (unsigned char)(ubrr>>8 ) ;
    13ec:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char)(ubrr);
    13ee:	83 e3       	ldi	r24, 0x33	; 51
    13f0:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
//	UCSRB |= (1<<RXEN);
	UCSRB |= (1<<TXEN);
    13f2:	53 9a       	sbi	0x0a, 3	; 10
	/* Set frame format: 8data, 1stop bit */
	UCSRC = (1<<URSEL)|(3<<UCSZ0); //|(1<<USBS)
    13f4:	86 e8       	ldi	r24, 0x86	; 134
    13f6:	80 bd       	out	0x20, r24	; 32
 
	//----------------- initai -----------------------------

	init_uart(UBRR_VAL);
	lcd_init(LCD_DISP_ON);
    13f8:	8c e0       	ldi	r24, 0x0C	; 12
    13fa:	48 d2       	rcall	.+1168   	; 0x188c <lcd_init>
	INT_init();
    13fc:	88 d6       	rcall	.+3344   	; 0x210e <__data_load_end+0x672>
	ADC_init();
    13fe:	94 d6       	rcall	.+3368   	; 0x2128 <__data_load_end+0x68c>

}

void timer_init_0()
{
	TIFR |= (1<<TOV0);		//set interrupt on overflow
    1400:	88 b7       	in	r24, 0x38	; 56
    1402:	81 60       	ori	r24, 0x01	; 1
    1404:	88 bf       	out	0x38, r24	; 56
	TIMSK |= (1<<TOIE0);
    1406:	89 b7       	in	r24, 0x39	; 57
    1408:	81 60       	ori	r24, 0x01	; 1
    140a:	89 bf       	out	0x39, r24	; 57
	TCNT0 = 223;
    140c:	8f ed       	ldi	r24, 0xDF	; 223
    140e:	82 bf       	out	0x32, r24	; 50
}


void timer_init_1(){ //count down timer
 
      TCCR1B=(1<<WGM12)|(1<<CS11)|(1<<CS10);
    1410:	8b e0       	ldi	r24, 0x0B	; 11
    1412:	8e bd       	out	0x2e, r24	; 46
      OCR1A=0x007C;
    1414:	8c e7       	ldi	r24, 0x7C	; 124
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	9b bd       	out	0x2b, r25	; 43
    141a:	8a bd       	out	0x2a, r24	; 42
}

void start_timer0()	{TCCR0 |= (1<<CS00)|(1<<CS02); }
void stop_timer0()	{TCCR0 =0x00;}

void start_timer1() {TIMSK |=(_BV(OCIE1A));}
    141c:	89 b7       	in	r24, 0x39	; 57
    141e:	80 61       	ori	r24, 0x10	; 16
    1420:	89 bf       	out	0x39, r24	; 57

	start_timer1();
//	TIMSK |=(_BV(OCIE1A)); //iddle timmer on


	apie();	
    1422:	91 df       	rcall	.-222    	; 0x1346 <apie>
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEWE))
    1424:	e1 99       	sbic	0x1c, 1	; 28
    1426:	fe cf       	rjmp	.-4      	; 0x1424 <main+0x72>
;
/* Set up address register */
EEAR = uiAddress;
    1428:	89 e1       	ldi	r24, 0x19	; 25
    142a:	90 e0       	ldi	r25, 0x00	; 0
    142c:	9f bb       	out	0x1f, r25	; 31
    142e:	8e bb       	out	0x1e, r24	; 30
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
    1430:	e0 9a       	sbi	0x1c, 0	; 28
/* Return data from data register */
return EEDR;
    1432:	8d b3       	in	r24, 0x1d	; 29




	
	work_mode=EEPROM_read(25);
    1434:	80 93 4b 01 	sts	0x014B, r24
	wmode(work_mode);
    1438:	80 91 4b 01 	lds	r24, 0x014B
    143c:	36 d9       	rcall	.-3476   	; 0x6aa <wmode>
	
	show_work_mode();
    143e:	b4 dd       	rcall	.-1176   	; 0xfa8 <show_work_mode>
    1440:	80 ed       	ldi	r24, 0xD0	; 208
    1442:	97 e0       	ldi	r25, 0x07	; 7
    1444:	28 ec       	ldi	r18, 0xC8	; 200
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	f9 01       	movw	r30, r18
    144a:	31 97       	sbiw	r30, 0x01	; 1
    144c:	f1 f7       	brne	.-4      	; 0x144a <main+0x98>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    144e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1450:	d9 f7       	brne	.-10     	; 0x1448 <main+0x96>
	//naudojam ADC nuskaitymui
	
//	start_timer0();
	
	_delay_ms(200);
	LCD_LED_PORT &= ~_BV(LCD_LED_BIT); //isjungiam LCD pasvietima	
    1452:	ac 98       	cbi	0x15, 4	; 21

sei();
    1454:	78 94       	sei
    1456:	c8 ec       	ldi	r28, 0xC8	; 200
    1458:	d0 e0       	ldi	r29, 0x00	; 0
				debug_meniu();	
				#endif	
				}

				else if (menu_page==3){		//LDR meniu punktas
				work_mode=4;				//LDR - wmode
    145a:	a4 e0       	ldi	r26, 0x04	; 4
    145c:	ca 2e       	mov	r12, r26
				_delay_ms(200);
				LCD_LED_PORT &= ~_BV(LCD_LED_BIT); //isjungiam LCD pasvietima
				}				

				else if (menu_page==2){		//PIR/LDR meniu punktas
				work_mode=3;				//PIR/LDR - wmode
    145e:	13 e0       	ldi	r17, 0x03	; 3
				

				_delay_ms(200);
				clock_second=0;
				clock_millisecond=0;
				lcd_light=1;
    1460:	01 e0       	ldi	r16, 0x01	; 1
		if(read_keypad()==1){

			if(meniu==1 && config==0){
				
					if(menu_page<4){ //2inis configas (on/off tipo)
						meniu=2;
    1462:	f2 e0       	ldi	r31, 0x02	; 2
    1464:	df 2e       	mov	r13, r31
{
/* Wait for completion of previous write */
while(EECR & (1<<EEWE))
;
/* Set up address register */
EEAR = uiAddress;
    1466:	e8 e1       	ldi	r30, 0x18	; 24
    1468:	ee 2e       	mov	r14, r30
    146a:	f1 2c       	mov	r15, r1


while(5){


	PORTDDR(LED_PORT)^= (1<<LED3_BIT);
    146c:	81 b3       	in	r24, 0x11	; 17
    146e:	80 58       	subi	r24, 0x80	; 128
    1470:	81 bb       	out	0x11, r24	; 17
//		if (bit_is_clear(PINB, PB6)){	
//		lcd_light=1;
//		}
		
		
		if(meniu==0 && config==0 && read_keypad()==1){
    1472:	80 91 48 01 	lds	r24, 0x0148
    1476:	88 23       	and	r24, r24
    1478:	09 f0       	breq	.+2      	; 0x147c <main+0xca>
    147a:	f4 c0       	rjmp	.+488    	; 0x1664 <main+0x2b2>
    147c:	80 91 49 01 	lds	r24, 0x0149
    1480:	88 23       	and	r24, r24
    1482:	09 f0       	breq	.+2      	; 0x1486 <main+0xd4>
    1484:	ef c0       	rjmp	.+478    	; 0x1664 <main+0x2b2>
    1486:	86 d7       	rcall	.+3852   	; 0x2394 <__data_load_end+0x8f8>
    1488:	98 2f       	mov	r25, r24
    148a:	81 30       	cpi	r24, 0x01	; 1
    148c:	09 f0       	breq	.+2      	; 0x1490 <main+0xde>
    148e:	ea c0       	rjmp	.+468    	; 0x1664 <main+0x2b2>
		#if debug_mode 
		PORTDDR(LED_PORT)^= (1<<LED2_BIT);
		send_string("nuspausta knopke\n\r");	
		#endif
		
		if(lcd_light==0) {	
    1490:	80 91 47 01 	lds	r24, 0x0147
    1494:	88 23       	and	r24, r24
    1496:	51 f4       	brne	.+20     	; 0x14ac <main+0xfa>
							clock_second=0;
    1498:	10 92 52 01 	sts	0x0152, r1
							clock_millisecond=0;
    149c:	10 92 51 01 	sts	0x0151, r1
    14a0:	10 92 50 01 	sts	0x0150, r1
							lcd_light=1;
    14a4:	90 93 47 01 	sts	0x0147, r25
							LCD_LED_PORT |= _BV(LCD_LED_BIT); //ijungiam LCD pasvietima	
    14a8:	ac 9a       	sbi	0x15, 4	; 21
    14aa:	dc c0       	rjmp	.+440    	; 0x1664 <main+0x2b2>
						 }
		else{

		LCD_LED_PORT |= _BV(LCD_LED_BIT); //ijungiam LCD pasvietima	
    14ac:	ac 9a       	sbi	0x15, 4	; 21

		meniu=1; 
    14ae:	90 93 48 01 	sts	0x0148, r25
		menu_page=0; 
    14b2:	10 92 4c 01 	sts	0x014C, r1
		sub_menu_page=0;
    14b6:	10 92 4d 01 	sts	0x014D, r1
	
		lcd_light=0; 
    14ba:	10 92 47 01 	sts	0x0147, r1
    14be:	4e c0       	rjmp	.+156    	; 0x155c <main+0x1aa>
//-------------------- main and sub menu routine --------------
	
	while(meniu!=0 && config==0){

	
		if(read_keypad()==1){
    14c0:	69 d7       	rcall	.+3794   	; 0x2394 <__data_load_end+0x8f8>
    14c2:	81 30       	cpi	r24, 0x01	; 1
    14c4:	09 f0       	breq	.+2      	; 0x14c8 <main+0x116>
    14c6:	ce c0       	rjmp	.+412    	; 0x1664 <main+0x2b2>

			if(meniu==1 && config==0){
    14c8:	90 91 48 01 	lds	r25, 0x0148
    14cc:	91 30       	cpi	r25, 0x01	; 1
    14ce:	21 f5       	brne	.+72     	; 0x1518 <main+0x166>
    14d0:	80 91 49 01 	lds	r24, 0x0149
    14d4:	88 23       	and	r24, r24
    14d6:	01 f5       	brne	.+64     	; 0x1518 <main+0x166>
				
					if(menu_page<4){ //2inis configas (on/off tipo)
    14d8:	80 91 4c 01 	lds	r24, 0x014C
    14dc:	84 30       	cpi	r24, 0x04	; 4
    14de:	30 f4       	brcc	.+12     	; 0x14ec <main+0x13a>
						meniu=2;
    14e0:	d0 92 48 01 	sts	0x0148, r13
						sub_menu_page=0; 
    14e4:	10 92 4d 01 	sts	0x014D, r1
						puslapiai_2();
    14e8:	ee dc       	rcall	.-1572   	; 0xec6 <puslapiai_2>
    14ea:	bc c0       	rjmp	.+376    	; 0x1664 <main+0x2b2>
						#if debug_mode 
						debug_meniu();					
						#endif
					}				

					else if (menu_page==4){	//isejimas i configa		
    14ec:	80 91 4c 01 	lds	r24, 0x014C
    14f0:	84 30       	cpi	r24, 0x04	; 4
    14f2:	39 f4       	brne	.+14     	; 0x1502 <main+0x150>
						meniu=3;
    14f4:	10 93 48 01 	sts	0x0148, r17
						config=1;
    14f8:	90 93 49 01 	sts	0x0149, r25
						read_config(); //nuskaitom config parametrus is eeprom
    14fc:	cb d6       	rcall	.+3478   	; 0x2294 <__data_load_end+0x7f8>
						puslapiai_config();										
    14fe:	a4 dc       	rcall	.-1720   	; 0xe48 <puslapiai_config>
    1500:	b1 c0       	rjmp	.+354    	; 0x1664 <main+0x2b2>
						#if debug_mode 
						debug_meniu();	
						#endif
					}
					//exit meniu punktas
					else if (menu_page==5){ //iseijimas i work_mode();
    1502:	80 91 4c 01 	lds	r24, 0x014C
    1506:	85 30       	cpi	r24, 0x05	; 5
    1508:	09 f0       	breq	.+2      	; 0x150c <main+0x15a>
    150a:	a8 c0       	rjmp	.+336    	; 0x165c <main+0x2aa>
						meniu=0;
    150c:	10 92 48 01 	sts	0x0148, r1
						config=0;
    1510:	10 92 49 01 	sts	0x0149, r1

						show_work_mode();
    1514:	49 dd       	rcall	.-1390   	; 0xfa8 <show_work_mode>
    1516:	a0 c0       	rjmp	.+320    	; 0x1658 <main+0x2a6>
//-------------------- end of main menu routine --------------

	
//-------------------- start of sub menu routine --------------		
		
		else if (meniu==2 && config==0){ //2inis configas
    1518:	20 91 48 01 	lds	r18, 0x0148
    151c:	22 30       	cpi	r18, 0x02	; 2
    151e:	09 f0       	breq	.+2      	; 0x1522 <main+0x170>
    1520:	a1 c0       	rjmp	.+322    	; 0x1664 <main+0x2b2>
    1522:	80 91 49 01 	lds	r24, 0x0149
    1526:	88 23       	and	r24, r24
    1528:	09 f0       	breq	.+2      	; 0x152c <main+0x17a>
    152a:	9c c0       	rjmp	.+312    	; 0x1664 <main+0x2b2>
		
			if(sub_menu_page==1) { //OFF vektorius visiems meniu			
    152c:	90 91 4d 01 	lds	r25, 0x014D
    1530:	91 30       	cpi	r25, 0x01	; 1
    1532:	b1 f4       	brne	.+44     	; 0x1560 <main+0x1ae>
				if(menu_page!=4){ 
    1534:	80 91 4c 01 	lds	r24, 0x014C
    1538:	84 30       	cpi	r24, 0x04	; 4
    153a:	09 f4       	brne	.+2      	; 0x153e <main+0x18c>
    153c:	93 c0       	rjmp	.+294    	; 0x1664 <main+0x2b2>
				meniu=1; 
    153e:	90 93 48 01 	sts	0x0148, r25
				work_mode=0;	 //OFF - wmode
    1542:	10 92 4b 01 	sts	0x014B, r1
				EEPROM_write(25, work_mode);
    1546:	40 91 4b 01 	lds	r20, 0x014B
    154a:	50 e0       	ldi	r21, 0x00	; 0
    154c:	60 e0       	ldi	r22, 0x00	; 0
    154e:	70 e0       	ldi	r23, 0x00	; 0
    1550:	89 e1       	ldi	r24, 0x19	; 25
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	21 d6       	rcall	.+3138   	; 0x2198 <__data_load_end+0x6fc>
				wmode(work_mode);		
    1556:	80 91 4b 01 	lds	r24, 0x014B
    155a:	a7 d8       	rcall	.-3762   	; 0x6aa <wmode>
				puslapiai(); 
    155c:	e6 dc       	rcall	.-1588   	; 0xf2a <puslapiai>
    155e:	82 c0       	rjmp	.+260    	; 0x1664 <main+0x2b2>
				}
		

			}
			
			else if (sub_menu_page==0){ //ON vektorius
    1560:	80 91 4d 01 	lds	r24, 0x014D
    1564:	88 23       	and	r24, r24
    1566:	09 f0       	breq	.+2      	; 0x156a <main+0x1b8>
    1568:	79 c0       	rjmp	.+242    	; 0x165c <main+0x2aa>
				if(menu_page==0){		//ON/OFF meniu punkte
    156a:	80 91 4c 01 	lds	r24, 0x014C
    156e:	88 23       	and	r24, r24
    1570:	c1 f4       	brne	.+48     	; 0x15a2 <main+0x1f0>
				work_mode=1;			//ON - wmode
    1572:	00 93 4b 01 	sts	0x014B, r16
				EEPROM_write(25, work_mode);
    1576:	40 91 4b 01 	lds	r20, 0x014B
    157a:	50 e0       	ldi	r21, 0x00	; 0
    157c:	60 e0       	ldi	r22, 0x00	; 0
    157e:	70 e0       	ldi	r23, 0x00	; 0
    1580:	89 e1       	ldi	r24, 0x19	; 25
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	09 d6       	rcall	.+3090   	; 0x2198 <__data_load_end+0x6fc>
				meniu=0;
    1586:	10 92 48 01 	sts	0x0148, r1
				wmode(work_mode);
    158a:	80 91 4b 01 	lds	r24, 0x014B
    158e:	8d d8       	rcall	.-3814   	; 0x6aa <wmode>
				show_work_mode();
    1590:	0b dd       	rcall	.-1514   	; 0xfa8 <show_work_mode>
    1592:	80 ed       	ldi	r24, 0xD0	; 208
    1594:	97 e0       	ldi	r25, 0x07	; 7
    1596:	fe 01       	movw	r30, r28
    1598:	31 97       	sbiw	r30, 0x01	; 1
    159a:	f1 f7       	brne	.-4      	; 0x1598 <main+0x1e6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    159c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    159e:	d9 f7       	brne	.-10     	; 0x1596 <main+0x1e4>
    15a0:	5b c0       	rjmp	.+182    	; 0x1658 <main+0x2a6>
				#if debug_mode 
				debug_meniu();	
				#endif	
				}
				
				else if (menu_page==1){		//PIR meniu punktas
    15a2:	80 91 4c 01 	lds	r24, 0x014C
    15a6:	81 30       	cpi	r24, 0x01	; 1
    15a8:	c1 f4       	brne	.+48     	; 0x15da <main+0x228>
				work_mode=2;				//PIR - wmode
    15aa:	20 93 4b 01 	sts	0x014B, r18
				EEPROM_write(25, work_mode);
    15ae:	40 91 4b 01 	lds	r20, 0x014B
    15b2:	50 e0       	ldi	r21, 0x00	; 0
    15b4:	60 e0       	ldi	r22, 0x00	; 0
    15b6:	70 e0       	ldi	r23, 0x00	; 0
    15b8:	89 e1       	ldi	r24, 0x19	; 25
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	ed d5       	rcall	.+3034   	; 0x2198 <__data_load_end+0x6fc>
				meniu=0;
    15be:	10 92 48 01 	sts	0x0148, r1
				show_work_mode();
    15c2:	f2 dc       	rcall	.-1564   	; 0xfa8 <show_work_mode>
				wmode(work_mode);				
    15c4:	80 91 4b 01 	lds	r24, 0x014B
    15c8:	70 d8       	rcall	.-3872   	; 0x6aa <wmode>
    15ca:	80 ed       	ldi	r24, 0xD0	; 208
    15cc:	97 e0       	ldi	r25, 0x07	; 7
    15ce:	fe 01       	movw	r30, r28
    15d0:	31 97       	sbiw	r30, 0x01	; 1
    15d2:	f1 f7       	brne	.-4      	; 0x15d0 <main+0x21e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d6:	d9 f7       	brne	.-10     	; 0x15ce <main+0x21c>
    15d8:	3f c0       	rjmp	.+126    	; 0x1658 <main+0x2a6>

				_delay_ms(200);
				LCD_LED_PORT &= ~_BV(LCD_LED_BIT); //isjungiam LCD pasvietima
				}				

				else if (menu_page==2){		//PIR/LDR meniu punktas
    15da:	80 91 4c 01 	lds	r24, 0x014C
    15de:	82 30       	cpi	r24, 0x02	; 2
    15e0:	01 f5       	brne	.+64     	; 0x1622 <main+0x270>
				work_mode=3;				//PIR/LDR - wmode
    15e2:	10 93 4b 01 	sts	0x014B, r17
				EEPROM_write(25, work_mode);
    15e6:	40 91 4b 01 	lds	r20, 0x014B
    15ea:	50 e0       	ldi	r21, 0x00	; 0
    15ec:	60 e0       	ldi	r22, 0x00	; 0
    15ee:	70 e0       	ldi	r23, 0x00	; 0
    15f0:	89 e1       	ldi	r24, 0x19	; 25
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	d1 d5       	rcall	.+2978   	; 0x2198 <__data_load_end+0x6fc>
				meniu=0;
    15f6:	10 92 48 01 	sts	0x0148, r1
				show_work_mode();
    15fa:	d6 dc       	rcall	.-1620   	; 0xfa8 <show_work_mode>
				wmode(work_mode);				
    15fc:	80 91 4b 01 	lds	r24, 0x014B
    1600:	54 d8       	rcall	.-3928   	; 0x6aa <wmode>
    1602:	80 ed       	ldi	r24, 0xD0	; 208
    1604:	97 e0       	ldi	r25, 0x07	; 7
    1606:	fe 01       	movw	r30, r28
    1608:	31 97       	sbiw	r30, 0x01	; 1
    160a:	f1 f7       	brne	.-4      	; 0x1608 <main+0x256>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    160e:	d9 f7       	brne	.-10     	; 0x1606 <main+0x254>
				

				_delay_ms(200);
				clock_second=0;
    1610:	10 92 52 01 	sts	0x0152, r1
				clock_millisecond=0;
    1614:	10 92 51 01 	sts	0x0151, r1
    1618:	10 92 50 01 	sts	0x0150, r1
				lcd_light=1;
    161c:	00 93 47 01 	sts	0x0147, r16
    1620:	21 c0       	rjmp	.+66     	; 0x1664 <main+0x2b2>
				#if debug_mode 
				debug_meniu();	
				#endif	
				}

				else if (menu_page==3){		//LDR meniu punktas
    1622:	80 91 4c 01 	lds	r24, 0x014C
    1626:	83 30       	cpi	r24, 0x03	; 3
    1628:	e9 f4       	brne	.+58     	; 0x1664 <main+0x2b2>
				work_mode=4;				//LDR - wmode
    162a:	c0 92 4b 01 	sts	0x014B, r12
				EEPROM_write(25, work_mode);
    162e:	40 91 4b 01 	lds	r20, 0x014B
    1632:	50 e0       	ldi	r21, 0x00	; 0
    1634:	60 e0       	ldi	r22, 0x00	; 0
    1636:	70 e0       	ldi	r23, 0x00	; 0
    1638:	89 e1       	ldi	r24, 0x19	; 25
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	ad d5       	rcall	.+2906   	; 0x2198 <__data_load_end+0x6fc>
				meniu=0;
    163e:	10 92 48 01 	sts	0x0148, r1
				show_work_mode(); 
    1642:	b2 dc       	rcall	.-1692   	; 0xfa8 <show_work_mode>
				wmode(work_mode);
    1644:	80 91 4b 01 	lds	r24, 0x014B
    1648:	30 d8       	rcall	.-4000   	; 0x6aa <wmode>
    164a:	80 ed       	ldi	r24, 0xD0	; 208
    164c:	97 e0       	ldi	r25, 0x07	; 7
    164e:	fe 01       	movw	r30, r28
    1650:	31 97       	sbiw	r30, 0x01	; 1
    1652:	f1 f7       	brne	.-4      	; 0x1650 <main+0x29e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1654:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1656:	d9 f7       	brne	.-10     	; 0x164e <main+0x29c>
				
				

				_delay_ms(200);
				LCD_LED_PORT &= ~_BV(LCD_LED_BIT); //isjungiam LCD pasvietima
    1658:	ac 98       	cbi	0x15, 4	; 21
    165a:	04 c0       	rjmp	.+8      	; 0x1664 <main+0x2b2>
				debug_meniu();	
				#endif	
				}
			}

			else meniu=meniu;
    165c:	80 91 48 01 	lds	r24, 0x0148
    1660:	80 93 48 01 	sts	0x0148, r24
			
		}
	
//-------------------- main and sub menu routine --------------
	
	while(meniu!=0 && config==0){
    1664:	80 91 48 01 	lds	r24, 0x0148
    1668:	88 23       	and	r24, r24
    166a:	09 f4       	brne	.+2      	; 0x166e <main+0x2bc>
    166c:	57 c0       	rjmp	.+174    	; 0x171c <main+0x36a>
    166e:	80 91 49 01 	lds	r24, 0x0149
    1672:	88 23       	and	r24, r24
    1674:	09 f4       	brne	.+2      	; 0x1678 <main+0x2c6>
    1676:	24 cf       	rjmp	.-440    	; 0x14c0 <main+0x10e>
    1678:	51 c0       	rjmp	.+162    	; 0x171c <main+0x36a>

//-------------------------- config ---------------------
	while(meniu!=0 && config==1){

		
		if(read_keypad()==1){	
    167a:	8c d6       	rcall	.+3352   	; 0x2394 <__data_load_end+0x8f8>
    167c:	81 30       	cpi	r24, 0x01	; 1
    167e:	09 f0       	breq	.+2      	; 0x1682 <main+0x2d0>
    1680:	4d c0       	rjmp	.+154    	; 0x171c <main+0x36a>
		PORTDDR(LED_PORT)^= (1<<LED1_BIT);
		send_string("nuspausta knopke confige\n\r");
		#endif

			//config meniu vaiksciojimas: arba iseinam i main meniu arba nueinam i sub config meniu
			if(meniu==3 && config==1){
    1682:	20 91 48 01 	lds	r18, 0x0148
    1686:	23 30       	cpi	r18, 0x03	; 3
    1688:	09 f0       	breq	.+2      	; 0x168c <main+0x2da>
    168a:	44 c0       	rjmp	.+136    	; 0x1714 <main+0x362>
    168c:	90 91 49 01 	lds	r25, 0x0149
    1690:	91 30       	cpi	r25, 0x01	; 1
    1692:	09 f0       	breq	.+2      	; 0x1696 <main+0x2e4>
    1694:	3f c0       	rjmp	.+126    	; 0x1714 <main+0x362>
			
					//exit meniu punktas
					if (config_menu_page==config_menu_page_max){ //iseijimas i work_mode();
    1696:	80 91 4e 01 	lds	r24, 0x014E
    169a:	86 30       	cpi	r24, 0x06	; 6
    169c:	41 f4       	brne	.+16     	; 0x16ae <main+0x2fc>
						meniu=1;
    169e:	90 93 48 01 	sts	0x0148, r25
						config=0;
    16a2:	10 92 49 01 	sts	0x0149, r1
						config_menu_page=0;	
    16a6:	10 92 4e 01 	sts	0x014E, r1
						puslapiai();
    16aa:	3f dc       	rcall	.-1922   	; 0xf2a <puslapiai>
    16ac:	37 c0       	rjmp	.+110    	; 0x171c <main+0x36a>
						debug_meniu();	
						#endif		
					}
					
					//nuejimas i sub config meniu (minPWM, maxPWM, timeOUT ir LDRth nustatymai)
					else if (config_menu_page!=config_menu_page_max){
    16ae:	80 91 4e 01 	lds	r24, 0x014E
    16b2:	86 30       	cpi	r24, 0x06	; 6
    16b4:	99 f1       	breq	.+102    	; 0x171c <main+0x36a>
					meniu=3;
    16b6:	20 93 48 01 	sts	0x0148, r18
					config=2;
    16ba:	d0 92 49 01 	sts	0x0149, r13
					
					//nuostato nustatymas (pasiziurim, kelintas fadein[] elementas atinka minPWM/maxPWM reiksme EEProme
					if (config_menu_page==0) nuostatas=nuostato_radimas(minPWM);
    16be:	80 91 4e 01 	lds	r24, 0x014E
    16c2:	88 23       	and	r24, r24
    16c4:	69 f4       	brne	.+26     	; 0x16e0 <main+0x32e>
    16c6:	20 91 40 01 	lds	r18, 0x0140
    16ca:	e2 e1       	ldi	r30, 0x12	; 18
    16cc:	f1 e0       	ldi	r31, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0

unsigned char nuostato_radimas(char nustatymas){
char eilnr;
for(unsigned char i=0;i<=46;i++){ //randam atitikmeni masyve

	 if (fadein[i]>=nustatymas) {
    16d0:	80 81       	ld	r24, Z
    16d2:	82 17       	cp	r24, r18
    16d4:	b0 f4       	brcc	.+44     	; 0x1702 <main+0x350>
}


unsigned char nuostato_radimas(char nustatymas){
char eilnr;
for(unsigned char i=0;i<=46;i++){ //randam atitikmeni masyve
    16d6:	9f 5f       	subi	r25, 0xFF	; 255
    16d8:	31 96       	adiw	r30, 0x01	; 1
    16da:	9f 32       	cpi	r25, 0x2F	; 47
    16dc:	c9 f7       	brne	.-14     	; 0x16d0 <main+0x31e>
    16de:	10 c0       	rjmp	.+32     	; 0x1700 <main+0x34e>
					else if (config_menu_page==1) nuostatas=nuostato_radimas(maxPWM);
    16e0:	80 91 4e 01 	lds	r24, 0x014E
    16e4:	81 30       	cpi	r24, 0x01	; 1
    16e6:	81 f4       	brne	.+32     	; 0x1708 <main+0x356>
    16e8:	20 91 41 01 	lds	r18, 0x0141
    16ec:	e2 e1       	ldi	r30, 0x12	; 18
    16ee:	f1 e0       	ldi	r31, 0x01	; 1
    16f0:	90 e0       	ldi	r25, 0x00	; 0

	 if (fadein[i]>=nustatymas) {
    16f2:	80 81       	ld	r24, Z
    16f4:	82 17       	cp	r24, r18
    16f6:	28 f4       	brcc	.+10     	; 0x1702 <main+0x350>
}


unsigned char nuostato_radimas(char nustatymas){
char eilnr;
for(unsigned char i=0;i<=46;i++){ //randam atitikmeni masyve
    16f8:	9f 5f       	subi	r25, 0xFF	; 255
    16fa:	31 96       	adiw	r30, 0x01	; 1
    16fc:	9f 32       	cpi	r25, 0x2F	; 47
    16fe:	c9 f7       	brne	.-14     	; 0x16f2 <main+0x340>
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	90 93 46 01 	sts	0x0146, r25
    1706:	04 c0       	rjmp	.+8      	; 0x1710 <main+0x35e>
					else nuostatas=nuostatas;
    1708:	80 91 46 01 	lds	r24, 0x0146
    170c:	80 93 46 01 	sts	0x0146, r24

					puslapiai_config_2();
    1710:	26 da       	rcall	.-2996   	; 0xb5e <puslapiai_config_2>
    1712:	04 c0       	rjmp	.+8      	; 0x171c <main+0x36a>
					}

			
			}

			else config=config;
    1714:	80 91 49 01 	lds	r24, 0x0149
    1718:	80 93 49 01 	sts	0x0149, r24
//-------------------- end of sub menu routine --------------



//-------------------------- config ---------------------
	while(meniu!=0 && config==1){
    171c:	80 91 48 01 	lds	r24, 0x0148
    1720:	88 23       	and	r24, r24
    1722:	01 f1       	breq	.+64     	; 0x1764 <main+0x3b2>
    1724:	80 91 49 01 	lds	r24, 0x0149
    1728:	81 30       	cpi	r24, 0x01	; 1
    172a:	09 f4       	brne	.+2      	; 0x172e <main+0x37c>
    172c:	a6 cf       	rjmp	.-180    	; 0x167a <main+0x2c8>
    172e:	1a c0       	rjmp	.+52     	; 0x1764 <main+0x3b2>
//---------------------- sub config routine -------------------------

	while(meniu!=0 && config==2){

		
		if(read_keypad()==1){	
    1730:	31 d6       	rcall	.+3170   	; 0x2394 <__data_load_end+0x8f8>
    1732:	81 30       	cpi	r24, 0x01	; 1
    1734:	99 f4       	brne	.+38     	; 0x175c <main+0x3aa>
		send_string("nuspausta knopke sub confige\n\r");
		#endif

		//isejimas is sub configo
		
		meniu=3;
    1736:	10 93 48 01 	sts	0x0148, r17
		config=1;
    173a:	80 93 49 01 	sts	0x0149, r24
		nuostatas=0;
    173e:	10 92 46 01 	sts	0x0146, r1
		puslapiai_config();
    1742:	82 db       	rcall	.-2300   	; 0xe48 <puslapiai_config>

		write_config();
    1744:	ee d5       	rcall	.+3036   	; 0x2322 <__data_load_end+0x886>
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
/* Wait for completion of previous write */
while(EECR & (1<<EEWE))
    1746:	e1 99       	sbic	0x1c, 1	; 28
    1748:	fe cf       	rjmp	.-4      	; 0x1746 <main+0x394>
;
/* Set up address register */
EEAR = uiAddress;
    174a:	ff ba       	out	0x1f, r15	; 31
    174c:	ee ba       	out	0x1e, r14	; 30
/* Start eeprom read by writing EERE */
EECR |= (1<<EERE);
    174e:	e0 9a       	sbi	0x1c, 0	; 28
/* Return data from data register */
return EEDR;
    1750:	8d b3       	in	r24, 0x1d	; 29
		//OCR2=EEPROM_read(24);
		timer2_set(EEPROM_read(24));
    1752:	13 d5       	rcall	.+2598   	; 0x217a <__data_load_end+0x6de>
		wmode(work_mode); //kad liktu tikrasis work_mode
    1754:	80 91 4b 01 	lds	r24, 0x014B
    1758:	a8 d7       	rcall	.+3920   	; 0x26aa <__data_load_end+0xc0e>
    175a:	04 c0       	rjmp	.+8      	; 0x1764 <main+0x3b2>
		}

		else config=config;
    175c:	80 91 49 01 	lds	r24, 0x0149
    1760:	80 93 49 01 	sts	0x0149, r24

//---------------------- end of config -----------------------

//---------------------- sub config routine -------------------------

	while(meniu!=0 && config==2){
    1764:	80 91 48 01 	lds	r24, 0x0148
    1768:	88 23       	and	r24, r24
    176a:	09 f4       	brne	.+2      	; 0x176e <main+0x3bc>
    176c:	7f ce       	rjmp	.-770    	; 0x146c <main+0xba>
    176e:	80 91 49 01 	lds	r24, 0x0149
    1772:	82 30       	cpi	r24, 0x02	; 2
    1774:	09 f0       	breq	.+2      	; 0x1778 <main+0x3c6>
    1776:	7a ce       	rjmp	.-780    	; 0x146c <main+0xba>
    1778:	db cf       	rjmp	.-74     	; 0x1730 <main+0x37e>

0000177a <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
    177a:	28 2f       	mov	r18, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
    177c:	66 23       	and	r22, r22
    177e:	11 f0       	breq	.+4      	; 0x1784 <lcd_write+0xa>
       lcd_rs_high();
    1780:	c0 9a       	sbi	0x18, 0	; 24
    1782:	01 c0       	rjmp	.+2      	; 0x1786 <lcd_write+0xc>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
    1784:	c0 98       	cbi	0x18, 0	; 24
    }
    lcd_rw_low();
    1786:	c1 98       	cbi	0x18, 1	; 24

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
    1788:	84 b3       	in	r24, 0x14	; 20
    178a:	8f 60       	ori	r24, 0x0F	; 15
    178c:	84 bb       	out	0x14, r24	; 20

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
    178e:	95 b3       	in	r25, 0x15	; 21
    1790:	90 7f       	andi	r25, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
    1792:	82 2f       	mov	r24, r18
    1794:	82 95       	swap	r24
    1796:	8f 70       	andi	r24, 0x0F	; 15
    1798:	89 2b       	or	r24, r25
    179a:	85 bb       	out	0x15, r24	; 21

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
    179c:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
    179e:	00 c0       	rjmp	.+0      	; 0x17a0 <lcd_write+0x26>
    lcd_e_low();
    17a0:	c2 98       	cbi	0x18, 2	; 24
        dataBits = LCD_DATA0_PORT & 0xF0;
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
        lcd_e_toggle();

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
    17a2:	2f 70       	andi	r18, 0x0F	; 15
    17a4:	29 2b       	or	r18, r25
    17a6:	25 bb       	out	0x15, r18	; 21

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
    17a8:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
    17aa:	00 c0       	rjmp	.+0      	; 0x17ac <lcd_write+0x32>
    lcd_e_low();
    17ac:	c2 98       	cbi	0x18, 2	; 24
        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
        lcd_e_toggle();

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
    17ae:	9f 60       	ori	r25, 0x0F	; 15
    17b0:	95 bb       	out	0x15, r25	; 21
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
    17b2:	08 95       	ret

000017b4 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
    17b4:	88 23       	and	r24, r24
    17b6:	11 f0       	breq	.+4      	; 0x17bc <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
    17b8:	c0 9a       	sbi	0x18, 0	; 24
    17ba:	01 c0       	rjmp	.+2      	; 0x17be <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
    17bc:	c0 98       	cbi	0x18, 0	; 24
    lcd_rw_high();                           /* RW=1  read mode      */
    17be:	c1 9a       	sbi	0x18, 1	; 24
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
    17c0:	84 b3       	in	r24, 0x14	; 20
    17c2:	80 7f       	andi	r24, 0xF0	; 240
    17c4:	84 bb       	out	0x14, r24	; 20
        
        lcd_e_high();
    17c6:	c2 9a       	sbi	0x18, 2	; 24
        lcd_e_delay();        
    17c8:	00 c0       	rjmp	.+0      	; 0x17ca <lcd_read+0x16>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
    17ca:	93 b3       	in	r25, 0x13	; 19
        lcd_e_low();
    17cc:	c2 98       	cbi	0x18, 2	; 24
        
        lcd_e_delay();                       /* Enable 500ns low       */
    17ce:	00 c0       	rjmp	.+0      	; 0x17d0 <lcd_read+0x1c>
        
        lcd_e_high();
    17d0:	c2 9a       	sbi	0x18, 2	; 24
        lcd_e_delay();
    17d2:	00 c0       	rjmp	.+0      	; 0x17d4 <lcd_read+0x20>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
    17d4:	83 b3       	in	r24, 0x13	; 19
    17d6:	8f 70       	andi	r24, 0x0F	; 15
    17d8:	92 95       	swap	r25
    17da:	90 7f       	andi	r25, 0xF0	; 240
        lcd_e_low();
    17dc:	c2 98       	cbi	0x18, 2	; 24
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
    17de:	89 2b       	or	r24, r25
    17e0:	08 95       	ret

000017e2 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	e7 df       	rcall	.-50     	; 0x17b4 <lcd_read>
    17e6:	87 fd       	sbrc	r24, 7
    17e8:	fc cf       	rjmp	.-8      	; 0x17e2 <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    17ea:	84 e0       	ldi	r24, 0x04	; 4
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	f1 f7       	brne	.-4      	; 0x17ee <lcd_waitbusy+0xc>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
    17f2:	80 e0       	ldi	r24, 0x00	; 0
    17f4:	df df       	rcall	.-66     	; 0x17b4 <lcd_read>
    
}/* lcd_waitbusy */
    17f6:	08 95       	ret

000017f8 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
    17f8:	1f 93       	push	r17
    17fa:	18 2f       	mov	r17, r24
    
	lcd_waitbusy();	
    17fc:	f2 df       	rcall	.-28     	; 0x17e2 <lcd_waitbusy>
    lcd_write(cmd,0);
    17fe:	81 2f       	mov	r24, r17
    1800:	60 e0       	ldi	r22, 0x00	; 0
    1802:	bb df       	rcall	.-138    	; 0x177a <lcd_write>
	
}
    1804:	1f 91       	pop	r17
    1806:	08 95       	ret

00001808 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
    1808:	1f 93       	push	r17
    180a:	18 2f       	mov	r17, r24
    lcd_waitbusy();
    180c:	ea df       	rcall	.-44     	; 0x17e2 <lcd_waitbusy>
    lcd_write(data,1);
    180e:	81 2f       	mov	r24, r17
    1810:	61 e0       	ldi	r22, 0x01	; 1
    1812:	b3 df       	rcall	.-154    	; 0x177a <lcd_write>
}
    1814:	1f 91       	pop	r17
    1816:	08 95       	ret

00001818 <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
    1818:	66 23       	and	r22, r22
    181a:	11 f4       	brne	.+4      	; 0x1820 <lcd_gotoxy+0x8>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
    181c:	80 58       	subi	r24, 0x80	; 128
    181e:	01 c0       	rjmp	.+2      	; 0x1822 <lcd_gotoxy+0xa>
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
    1820:	80 54       	subi	r24, 0x40	; 64
    1822:	ea df       	rcall	.-44     	; 0x17f8 <lcd_command>
    1824:	08 95       	ret

00001826 <lcd_getxy>:

/*************************************************************************
*************************************************************************/
int lcd_getxy(void)
{
    return lcd_waitbusy();
    1826:	dd df       	rcall	.-70     	; 0x17e2 <lcd_waitbusy>
}
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	08 95       	ret

0000182c <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	e4 df       	rcall	.-56     	; 0x17f8 <lcd_command>
}
    1830:	08 95       	ret

00001832 <lcd_home>:
/*************************************************************************
Set cursor to home position
*************************************************************************/
void lcd_home(void)
{
    lcd_command(1<<LCD_HOME);
    1832:	82 e0       	ldi	r24, 0x02	; 2
    1834:	e1 df       	rcall	.-62     	; 0x17f8 <lcd_command>
}
    1836:	08 95       	ret

00001838 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
    1838:	1f 93       	push	r17
    183a:	18 2f       	mov	r17, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
    183c:	d2 df       	rcall	.-92     	; 0x17e2 <lcd_waitbusy>
    if (c=='\n')
    183e:	1a 30       	cpi	r17, 0x0A	; 10
    1840:	41 f4       	brne	.+16     	; 0x1852 <lcd_putc+0x1a>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
    1842:	80 34       	cpi	r24, 0x40	; 64
    1844:	10 f0       	brcs	.+4      	; 0x184a <lcd_putc+0x12>
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	01 c0       	rjmp	.+2      	; 0x184c <lcd_putc+0x14>
    184a:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
    184c:	80 58       	subi	r24, 0x80	; 128
    184e:	d4 df       	rcall	.-88     	; 0x17f8 <lcd_command>
    1850:	03 c0       	rjmp	.+6      	; 0x1858 <lcd_putc+0x20>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
    1852:	81 2f       	mov	r24, r17
    1854:	61 e0       	ldi	r22, 0x01	; 1
    1856:	91 df       	rcall	.-222    	; 0x177a <lcd_write>
    }

}/* lcd_putc */
    1858:	1f 91       	pop	r17
    185a:	08 95       	ret

0000185c <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    185c:	cf 93       	push	r28
    185e:	df 93       	push	r29
    1860:	ec 01       	movw	r28, r24
    1862:	01 c0       	rjmp	.+2      	; 0x1866 <lcd_puts+0xa>
    register char c;

    while ( (c = *s++) ) {
        lcd_putc(c);
    1864:	e9 df       	rcall	.-46     	; 0x1838 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
    1866:	89 91       	ld	r24, Y+
    1868:	88 23       	and	r24, r24
    186a:	e1 f7       	brne	.-8      	; 0x1864 <lcd_puts+0x8>
        lcd_putc(c);
    }

}/* lcd_puts */
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	08 95       	ret

00001872 <lcd_puts_p>:
Input:     string from program memory be be displayed                                        
Returns:   none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	ec 01       	movw	r28, r24
    1878:	01 c0       	rjmp	.+2      	; 0x187c <lcd_puts_p+0xa>
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    187a:	de df       	rcall	.-68     	; 0x1838 <lcd_putc>
    187c:	fe 01       	movw	r30, r28
void lcd_puts_p(const char *progmem_s)
/* print string from program memory on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = pgm_read_byte(progmem_s++)) ) {
    187e:	21 96       	adiw	r28, 0x01	; 1
    1880:	84 91       	lpm	r24, Z+
    1882:	88 23       	and	r24, r24
    1884:	d1 f7       	brne	.-12     	; 0x187a <lcd_puts_p+0x8>
        lcd_putc(c);
    }

}/* lcd_puts_p */
    1886:	df 91       	pop	r29
    1888:	cf 91       	pop	r28
    188a:	08 95       	ret

0000188c <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
    188c:	1f 93       	push	r17
    188e:	18 2f       	mov	r17, r24
    }
    else if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
           && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure all port bits as output (all LCD data lines on same port, but control lines on different ports) */
        DDR(LCD_DATA0_PORT) |= 0x0F;
    1890:	84 b3       	in	r24, 0x14	; 20
    1892:	8f 60       	ori	r24, 0x0F	; 15
    1894:	84 bb       	out	0x14, r24	; 20
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
    1896:	b8 9a       	sbi	0x17, 0	; 23
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
    1898:	b9 9a       	sbi	0x17, 1	; 23
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    189a:	ba 9a       	sbi	0x17, 2	; 23
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	9d e7       	ldi	r25, 0x7D	; 125
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	f1 f7       	brne	.-4      	; 0x18a0 <lcd_init+0x14>

    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
    18a4:	a9 9a       	sbi	0x15, 1	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    18a6:	a8 9a       	sbi	0x15, 0	; 21

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
    18a8:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
    18aa:	00 c0       	rjmp	.+0      	; 0x18ac <lcd_init+0x20>
    lcd_e_low();
    18ac:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	97 e2       	ldi	r25, 0x27	; 39
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	f1 f7       	brne	.-4      	; 0x18b2 <lcd_init+0x26>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
    18b6:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
    18b8:	00 c0       	rjmp	.+0      	; 0x18ba <lcd_init+0x2e>
    lcd_e_low();
    18ba:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    18bc:	80 e8       	ldi	r24, 0x80	; 128
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	fc 01       	movw	r30, r24
    18c2:	31 97       	sbiw	r30, 0x01	; 1
    18c4:	f1 f7       	brne	.-4      	; 0x18c2 <lcd_init+0x36>

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
    18c6:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
    18c8:	00 c0       	rjmp	.+0      	; 0x18ca <lcd_init+0x3e>
    lcd_e_low();
    18ca:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    18cc:	fc 01       	movw	r30, r24
    18ce:	31 97       	sbiw	r30, 0x01	; 1
    18d0:	f1 f7       	brne	.-4      	; 0x18ce <lcd_init+0x42>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
    18d2:	a8 98       	cbi	0x15, 0	; 21

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
    18d4:	c2 9a       	sbi	0x18, 2	; 24
    lcd_e_delay();
    18d6:	00 c0       	rjmp	.+0      	; 0x18d8 <lcd_init+0x4c>
    lcd_e_low();
    18d8:	c2 98       	cbi	0x18, 2	; 24
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	f1 f7       	brne	.-4      	; 0x18da <lcd_init+0x4e>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
    18de:	88 e2       	ldi	r24, 0x28	; 40
    18e0:	8b df       	rcall	.-234    	; 0x17f8 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
    18e2:	88 e0       	ldi	r24, 0x08	; 8
    18e4:	89 df       	rcall	.-238    	; 0x17f8 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
    18e6:	a2 df       	rcall	.-188    	; 0x182c <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    18e8:	86 e0       	ldi	r24, 0x06	; 6
    18ea:	86 df       	rcall	.-244    	; 0x17f8 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
    18ec:	81 2f       	mov	r24, r17
    18ee:	84 df       	rcall	.-248    	; 0x17f8 <lcd_command>

}/* lcd_init */
    18f0:	1f 91       	pop	r17
    18f2:	08 95       	ret

000018f4 <__udivmodqi4>:
    18f4:	99 1b       	sub	r25, r25
    18f6:	79 e0       	ldi	r23, 0x09	; 9
    18f8:	04 c0       	rjmp	.+8      	; 0x1902 <__udivmodqi4_ep>

000018fa <__udivmodqi4_loop>:
    18fa:	99 1f       	adc	r25, r25
    18fc:	96 17       	cp	r25, r22
    18fe:	08 f0       	brcs	.+2      	; 0x1902 <__udivmodqi4_ep>
    1900:	96 1b       	sub	r25, r22

00001902 <__udivmodqi4_ep>:
    1902:	88 1f       	adc	r24, r24
    1904:	7a 95       	dec	r23
    1906:	c9 f7       	brne	.-14     	; 0x18fa <__udivmodqi4_loop>
    1908:	80 95       	com	r24
    190a:	08 95       	ret

0000190c <__udivmodhi4>:
    190c:	aa 1b       	sub	r26, r26
    190e:	bb 1b       	sub	r27, r27
    1910:	51 e1       	ldi	r21, 0x11	; 17
    1912:	07 c0       	rjmp	.+14     	; 0x1922 <__udivmodhi4_ep>

00001914 <__udivmodhi4_loop>:
    1914:	aa 1f       	adc	r26, r26
    1916:	bb 1f       	adc	r27, r27
    1918:	a6 17       	cp	r26, r22
    191a:	b7 07       	cpc	r27, r23
    191c:	10 f0       	brcs	.+4      	; 0x1922 <__udivmodhi4_ep>
    191e:	a6 1b       	sub	r26, r22
    1920:	b7 0b       	sbc	r27, r23

00001922 <__udivmodhi4_ep>:
    1922:	88 1f       	adc	r24, r24
    1924:	99 1f       	adc	r25, r25
    1926:	5a 95       	dec	r21
    1928:	a9 f7       	brne	.-22     	; 0x1914 <__udivmodhi4_loop>
    192a:	80 95       	com	r24
    192c:	90 95       	com	r25
    192e:	bc 01       	movw	r22, r24
    1930:	cd 01       	movw	r24, r26
    1932:	08 95       	ret

00001934 <__divmodhi4>:
    1934:	97 fb       	bst	r25, 7
    1936:	09 2e       	mov	r0, r25
    1938:	07 26       	eor	r0, r23
    193a:	0a d0       	rcall	.+20     	; 0x1950 <__divmodhi4_neg1>
    193c:	77 fd       	sbrc	r23, 7
    193e:	04 d0       	rcall	.+8      	; 0x1948 <__divmodhi4_neg2>
    1940:	e5 df       	rcall	.-54     	; 0x190c <__udivmodhi4>
    1942:	06 d0       	rcall	.+12     	; 0x1950 <__divmodhi4_neg1>
    1944:	00 20       	and	r0, r0
    1946:	1a f4       	brpl	.+6      	; 0x194e <__divmodhi4_exit>

00001948 <__divmodhi4_neg2>:
    1948:	70 95       	com	r23
    194a:	61 95       	neg	r22
    194c:	7f 4f       	sbci	r23, 0xFF	; 255

0000194e <__divmodhi4_exit>:
    194e:	08 95       	ret

00001950 <__divmodhi4_neg1>:
    1950:	f6 f7       	brtc	.-4      	; 0x194e <__divmodhi4_exit>
    1952:	90 95       	com	r25
    1954:	81 95       	neg	r24
    1956:	9f 4f       	sbci	r25, 0xFF	; 255
    1958:	08 95       	ret

0000195a <itoa>:
    195a:	fb 01       	movw	r30, r22
    195c:	9f 01       	movw	r18, r30
    195e:	e8 94       	clt
    1960:	42 30       	cpi	r20, 0x02	; 2
    1962:	bc f0       	brlt	.+46     	; 0x1992 <itoa+0x38>
    1964:	45 32       	cpi	r20, 0x25	; 37
    1966:	ac f4       	brge	.+42     	; 0x1992 <itoa+0x38>
    1968:	4a 30       	cpi	r20, 0x0A	; 10
    196a:	29 f4       	brne	.+10     	; 0x1976 <itoa+0x1c>
    196c:	97 fb       	bst	r25, 7
    196e:	1e f4       	brtc	.+6      	; 0x1976 <itoa+0x1c>
    1970:	90 95       	com	r25
    1972:	81 95       	neg	r24
    1974:	9f 4f       	sbci	r25, 0xFF	; 255
    1976:	64 2f       	mov	r22, r20
    1978:	77 27       	eor	r23, r23
    197a:	c8 df       	rcall	.-112    	; 0x190c <__udivmodhi4>
    197c:	80 5d       	subi	r24, 0xD0	; 208
    197e:	8a 33       	cpi	r24, 0x3A	; 58
    1980:	0c f0       	brlt	.+2      	; 0x1984 <itoa+0x2a>
    1982:	89 5d       	subi	r24, 0xD9	; 217
    1984:	81 93       	st	Z+, r24
    1986:	cb 01       	movw	r24, r22
    1988:	00 97       	sbiw	r24, 0x00	; 0
    198a:	a9 f7       	brne	.-22     	; 0x1976 <itoa+0x1c>
    198c:	16 f4       	brtc	.+4      	; 0x1992 <itoa+0x38>
    198e:	5d e2       	ldi	r21, 0x2D	; 45
    1990:	51 93       	st	Z+, r21
    1992:	10 82       	st	Z, r1
    1994:	c9 01       	movw	r24, r18
    1996:	00 c0       	rjmp	.+0      	; 0x1998 <strrev>

00001998 <strrev>:
    1998:	dc 01       	movw	r26, r24
    199a:	fc 01       	movw	r30, r24
    199c:	67 2f       	mov	r22, r23
    199e:	71 91       	ld	r23, Z+
    19a0:	77 23       	and	r23, r23
    19a2:	e1 f7       	brne	.-8      	; 0x199c <strrev+0x4>
    19a4:	32 97       	sbiw	r30, 0x02	; 2
    19a6:	04 c0       	rjmp	.+8      	; 0x19b0 <strrev+0x18>
    19a8:	7c 91       	ld	r23, X
    19aa:	6d 93       	st	X+, r22
    19ac:	70 83       	st	Z, r23
    19ae:	62 91       	ld	r22, -Z
    19b0:	ae 17       	cp	r26, r30
    19b2:	bf 07       	cpc	r27, r31
    19b4:	c8 f3       	brcs	.-14     	; 0x19a8 <strrev+0x10>
    19b6:	08 95       	ret

000019b8 <_exit>:
    19b8:	f8 94       	cli

000019ba <__stop_program>:
    19ba:	ff cf       	rjmp	.-2      	; 0x19ba <__stop_program>
