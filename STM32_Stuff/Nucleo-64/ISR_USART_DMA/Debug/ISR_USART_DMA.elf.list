
ISR_USART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000184c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001a10  08001a10  00011a10  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001a4c  08001a4c  00011a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001a50  08001a50  00011a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08001a54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000144  20000004  08001a58  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000148  08001a58  00020148  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   000086cb  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001946  00000000  00000000  000286ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000528  00000000  00000000  0002a048  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000a08  00000000  00000000  0002a570  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003358  00000000  00000000  0002af78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002201  00000000  00000000  0002e2d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  000304d1  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000c40  00000000  00000000  00030550  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00003524  00000000  00000000  00031190  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080019f8 	.word	0x080019f8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080019f8 	.word	0x080019f8

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000214:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000216:	f001 fb6b 	bl	80018f0 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800021a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 800021e:	f001 bb34 	b.w	800188a <HAL_SYSTICK_IRQHandler>
	...

08000224 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000224:	4801      	ldr	r0, [pc, #4]	; (800022c <DMA1_Stream5_IRQHandler+0x8>)
 8000226:	f001 b9fd 	b.w	8001624 <HAL_DMA_IRQHandler>
 800022a:	bf00      	nop
 800022c:	20000028 	.word	0x20000028

08000230 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000230:	4801      	ldr	r0, [pc, #4]	; (8000238 <DMA1_Stream6_IRQHandler+0x8>)
 8000232:	f001 b9f7 	b.w	8001624 <HAL_DMA_IRQHandler>
 8000236:	bf00      	nop
 8000238:	200000a4 	.word	0x200000a4

0800023c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800023c:	4801      	ldr	r0, [pc, #4]	; (8000244 <USART2_IRQHandler+0x8>)
 800023e:	f000 bca7 	b.w	8000b90 <HAL_UART_IRQHandler>
 8000242:	bf00      	nop
 8000244:	20000104 	.word	0x20000104

08000248 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000248:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800024c:	f001 b900 	b.w	8001450 <HAL_GPIO_EXTI_IRQHandler>

08000250 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000250:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000252:	2007      	movs	r0, #7
 8000254:	f001 faa4 	bl	80017a0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8000258:	2200      	movs	r2, #0
 800025a:	4611      	mov	r1, r2
 800025c:	f06f 000b 	mvn.w	r0, #11
 8000260:	f001 fab0 	bl	80017c4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000264:	2200      	movs	r2, #0
 8000266:	4611      	mov	r1, r2
 8000268:	f06f 000a 	mvn.w	r0, #10
 800026c:	f001 faaa 	bl	80017c4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8000270:	2200      	movs	r2, #0
 8000272:	4611      	mov	r1, r2
 8000274:	f06f 0009 	mvn.w	r0, #9
 8000278:	f001 faa4 	bl	80017c4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800027c:	2200      	movs	r2, #0
 800027e:	4611      	mov	r1, r2
 8000280:	f06f 0004 	mvn.w	r0, #4
 8000284:	f001 fa9e 	bl	80017c4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8000288:	2200      	movs	r2, #0
 800028a:	4611      	mov	r1, r2
 800028c:	f06f 0003 	mvn.w	r0, #3
 8000290:	f001 fa98 	bl	80017c4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8000294:	2200      	movs	r2, #0
 8000296:	4611      	mov	r1, r2
 8000298:	f06f 0001 	mvn.w	r0, #1
 800029c:	f001 fa92 	bl	80017c4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80002a0:	2200      	movs	r2, #0
 80002a2:	4611      	mov	r1, r2
 80002a4:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80002ac:	f001 ba8a 	b.w	80017c4 <HAL_NVIC_SetPriority>

080002b0 <HAL_UART_MspInit>:

  /* USER CODE END MspInit 1 */
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80002b0:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80002b2:	6802      	ldr	r2, [r0, #0]
 80002b4:	4b2f      	ldr	r3, [pc, #188]	; (8000374 <HAL_UART_MspInit+0xc4>)
 80002b6:	429a      	cmp	r2, r3

  /* USER CODE END MspInit 1 */
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80002b8:	b086      	sub	sp, #24
 80002ba:	4606      	mov	r6, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80002bc:	d158      	bne.n	8000370 <HAL_UART_MspInit+0xc0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80002be:	2500      	movs	r5, #0
 80002c0:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80002c4:	9500      	str	r5, [sp, #0]
 80002c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002c8:	482b      	ldr	r0, [pc, #172]	; (8000378 <HAL_UART_MspInit+0xc8>)

    /* Peripheral DMA init*/
  
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80002ca:	4c2c      	ldr	r4, [pc, #176]	; (800037c <HAL_UART_MspInit+0xcc>)
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80002cc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80002d0:	641a      	str	r2, [r3, #64]	; 0x40
 80002d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002d8:	9300      	str	r3, [sp, #0]
 80002da:	9b00      	ldr	r3, [sp, #0]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80002dc:	230c      	movs	r3, #12
 80002de:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80002e0:	2302      	movs	r3, #2
 80002e2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80002e4:	2301      	movs	r3, #1
 80002e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80002e8:	2303      	movs	r3, #3
 80002ea:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002ec:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80002ee:	2307      	movs	r3, #7
 80002f0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002f2:	f000 ffcb 	bl	800128c <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_usart2_rx.Instance = DMA1_Stream5;
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80002f6:	4b22      	ldr	r3, [pc, #136]	; (8000380 <HAL_UART_MspInit+0xd0>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80002f8:	60a5      	str	r5, [r4, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_usart2_rx.Instance = DMA1_Stream5;
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80002fa:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 80002fe:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000306:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000308:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800030a:	f44f 7380 	mov.w	r3, #256	; 0x100
    /* Peripheral DMA init*/
  
    hdma_usart2_rx.Instance = DMA1_Stream5;
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800030e:	60e5      	str	r5, [r4, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000310:	6165      	str	r5, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000312:	61a5      	str	r5, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000314:	61e3      	str	r3, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000316:	6225      	str	r5, [r4, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000318:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800031a:	f001 f8bb 	bl	8001494 <HAL_DMA_Init>
 800031e:	b108      	cbz	r0, 8000324 <HAL_UART_MspInit+0x74>
    {
      Error_Handler();
 8000320:	f000 f990 	bl	8000644 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000324:	6374      	str	r4, [r6, #52]	; 0x34

    hdma_usart2_tx.Instance = DMA1_Stream6;
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000326:	4b17      	ldr	r3, [pc, #92]	; (8000384 <HAL_UART_MspInit+0xd4>)
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000328:	63a6      	str	r6, [r4, #56]	; 0x38

    hdma_usart2_tx.Instance = DMA1_Stream6;
 800032a:	4c17      	ldr	r4, [pc, #92]	; (8000388 <HAL_UART_MspInit+0xd8>)
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800032c:	f44f 6280 	mov.w	r2, #1024	; 0x400

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);

    hdma_usart2_tx.Instance = DMA1_Stream6;
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000330:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 8000334:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8000338:	e884 4028 	stmia.w	r4, {r3, r5, lr}
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800033c:	6122      	str	r2, [r4, #16]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);

    hdma_usart2_tx.Instance = DMA1_Stream6;
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800033e:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8000340:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000344:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);

    hdma_usart2_tx.Instance = DMA1_Stream6;
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000346:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000348:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800034a:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 800034c:	61e2      	str	r2, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800034e:	6223      	str	r3, [r4, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000350:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000352:	f001 f89f 	bl	8001494 <HAL_DMA_Init>
 8000356:	b108      	cbz	r0, 800035c <HAL_UART_MspInit+0xac>
    {
      Error_Handler();
 8000358:	f000 f974 	bl	8000644 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800035c:	2200      	movs	r2, #0
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800035e:	6334      	str	r4, [r6, #48]	; 0x30

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000360:	2026      	movs	r0, #38	; 0x26
 8000362:	4611      	mov	r1, r2
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000364:	63a6      	str	r6, [r4, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000366:	f001 fa2d 	bl	80017c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800036a:	2026      	movs	r0, #38	; 0x26
 800036c:	f001 fa5e 	bl	800182c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000370:	b006      	add	sp, #24
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	40004400 	.word	0x40004400
 8000378:	40020000 	.word	0x40020000
 800037c:	20000028 	.word	0x20000028
 8000380:	40026088 	.word	0x40026088
 8000384:	400260a0 	.word	0x400260a0
 8000388:	200000a4 	.word	0x200000a4

0800038c <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	b095      	sub	sp, #84	; 0x54

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000390:	2200      	movs	r2, #0
 8000392:	4b27      	ldr	r3, [pc, #156]	; (8000430 <SystemClock_Config+0xa4>)
 8000394:	9200      	str	r2, [sp, #0]
 8000396:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8000398:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800039c:	6419      	str	r1, [r3, #64]	; 0x40
 800039e:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80003a0:	4924      	ldr	r1, [pc, #144]	; (8000434 <SystemClock_Config+0xa8>)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80003a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003a6:	9300      	str	r3, [sp, #0]
 80003a8:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80003aa:	9201      	str	r2, [sp, #4]
 80003ac:	680b      	ldr	r3, [r1, #0]
 80003ae:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80003b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003b6:	600b      	str	r3, [r1, #0]
 80003b8:	680b      	ldr	r3, [r1, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003ba:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80003bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80003c0:	9301      	str	r3, [sp, #4]
 80003c2:	9b01      	ldr	r3, [sp, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003c4:	2301      	movs	r3, #1
 80003c6:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80003c8:	2310      	movs	r3, #16

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ca:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80003cc:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
 80003ce:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80003d0:	2504      	movs	r5, #4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
 80003d2:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d6:	a807      	add	r0, sp, #28

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003d8:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003da:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
 80003dc:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80003de:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80003e0:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80003e2:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e4:	f000 fc7e 	bl	8000ce4 <HAL_RCC_OscConfig>
 80003e8:	b100      	cbz	r0, 80003ec <SystemClock_Config+0x60>
 80003ea:	e7fe      	b.n	80003ea <SystemClock_Config+0x5e>
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ec:	230f      	movs	r3, #15
 80003ee:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f0:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003f6:	4621      	mov	r1, r4
 80003f8:	a802      	add	r0, sp, #8
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003fa:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003fc:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80003fe:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000400:	f000 fe5a 	bl	80010b8 <HAL_RCC_ClockConfig>
 8000404:	4604      	mov	r4, r0
 8000406:	b100      	cbz	r0, 800040a <SystemClock_Config+0x7e>
 8000408:	e7fe      	b.n	8000408 <SystemClock_Config+0x7c>
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800040a:	f000 ff09 	bl	8001220 <HAL_RCC_GetHCLKFreq>
 800040e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000412:	fbb0 f0f3 	udiv	r0, r0, r3
 8000416:	f001 fa15 	bl	8001844 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800041a:	4628      	mov	r0, r5
 800041c:	f001 fa28 	bl	8001870 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8000420:	4622      	mov	r2, r4
 8000422:	4621      	mov	r1, r4
 8000424:	f04f 30ff 	mov.w	r0, #4294967295
 8000428:	f001 f9cc 	bl	80017c4 <HAL_NVIC_SetPriority>
}
 800042c:	b015      	add	sp, #84	; 0x54
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	40023800 	.word	0x40023800
 8000434:	40007000 	.word	0x40007000

08000438 <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 8000438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800043a:	b08b      	sub	sp, #44	; 0x2c
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800043c:	2400      	movs	r4, #0
 800043e:	4d43      	ldr	r5, [pc, #268]	; (800054c <main+0x114>)
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000440:	f001 fa3c 	bl	80018bc <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000444:	f7ff ffa2 	bl	800038c <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000448:	9401      	str	r4, [sp, #4]
 800044a:	6b2b      	ldr	r3, [r5, #48]	; 0x30

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800044c:	4840      	ldr	r0, [pc, #256]	; (8000550 <main+0x118>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800044e:	f043 0304 	orr.w	r3, r3, #4
 8000452:	632b      	str	r3, [r5, #48]	; 0x30
 8000454:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000456:	f003 0304 	and.w	r3, r3, #4
 800045a:	9301      	str	r3, [sp, #4]
 800045c:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800045e:	9402      	str	r4, [sp, #8]
 8000460:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000466:	632b      	str	r3, [r5, #48]	; 0x30
 8000468:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800046a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800046e:	9302      	str	r3, [sp, #8]
 8000470:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000472:	9403      	str	r4, [sp, #12]
 8000474:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000476:	f043 0301 	orr.w	r3, r3, #1
 800047a:	632b      	str	r3, [r5, #48]	; 0x30
 800047c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800047e:	f003 0301 	and.w	r3, r3, #1
 8000482:	9303      	str	r3, [sp, #12]
 8000484:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000486:	9404      	str	r4, [sp, #16]
 8000488:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800048a:	f043 0302 	orr.w	r3, r3, #2
 800048e:	632b      	str	r3, [r5, #48]	; 0x30
 8000490:	6b2b      	ldr	r3, [r5, #48]	; 0x30

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000492:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000494:	f003 0302 	and.w	r3, r3, #2
 8000498:	9304      	str	r3, [sp, #16]
 800049a:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800049c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004a0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004a2:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004a4:	4b2b      	ldr	r3, [pc, #172]	; (8000554 <main+0x11c>)
 80004a6:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004a8:	2720      	movs	r7, #32

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004aa:	f000 feef 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ae:	2601      	movs	r6, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004b0:	a905      	add	r1, sp, #20
 80004b2:	4829      	ldr	r0, [pc, #164]	; (8000558 <main+0x120>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004b4:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004b6:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b8:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ba:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80004bc:	f000 fee6 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004c0:	4622      	mov	r2, r4
 80004c2:	4639      	mov	r1, r7
 80004c4:	4824      	ldr	r0, [pc, #144]	; (8000558 <main+0x120>)
 80004c6:	f000 ffbb 	bl	8001440 <HAL_GPIO_WritePin>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80004ca:	4622      	mov	r2, r4
 80004cc:	4621      	mov	r1, r4
 80004ce:	2028      	movs	r0, #40	; 0x28
 80004d0:	f001 f978 	bl	80017c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004d4:	2028      	movs	r0, #40	; 0x28
 80004d6:	f001 f9a9 	bl	800182c <HAL_NVIC_EnableIRQ>
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004da:	9405      	str	r4, [sp, #20]
 80004dc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80004de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004e2:	632b      	str	r3, [r5, #48]	; 0x30
 80004e4:	6b2b      	ldr	r3, [r5, #48]	; 0x30

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 80004e6:	4d1d      	ldr	r5, [pc, #116]	; (800055c <main+0x124>)
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80004ec:	4622      	mov	r2, r4
 80004ee:	4621      	mov	r1, r4
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004f0:	9305      	str	r3, [sp, #20]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80004f2:	2010      	movs	r0, #16
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004f4:	9b05      	ldr	r3, [sp, #20]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80004f6:	f001 f965 	bl	80017c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80004fa:	2010      	movs	r0, #16
 80004fc:	f001 f996 	bl	800182c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000500:	4622      	mov	r2, r4
 8000502:	4621      	mov	r1, r4
 8000504:	2011      	movs	r0, #17
 8000506:	f001 f95d 	bl	80017c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800050a:	2011      	movs	r0, #17
 800050c:	f001 f98e 	bl	800182c <HAL_NVIC_EnableIRQ>
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8000510:	4a13      	ldr	r2, [pc, #76]	; (8000560 <main+0x128>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000512:	60ac      	str	r4, [r5, #8]
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8000514:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000518:	e885 000c 	stmia.w	r5, {r2, r3}
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800051c:	4628      	mov	r0, r5
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800051e:	230c      	movs	r3, #12
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000520:	60ec      	str	r4, [r5, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000522:	612c      	str	r4, [r5, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000524:	616b      	str	r3, [r5, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000526:	61ac      	str	r4, [r5, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000528:	61ec      	str	r4, [r5, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800052a:	f000 f9df 	bl	80008ec <HAL_UART_Init>
 800052e:	b100      	cbz	r0, 8000532 <main+0xfa>
 8000530:	e7fe      	b.n	8000530 <main+0xf8>
  MX_USART2_UART_Init();

  /* USER CODE BEGIN 2 */
  char *msg = "Nucleo-64 ISR-UART-DMA Fun!\n\r";

   HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 0xFFFF);
 8000532:	221d      	movs	r2, #29
 8000534:	490b      	ldr	r1, [pc, #44]	; (8000564 <main+0x12c>)
 8000536:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800053a:	4628      	mov	r0, r5
 800053c:	f000 fa04 	bl	8000948 <HAL_UART_Transmit>

   HAL_UART_Receive_DMA(&huart2, &rxBuffer, 1);
 8000540:	4632      	mov	r2, r6
 8000542:	4909      	ldr	r1, [pc, #36]	; (8000568 <main+0x130>)
 8000544:	4628      	mov	r0, r5
 8000546:	f000 fa5b 	bl	8000a00 <HAL_UART_Receive_DMA>
 800054a:	e7fe      	b.n	800054a <main+0x112>
 800054c:	40023800 	.word	0x40023800
 8000550:	40020800 	.word	0x40020800
 8000554:	10110000 	.word	0x10110000
 8000558:	40020000 	.word	0x40020000
 800055c:	20000104 	.word	0x20000104
 8000560:	40004400 	.word	0x40004400
 8000564:	08001a10 	.word	0x08001a10
 8000568:	20000020 	.word	0x20000020

0800056c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
// ISR
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){

 if(GPIO_Pin == B1_Pin){
 800056c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000570:	d103      	bne.n	800057a <HAL_GPIO_EXTI_Callback+0xe>
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000572:	2120      	movs	r1, #32
 8000574:	4801      	ldr	r0, [pc, #4]	; (800057c <HAL_GPIO_EXTI_Callback+0x10>)
 8000576:	f000 bf67 	b.w	8001448 <HAL_GPIO_TogglePin>
 800057a:	4770      	bx	lr
 800057c:	40020000 	.word	0x40020000

08000580 <print>:
 }
}

//USART
void print(char string[MAXSTRING])
{
 8000580:	b510      	push	{r4, lr}
 8000582:	4604      	mov	r4, r0
	HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string),  0xFFFF);
 8000584:	f7ff fe3e 	bl	8000204 <strlen>
 8000588:	4621      	mov	r1, r4
 800058a:	b282      	uxth	r2, r0
 800058c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000590:	4802      	ldr	r0, [pc, #8]	; (800059c <print+0x1c>)
}
 8000592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

//USART
void print(char string[MAXSTRING])
{
	HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string),  0xFFFF);
 8000596:	f000 b9d7 	b.w	8000948 <HAL_UART_Transmit>
 800059a:	bf00      	nop
 800059c:	20000104 	.word	0x20000104

080005a0 <HAL_UART_RxCpltCallback>:
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005a0:	b570      	push	{r4, r5, r6, lr}
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80005a2:	2120      	movs	r1, #32
 80005a4:	4820      	ldr	r0, [pc, #128]	; (8000628 <HAL_UART_RxCpltCallback+0x88>)
	__HAL_UART_FLUSH_DRREGISTER(&huart2); // Clear the buffer to prevent overrun
//__HAL_UART_SEND_REQ(&huart2, UART_RXDATA_FLUSH_REQUEST); // Clear the buffer to prevent overrun
//__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_OREF);


  HAL_UART_Transmit(&huart2, (uint8_t*)&rxBuffer, 1, 0xFFFF); //echo
 80005a6:	4c21      	ldr	r4, [pc, #132]	; (800062c <HAL_UART_RxCpltCallback+0x8c>)
 80005a8:	4d21      	ldr	r5, [pc, #132]	; (8000630 <HAL_UART_RxCpltCallback+0x90>)
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80005aa:	f000 ff4d 	bl	8001448 <HAL_GPIO_TogglePin>

	__HAL_UART_FLUSH_DRREGISTER(&huart2); // Clear the buffer to prevent overrun
 80005ae:	4821      	ldr	r0, [pc, #132]	; (8000634 <HAL_UART_RxCpltCallback+0x94>)
 80005b0:	6803      	ldr	r3, [r0, #0]
//__HAL_UART_SEND_REQ(&huart2, UART_RXDATA_FLUSH_REQUEST); // Clear the buffer to prevent overrun
//__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_OREF);


  HAL_UART_Transmit(&huart2, (uint8_t*)&rxBuffer, 1, 0xFFFF); //echo
 80005b2:	2201      	movs	r2, #1

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

	__HAL_UART_FLUSH_DRREGISTER(&huart2); // Clear the buffer to prevent overrun
 80005b4:	685b      	ldr	r3, [r3, #4]
//__HAL_UART_SEND_REQ(&huart2, UART_RXDATA_FLUSH_REQUEST); // Clear the buffer to prevent overrun
//__HAL_UART_CLEAR_IT(&huart2, UART_CLEAR_OREF);


  HAL_UART_Transmit(&huart2, (uint8_t*)&rxBuffer, 1, 0xFFFF); //echo
 80005b6:	4621      	mov	r1, r4
 80005b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005bc:	f000 f9c4 	bl	8000948 <HAL_UART_Transmit>


  if (rxBuffer == 8 || rxBuffer == 127) // If Backspace or del
 80005c0:	7822      	ldrb	r2, [r4, #0]
 80005c2:	2a08      	cmp	r2, #8
 80005c4:	d001      	beq.n	80005ca <HAL_UART_RxCpltCallback+0x2a>
 80005c6:	2a7f      	cmp	r2, #127	; 0x7f
 80005c8:	d109      	bne.n	80005de <HAL_UART_RxCpltCallback+0x3e>
    {
      print(" \b"); // "\b space \b" clears the terminal character. Remember we just echoced a \b so don't need another one here, just space and \b
 80005ca:	481b      	ldr	r0, [pc, #108]	; (8000638 <HAL_UART_RxCpltCallback+0x98>)
 80005cc:	f7ff ffd8 	bl	8000580 <print>
      rxindex--;
 80005d0:	682b      	ldr	r3, [r5, #0]
 80005d2:	4a17      	ldr	r2, [pc, #92]	; (8000630 <HAL_UART_RxCpltCallback+0x90>)
      if (rxindex < 0) rxindex = 0;
 80005d4:	3b01      	subs	r3, #1
 80005d6:	bf48      	it	mi
 80005d8:	2300      	movmi	r3, #0
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	bd70      	pop	{r4, r5, r6, pc}
    }

  else if (rxBuffer == '\n' || rxBuffer == '\r') // If Enter
 80005de:	2a0a      	cmp	r2, #10
    {
//      executeSerialCommand(rxString);
      rxString[rxindex] = 0;
 80005e0:	682b      	ldr	r3, [r5, #0]
 80005e2:	4e16      	ldr	r6, [pc, #88]	; (800063c <HAL_UART_RxCpltCallback+0x9c>)
      print(" \b"); // "\b space \b" clears the terminal character. Remember we just echoced a \b so don't need another one here, just space and \b
      rxindex--;
      if (rxindex < 0) rxindex = 0;
    }

  else if (rxBuffer == '\n' || rxBuffer == '\r') // If Enter
 80005e4:	d001      	beq.n	80005ea <HAL_UART_RxCpltCallback+0x4a>
 80005e6:	2a0d      	cmp	r2, #13
 80005e8:	d10f      	bne.n	800060a <HAL_UART_RxCpltCallback+0x6a>
    {
//      executeSerialCommand(rxString);
      rxString[rxindex] = 0;
 80005ea:	2400      	movs	r4, #0
      rxindex = 0;

      print("\n\r");
 80005ec:	4814      	ldr	r0, [pc, #80]	; (8000640 <HAL_UART_RxCpltCallback+0xa0>)
    }

  else if (rxBuffer == '\n' || rxBuffer == '\r') // If Enter
    {
//      executeSerialCommand(rxString);
      rxString[rxindex] = 0;
 80005ee:	54f4      	strb	r4, [r6, r3]
      rxindex = 0;
 80005f0:	602c      	str	r4, [r5, #0]

      print("\n\r");
 80005f2:	f7ff ffc5 	bl	8000580 <print>
      print(rxString);
 80005f6:	4811      	ldr	r0, [pc, #68]	; (800063c <HAL_UART_RxCpltCallback+0x9c>)
 80005f8:	f7ff ffc2 	bl	8000580 <print>

      for (int i = 0; i < MAXSTRING; i++) rxString[i] = 0; // Clear the string buffer
 80005fc:	4623      	mov	r3, r4
 80005fe:	4622      	mov	r2, r4
 8000600:	54f2      	strb	r2, [r6, r3]
 8000602:	3301      	adds	r3, #1
 8000604:	2b1b      	cmp	r3, #27
 8000606:	d1fb      	bne.n	8000600 <HAL_UART_RxCpltCallback+0x60>
 8000608:	bd70      	pop	{r4, r5, r6, pc}
    }

  else
    {
      rxString[rxindex] = rxBuffer; // Add that character to the string
 800060a:	54f2      	strb	r2, [r6, r3]
      rxindex++;
 800060c:	3301      	adds	r3, #1
      if (rxindex > MAXSTRING) // User typing too much, we can't have commands that big
 800060e:	2b1b      	cmp	r3, #27
 8000610:	dc01      	bgt.n	8000616 <HAL_UART_RxCpltCallback+0x76>
    }

  else
    {
      rxString[rxindex] = rxBuffer; // Add that character to the string
      rxindex++;
 8000612:	602b      	str	r3, [r5, #0]
 8000614:	bd70      	pop	{r4, r5, r6, pc}
      if (rxindex > MAXSTRING) // User typing too much, we can't have commands that big
    {
      rxindex = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	602b      	str	r3, [r5, #0]
      for (int i = 0; i < MAXSTRING; i++) rxString[i] = 0; // Clear the string buffer
 800061a:	461a      	mov	r2, r3
 800061c:	54f2      	strb	r2, [r6, r3]
 800061e:	3301      	adds	r3, #1
 8000620:	2b1b      	cmp	r3, #27
 8000622:	d1fb      	bne.n	800061c <HAL_UART_RxCpltCallback+0x7c>
 8000624:	bd70      	pop	{r4, r5, r6, pc}
 8000626:	bf00      	nop
 8000628:	40020000 	.word	0x40020000
 800062c:	20000020 	.word	0x20000020
 8000630:	20000024 	.word	0x20000024
 8000634:	20000104 	.word	0x20000104
 8000638:	08001a2e 	.word	0x08001a2e
 800063c:	20000088 	.word	0x20000088
 8000640:	08001a2b 	.word	0x08001a2b

08000644 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 8000644:	e7fe      	b.n	8000644 <Error_Handler>

08000646 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000646:	6803      	ldr	r3, [r0, #0]
 8000648:	68da      	ldr	r2, [r3, #12]
 800064a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800064e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000650:	695a      	ldr	r2, [r3, #20]
 8000652:	f022 0201 	bic.w	r2, r2, #1
 8000656:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000658:	2320      	movs	r3, #32
 800065a:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 800065e:	4770      	bx	lr

08000660 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8000664:	6807      	ldr	r7, [r0, #0]
 8000666:	693b      	ldr	r3, [r7, #16]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000668:	4604      	mov	r4, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800066a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 800066e:	68c3      	ldr	r3, [r0, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000670:	68a1      	ldr	r1, [r4, #8]
 8000672:	69c0      	ldr	r0, [r0, #28]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8000674:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000676:	6922      	ldr	r2, [r4, #16]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8000678:	613b      	str	r3, [r7, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800067a:	68fb      	ldr	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800067c:	4311      	orrs	r1, r2
 800067e:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000680:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000684:	430a      	orrs	r2, r1
 8000686:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8000688:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800068c:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800068e:	60fb      	str	r3, [r7, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8000690:	697b      	ldr	r3, [r7, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8000692:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8000696:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000698:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 800069c:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80006a0:	617b      	str	r3, [r7, #20]
 80006a2:	4b7c      	ldr	r3, [pc, #496]	; (8000894 <UART_SetConfig+0x234>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80006a4:	d17c      	bne.n	80007a0 <UART_SetConfig+0x140>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80006a6:	429f      	cmp	r7, r3
 80006a8:	d003      	beq.n	80006b2 <UART_SetConfig+0x52>
 80006aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80006ae:	429f      	cmp	r7, r3
 80006b0:	d131      	bne.n	8000716 <UART_SetConfig+0xb6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80006b2:	f000 fdd3 	bl	800125c <HAL_RCC_GetPCLK2Freq>
 80006b6:	6863      	ldr	r3, [r4, #4]
 80006b8:	2519      	movs	r5, #25
 80006ba:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80006be:	4368      	muls	r0, r5
 80006c0:	fbb0 f8f8 	udiv	r8, r0, r8
 80006c4:	f000 fdca 	bl	800125c <HAL_RCC_GetPCLK2Freq>
 80006c8:	6866      	ldr	r6, [r4, #4]
 80006ca:	4368      	muls	r0, r5
 80006cc:	0076      	lsls	r6, r6, #1
 80006ce:	fbb0 f6f6 	udiv	r6, r0, r6
 80006d2:	f000 fdc3 	bl	800125c <HAL_RCC_GetPCLK2Freq>
 80006d6:	6863      	ldr	r3, [r4, #4]
 80006d8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80006dc:	005b      	lsls	r3, r3, #1
 80006de:	4368      	muls	r0, r5
 80006e0:	fbb0 f0f3 	udiv	r0, r0, r3
 80006e4:	fbb0 f0f9 	udiv	r0, r0, r9
 80006e8:	fb09 6610 	mls	r6, r9, r0, r6
 80006ec:	f000 fdb6 	bl	800125c <HAL_RCC_GetPCLK2Freq>
 80006f0:	fbb8 f8f9 	udiv	r8, r8, r9
 80006f4:	6861      	ldr	r1, [r4, #4]
 80006f6:	00f6      	lsls	r6, r6, #3
 80006f8:	3632      	adds	r6, #50	; 0x32
 80006fa:	fbb6 f6f9 	udiv	r6, r6, r9
 80006fe:	0076      	lsls	r6, r6, #1
 8000700:	4368      	muls	r0, r5
 8000702:	0049      	lsls	r1, r1, #1
 8000704:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8000708:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 800070c:	fbb0 faf1 	udiv	sl, r0, r1
 8000710:	f000 fda4 	bl	800125c <HAL_RCC_GetPCLK2Freq>
 8000714:	e030      	b.n	8000778 <UART_SetConfig+0x118>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8000716:	f000 fd89 	bl	800122c <HAL_RCC_GetPCLK1Freq>
 800071a:	6863      	ldr	r3, [r4, #4]
 800071c:	2519      	movs	r5, #25
 800071e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8000722:	4368      	muls	r0, r5
 8000724:	fbb0 f8f8 	udiv	r8, r0, r8
 8000728:	f000 fd80 	bl	800122c <HAL_RCC_GetPCLK1Freq>
 800072c:	6866      	ldr	r6, [r4, #4]
 800072e:	4368      	muls	r0, r5
 8000730:	0076      	lsls	r6, r6, #1
 8000732:	fbb0 f6f6 	udiv	r6, r0, r6
 8000736:	f000 fd79 	bl	800122c <HAL_RCC_GetPCLK1Freq>
 800073a:	6863      	ldr	r3, [r4, #4]
 800073c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	4368      	muls	r0, r5
 8000744:	fbb0 f0f3 	udiv	r0, r0, r3
 8000748:	fbb0 f0f9 	udiv	r0, r0, r9
 800074c:	fb09 6610 	mls	r6, r9, r0, r6
 8000750:	f000 fd6c 	bl	800122c <HAL_RCC_GetPCLK1Freq>
 8000754:	fbb8 f8f9 	udiv	r8, r8, r9
 8000758:	00f6      	lsls	r6, r6, #3
 800075a:	6861      	ldr	r1, [r4, #4]
 800075c:	3632      	adds	r6, #50	; 0x32
 800075e:	fbb6 f6f9 	udiv	r6, r6, r9
 8000762:	0076      	lsls	r6, r6, #1
 8000764:	4368      	muls	r0, r5
 8000766:	0049      	lsls	r1, r1, #1
 8000768:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800076c:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8000770:	fbb0 faf1 	udiv	sl, r0, r1
 8000774:	f000 fd5a 	bl	800122c <HAL_RCC_GetPCLK1Freq>
 8000778:	4345      	muls	r5, r0
 800077a:	6860      	ldr	r0, [r4, #4]
 800077c:	0040      	lsls	r0, r0, #1
 800077e:	fbb5 f0f0 	udiv	r0, r5, r0
 8000782:	fbb0 f0f9 	udiv	r0, r0, r9
 8000786:	fb09 a210 	mls	r2, r9, r0, sl
 800078a:	00d2      	lsls	r2, r2, #3
 800078c:	3232      	adds	r2, #50	; 0x32
 800078e:	fbb2 f3f9 	udiv	r3, r2, r9
 8000792:	f003 0307 	and.w	r3, r3, #7
 8000796:	4443      	add	r3, r8
 8000798:	441e      	add	r6, r3
 800079a:	60be      	str	r6, [r7, #8]
 800079c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80007a0:	429f      	cmp	r7, r3
 80007a2:	d002      	beq.n	80007aa <UART_SetConfig+0x14a>
 80007a4:	4b3c      	ldr	r3, [pc, #240]	; (8000898 <UART_SetConfig+0x238>)
 80007a6:	429f      	cmp	r7, r3
 80007a8:	d130      	bne.n	800080c <UART_SetConfig+0x1ac>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80007aa:	f000 fd57 	bl	800125c <HAL_RCC_GetPCLK2Freq>
 80007ae:	6863      	ldr	r3, [r4, #4]
 80007b0:	2519      	movs	r5, #25
 80007b2:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80007b6:	4368      	muls	r0, r5
 80007b8:	fbb0 f8f8 	udiv	r8, r0, r8
 80007bc:	f000 fd4e 	bl	800125c <HAL_RCC_GetPCLK2Freq>
 80007c0:	6866      	ldr	r6, [r4, #4]
 80007c2:	4368      	muls	r0, r5
 80007c4:	00b6      	lsls	r6, r6, #2
 80007c6:	fbb0 f6f6 	udiv	r6, r0, r6
 80007ca:	f000 fd47 	bl	800125c <HAL_RCC_GetPCLK2Freq>
 80007ce:	6863      	ldr	r3, [r4, #4]
 80007d0:	f04f 0964 	mov.w	r9, #100	; 0x64
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	4368      	muls	r0, r5
 80007d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80007dc:	fbb0 f0f9 	udiv	r0, r0, r9
 80007e0:	fb09 6610 	mls	r6, r9, r0, r6
 80007e4:	f000 fd3a 	bl	800125c <HAL_RCC_GetPCLK2Freq>
 80007e8:	fbb8 f8f9 	udiv	r8, r8, r9
 80007ec:	6861      	ldr	r1, [r4, #4]
 80007ee:	0136      	lsls	r6, r6, #4
 80007f0:	4368      	muls	r0, r5
 80007f2:	0089      	lsls	r1, r1, #2
 80007f4:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80007f8:	3632      	adds	r6, #50	; 0x32
 80007fa:	fbb0 faf1 	udiv	sl, r0, r1
 80007fe:	fbb6 f6f9 	udiv	r6, r6, r9
 8000802:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8000806:	f000 fd29 	bl	800125c <HAL_RCC_GetPCLK2Freq>
 800080a:	e02f      	b.n	800086c <UART_SetConfig+0x20c>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800080c:	f000 fd0e 	bl	800122c <HAL_RCC_GetPCLK1Freq>
 8000810:	6863      	ldr	r3, [r4, #4]
 8000812:	2519      	movs	r5, #25
 8000814:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8000818:	4368      	muls	r0, r5
 800081a:	fbb0 f8f8 	udiv	r8, r0, r8
 800081e:	f000 fd05 	bl	800122c <HAL_RCC_GetPCLK1Freq>
 8000822:	6866      	ldr	r6, [r4, #4]
 8000824:	4368      	muls	r0, r5
 8000826:	00b6      	lsls	r6, r6, #2
 8000828:	fbb0 f6f6 	udiv	r6, r0, r6
 800082c:	f000 fcfe 	bl	800122c <HAL_RCC_GetPCLK1Freq>
 8000830:	6863      	ldr	r3, [r4, #4]
 8000832:	f04f 0964 	mov.w	r9, #100	; 0x64
 8000836:	009b      	lsls	r3, r3, #2
 8000838:	4368      	muls	r0, r5
 800083a:	fbb0 f0f3 	udiv	r0, r0, r3
 800083e:	fbb0 f0f9 	udiv	r0, r0, r9
 8000842:	fb09 6610 	mls	r6, r9, r0, r6
 8000846:	f000 fcf1 	bl	800122c <HAL_RCC_GetPCLK1Freq>
 800084a:	fbb8 f8f9 	udiv	r8, r8, r9
 800084e:	6861      	ldr	r1, [r4, #4]
 8000850:	0136      	lsls	r6, r6, #4
 8000852:	3632      	adds	r6, #50	; 0x32
 8000854:	4368      	muls	r0, r5
 8000856:	fbb6 f6f9 	udiv	r6, r6, r9
 800085a:	0089      	lsls	r1, r1, #2
 800085c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8000860:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8000864:	fbb0 faf1 	udiv	sl, r0, r1
 8000868:	f000 fce0 	bl	800122c <HAL_RCC_GetPCLK1Freq>
 800086c:	4345      	muls	r5, r0
 800086e:	6860      	ldr	r0, [r4, #4]
 8000870:	0080      	lsls	r0, r0, #2
 8000872:	fbb5 f0f0 	udiv	r0, r5, r0
 8000876:	fbb0 f0f9 	udiv	r0, r0, r9
 800087a:	fb09 a210 	mls	r2, r9, r0, sl
 800087e:	0112      	lsls	r2, r2, #4
 8000880:	3232      	adds	r2, #50	; 0x32
 8000882:	fbb2 f3f9 	udiv	r3, r2, r9
 8000886:	f003 030f 	and.w	r3, r3, #15
 800088a:	4433      	add	r3, r6
 800088c:	4443      	add	r3, r8
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000894:	40011000 	.word	0x40011000
 8000898:	40011400 	.word	0x40011400

0800089c <UART_WaitOnFlagUntilTimeout.constprop.3>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Tickstart Tick start value
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 800089c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800089e:	4604      	mov	r4, r0
 80008a0:	460e      	mov	r6, r1
 80008a2:	4617      	mov	r7, r2
 80008a4:	461d      	mov	r5, r3
{
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80008a6:	6821      	ldr	r1, [r4, #0]
 80008a8:	680b      	ldr	r3, [r1, #0]
 80008aa:	ea36 0303 	bics.w	r3, r6, r3
 80008ae:	d01b      	beq.n	80008e8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x4c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80008b0:	1c6b      	adds	r3, r5, #1
 80008b2:	d0f9      	beq.n	80008a8 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80008b4:	b995      	cbnz	r5, 80008dc <UART_WaitOnFlagUntilTimeout.constprop.3+0x40>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80008b6:	6823      	ldr	r3, [r4, #0]
 80008b8:	68da      	ldr	r2, [r3, #12]
 80008ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80008be:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80008c0:	695a      	ldr	r2, [r3, #20]
 80008c2:	f022 0201 	bic.w	r2, r2, #1
 80008c6:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 80008c8:	2320      	movs	r3, #32
 80008ca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80008ce:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80008d2:	2300      	movs	r3, #0
 80008d4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80008d8:	2003      	movs	r0, #3
 80008da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80008dc:	f001 f810 	bl	8001900 <HAL_GetTick>
 80008e0:	1bc0      	subs	r0, r0, r7
 80008e2:	4285      	cmp	r5, r0
 80008e4:	d2df      	bcs.n	80008a6 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80008e6:	e7e6      	b.n	80008b6 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1a>
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;
 80008e8:	2000      	movs	r0, #0
}
 80008ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080008ec <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80008ec:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 80008ee:	4604      	mov	r4, r0
 80008f0:	b340      	cbz	r0, 8000944 <HAL_UART_Init+0x58>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80008f2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80008f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80008fa:	b91b      	cbnz	r3, 8000904 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80008fc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8000900:	f7ff fcd6 	bl	80002b0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8000904:	6822      	ldr	r2, [r4, #0]
    huart->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000906:	2324      	movs	r3, #36	; 0x24
 8000908:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800090c:	68d3      	ldr	r3, [r2, #12]
 800090e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000912:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8000914:	4620      	mov	r0, r4
 8000916:	f7ff fea3 	bl	8000660 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800091a:	6823      	ldr	r3, [r4, #0]
 800091c:	691a      	ldr	r2, [r3, #16]
 800091e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000922:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000924:	695a      	ldr	r2, [r3, #20]
 8000926:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800092a:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800092c:	68da      	ldr	r2, [r3, #12]
 800092e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000932:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000934:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8000936:	2320      	movs	r3, #32
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000938:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800093a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800093e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 8000942:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8000944:	2001      	movs	r0, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 8000946:	bd10      	pop	{r4, pc}

08000948 <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800094c:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 800094e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000952:	2b20      	cmp	r3, #32
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000954:	4604      	mov	r4, r0
 8000956:	460d      	mov	r5, r1
 8000958:	4690      	mov	r8, r2
  uint16_t* tmp;
  uint32_t tickstart = 0U;
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 800095a:	d14d      	bne.n	80009f8 <HAL_UART_Transmit+0xb0>
  {
    if((pData == NULL ) || (Size == 0U)) 
 800095c:	2900      	cmp	r1, #0
 800095e:	d048      	beq.n	80009f2 <HAL_UART_Transmit+0xaa>
 8000960:	2a00      	cmp	r2, #0
 8000962:	d046      	beq.n	80009f2 <HAL_UART_Transmit+0xaa>
    {
      return  HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8000964:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8000968:	2b01      	cmp	r3, #1
 800096a:	d045      	beq.n	80009f8 <HAL_UART_Transmit+0xb0>
 800096c:	2301      	movs	r3, #1
 800096e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000972:	2300      	movs	r3, #0
 8000974:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000976:	2321      	movs	r3, #33	; 0x21
 8000978:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800097c:	f000 ffc0 	bl	8001900 <HAL_GetTick>

    huart->TxXferSize = Size;
 8000980:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8000984:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
 8000986:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800098a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800098c:	b313      	cbz	r3, 80009d4 <HAL_UART_Transmit+0x8c>
    {
      huart->TxXferCount--;
 800098e:	3b01      	subs	r3, #1
 8000990:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000992:	68a3      	ldr	r3, [r4, #8]
 8000994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000998:	4632      	mov	r2, r6
 800099a:	463b      	mov	r3, r7
 800099c:	f04f 0180 	mov.w	r1, #128	; 0x80
 80009a0:	4620      	mov	r0, r4
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80009a2:	d10e      	bne.n	80009c2 <HAL_UART_Transmit+0x7a>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80009a4:	f7ff ff7a 	bl	800089c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80009a8:	b110      	cbz	r0, 80009b0 <HAL_UART_Transmit+0x68>
        { 
          return HAL_TIMEOUT;
 80009aa:	2003      	movs	r0, #3
 80009ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
        tmp = (uint16_t*) pData;
        huart->Instance->DR = (*tmp & (uint16_t)0x01FFU);
 80009b0:	882b      	ldrh	r3, [r5, #0]
 80009b2:	6822      	ldr	r2, [r4, #0]
 80009b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009b8:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80009ba:	6923      	ldr	r3, [r4, #16]
 80009bc:	b943      	cbnz	r3, 80009d0 <HAL_UART_Transmit+0x88>
        {
          pData +=2U;
 80009be:	3502      	adds	r5, #2
 80009c0:	e7e3      	b.n	800098a <HAL_UART_Transmit+0x42>
          pData +=1U;
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80009c2:	f7ff ff6b 	bl	800089c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80009c6:	2800      	cmp	r0, #0
 80009c8:	d1ef      	bne.n	80009aa <HAL_UART_Transmit+0x62>
        {
          return HAL_TIMEOUT;
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFFU);
 80009ca:	6823      	ldr	r3, [r4, #0]
 80009cc:	782a      	ldrb	r2, [r5, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	3501      	adds	r5, #1
 80009d2:	e7da      	b.n	800098a <HAL_UART_Transmit+0x42>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80009d4:	463b      	mov	r3, r7
 80009d6:	4632      	mov	r2, r6
 80009d8:	2140      	movs	r1, #64	; 0x40
 80009da:	4620      	mov	r0, r4
 80009dc:	f7ff ff5e 	bl	800089c <UART_WaitOnFlagUntilTimeout.constprop.3>
 80009e0:	2800      	cmp	r0, #0
 80009e2:	d1e2      	bne.n	80009aa <HAL_UART_Transmit+0x62>
    { 
      return HAL_TIMEOUT;
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 80009e4:	2320      	movs	r3, #32
 80009e6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80009ea:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    
    return HAL_OK;
 80009ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
  {
    if((pData == NULL ) || (Size == 0U)) 
    {
      return  HAL_ERROR;
 80009f2:	2001      	movs	r0, #1
 80009f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80009f8:	2002      	movs	r0, #2
  }
}
 80009fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000a00 <HAL_UART_Receive_DMA>:
  * @param  Size: Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{  
 8000a00:	4613      	mov	r3, r2
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 8000a02:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 8000a06:	2a20      	cmp	r2, #32
  * @param  Size: Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{  
 8000a08:	b570      	push	{r4, r5, r6, lr}
 8000a0a:	4604      	mov	r4, r0
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 8000a0c:	d130      	bne.n	8000a70 <HAL_UART_Receive_DMA+0x70>
  {
    if((pData == NULL ) || (Size == 0U)) 
 8000a0e:	2900      	cmp	r1, #0
 8000a10:	d02c      	beq.n	8000a6c <HAL_UART_Receive_DMA+0x6c>
 8000a12:	b35b      	cbz	r3, 8000a6c <HAL_UART_Receive_DMA+0x6c>
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8000a14:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8000a18:	2a01      	cmp	r2, #1
 8000a1a:	d029      	beq.n	8000a70 <HAL_UART_Receive_DMA+0x70>
 8000a1c:	2201      	movs	r2, #1
    
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000a1e:	2500      	movs	r5, #0
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8000a20:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000a24:	2222      	movs	r2, #34	; 0x22
    __HAL_LOCK(huart);
    
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000a26:	63c5      	str	r5, [r0, #60]	; 0x3c
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
    
    huart->pRxBuffPtr = pData;
 8000a28:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8000a2a:	8583      	strh	r3, [r0, #44]	; 0x2c
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000a2c:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8000a30:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8000a32:	4a10      	ldr	r2, [pc, #64]	; (8000a74 <HAL_UART_Receive_DMA+0x74>)
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;

    /* Enable the DMA Stream */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size); 
 8000a34:	6826      	ldr	r6, [r4, #0]
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
        
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8000a36:	63c2      	str	r2, [r0, #60]	; 0x3c
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8000a38:	4a0f      	ldr	r2, [pc, #60]	; (8000a78 <HAL_UART_Receive_DMA+0x78>)
 8000a3a:	6402      	str	r2, [r0, #64]	; 0x40
    
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8000a3c:	4a0f      	ldr	r2, [pc, #60]	; (8000a7c <HAL_UART_Receive_DMA+0x7c>)
 8000a3e:	64c2      	str	r2, [r0, #76]	; 0x4c
    
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8000a40:	6505      	str	r5, [r0, #80]	; 0x50

    /* Enable the DMA Stream */
    tmp = (uint32_t*)&pData;
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size); 
 8000a42:	460a      	mov	r2, r1
 8000a44:	1d31      	adds	r1, r6, #4
 8000a46:	f000 fd9b 	bl	8001580 <HAL_DMA_Start_IT>

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8000a4a:	6823      	ldr	r3, [r4, #0]
 8000a4c:	68da      	ldr	r2, [r3, #12]
 8000a4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a52:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000a54:	695a      	ldr	r2, [r3, #20]
 8000a56:	f042 0201 	orr.w	r2, r2, #1
 8000a5a:	615a      	str	r2, [r3, #20]
    
    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000a5c:	695a      	ldr	r2, [r3, #20]
 8000a5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a62:	615a      	str	r2, [r3, #20]
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
    
    return HAL_OK;
 8000a64:	4628      	mov	r0, r5
    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8000a66:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    
    return HAL_OK;
 8000a6a:	bd70      	pop	{r4, r5, r6, pc}
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
  {
    if((pData == NULL ) || (Size == 0U)) 
    {
      return HAL_ERROR;
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY; 
 8000a70:	2002      	movs	r0, #2
  }
}
 8000a72:	bd70      	pop	{r4, r5, r6, pc}
 8000a74:	08000a83 	.word	0x08000a83
 8000a78:	08000b35 	.word	0x08000b35
 8000a7c:	08000b41 	.word	0x08000b41

08000a80 <HAL_UART_TxCpltCallback>:
 8000a80:	4770      	bx	lr

08000a82 <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8000a82:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8000a84:	6803      	ldr	r3, [r0, #0]
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000a86:	6b82      	ldr	r2, [r0, #56]	; 0x38
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8000a8e:	d110      	bne.n	8000ab2 <UART_DMAReceiveCplt+0x30>
  {
    huart->RxXferCount = 0U;
 8000a90:	85d3      	strh	r3, [r2, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8000a92:	6813      	ldr	r3, [r2, #0]
 8000a94:	68d9      	ldr	r1, [r3, #12]
 8000a96:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8000a9a:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000a9c:	6959      	ldr	r1, [r3, #20]
 8000a9e:	f021 0101 	bic.w	r1, r1, #1
 8000aa2:	6159      	str	r1, [r3, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000aa4:	6959      	ldr	r1, [r3, #20]
 8000aa6:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8000aaa:	6159      	str	r1, [r3, #20]
	
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8000aac:	2320      	movs	r3, #32
 8000aae:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	f7ff fd74 	bl	80005a0 <HAL_UART_RxCpltCallback>
 8000ab8:	bd08      	pop	{r3, pc}

08000aba <UART_Receive_IT>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8000aba:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8000abe:	2b22      	cmp	r3, #34	; 0x22
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8000ac0:	b510      	push	{r4, lr}
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8000ac2:	d132      	bne.n	8000b2a <UART_Receive_IT+0x70>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000ac4:	6883      	ldr	r3, [r0, #8]
 8000ac6:	6901      	ldr	r1, [r0, #16]
 8000ac8:	6802      	ldr	r2, [r0, #0]
 8000aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000ace:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000ad0:	d10b      	bne.n	8000aea <UART_Receive_IT+0x30>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 8000ad2:	6852      	ldr	r2, [r2, #4]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
 8000ad4:	b921      	cbnz	r1, 8000ae0 <UART_Receive_IT+0x26>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 8000ad6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ada:	f823 2b02 	strh.w	r2, [r3], #2
 8000ade:	e002      	b.n	8000ae6 <UART_Receive_IT+0x2c>
        huart->pRxBuffPtr += 2U;
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FFU);
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 8000ae6:	6283      	str	r3, [r0, #40]	; 0x28
 8000ae8:	e00a      	b.n	8000b00 <UART_Receive_IT+0x46>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8000aea:	b919      	cbnz	r1, 8000af4 <UART_Receive_IT+0x3a>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FFU);
 8000aec:	1c59      	adds	r1, r3, #1
 8000aee:	6281      	str	r1, [r0, #40]	; 0x28
 8000af0:	6852      	ldr	r2, [r2, #4]
 8000af2:	e004      	b.n	8000afe <UART_Receive_IT+0x44>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007FU);
 8000af4:	6852      	ldr	r2, [r2, #4]
 8000af6:	1c59      	adds	r1, r3, #1
 8000af8:	6281      	str	r1, [r0, #40]	; 0x28
 8000afa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000afe:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8000b00:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8000b02:	3c01      	subs	r4, #1
 8000b04:	b2a4      	uxth	r4, r4
 8000b06:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8000b08:	b98c      	cbnz	r4, 8000b2e <UART_Receive_IT+0x74>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000b0a:	6803      	ldr	r3, [r0, #0]
 8000b0c:	68da      	ldr	r2, [r3, #12]
 8000b0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000b12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000b14:	695a      	ldr	r2, [r3, #20]
 8000b16:	f022 0201 	bic.w	r2, r2, #1
 8000b1a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8000b1c:	2320      	movs	r3, #32
 8000b1e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 8000b22:	f7ff fd3d 	bl	80005a0 <HAL_UART_RxCpltCallback>
 8000b26:	4620      	mov	r0, r4
 8000b28:	bd10      	pop	{r4, pc}
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8000b2a:	2002      	movs	r0, #2
 8000b2c:	bd10      	pop	{r4, pc}
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007FU);
      }
    }

    if(--huart->RxXferCount == 0U)
 8000b2e:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8000b30:	bd10      	pop	{r4, pc}

08000b32 <HAL_UART_RxHalfCpltCallback>:
 8000b32:	4770      	bx	lr

08000b34 <UART_DMARxHalfCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8000b34:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_UART_RxHalfCpltCallback(huart); 
 8000b36:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8000b38:	f7ff fffb 	bl	8000b32 <HAL_UART_RxHalfCpltCallback>
 8000b3c:	bd08      	pop	{r3, pc}

08000b3e <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000b3e:	4770      	bx	lr

08000b40 <UART_DMAError>:
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  uint32_t dmarequest = 0x00U;
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000b40:	6b81      	ldr	r1, [r0, #56]	; 0x38
  * @brief  DMA UART communication error callback.
  * @param  hdma: DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8000b42:	b508      	push	{r3, lr}
  uint32_t dmarequest = 0x00U;
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8000b44:	680b      	ldr	r3, [r1, #0]
 8000b46:	695a      	ldr	r2, [r3, #20]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8000b48:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8000b4c:	2821      	cmp	r0, #33	; 0x21
 8000b4e:	d10a      	bne.n	8000b66 <UART_DMAError+0x26>
 8000b50:	0612      	lsls	r2, r2, #24
 8000b52:	d508      	bpl.n	8000b66 <UART_DMAError+0x26>
  {
    huart->TxXferCount = 0U;
 8000b54:	2200      	movs	r2, #0
 8000b56:	84ca      	strh	r2, [r1, #38]	; 0x26
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8000b58:	68da      	ldr	r2, [r3, #12]
 8000b5a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8000b5e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8000b60:	2220      	movs	r2, #32
 8000b62:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8000b66:	695b      	ldr	r3, [r3, #20]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8000b68:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8000b6c:	2a22      	cmp	r2, #34	; 0x22
 8000b6e:	d106      	bne.n	8000b7e <UART_DMAError+0x3e>
 8000b70:	065b      	lsls	r3, r3, #25
 8000b72:	d504      	bpl.n	8000b7e <UART_DMAError+0x3e>
  {
    huart->RxXferCount = 0U;
 8000b74:	2300      	movs	r3, #0
 8000b76:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8000b78:	4608      	mov	r0, r1
 8000b7a:	f7ff fd64 	bl	8000646 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8000b7e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000b80:	f043 0310 	orr.w	r3, r3, #16
 8000b84:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8000b86:	4608      	mov	r0, r1
 8000b88:	f7ff ffd9 	bl	8000b3e <HAL_UART_ErrorCallback>
 8000b8c:	bd08      	pop	{r3, pc}
	...

08000b90 <HAL_UART_IRQHandler>:
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000b90:	6803      	ldr	r3, [r0, #0]
 8000b92:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000b94:	68d9      	ldr	r1, [r3, #12]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8000b96:	b570      	push	{r4, r5, r6, lr}
   uint32_t errorflags = 0x00U;
   uint32_t dmarequest = 0x00U;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
  if(errorflags == RESET)
 8000b98:	0716      	lsls	r6, r2, #28
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8000b9a:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8000b9c:	695d      	ldr	r5, [r3, #20]
   uint32_t errorflags = 0x00U;
   uint32_t dmarequest = 0x00U;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
  if(errorflags == RESET)
 8000b9e:	d107      	bne.n	8000bb0 <HAL_UART_IRQHandler+0x20>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000ba0:	0696      	lsls	r6, r2, #26
 8000ba2:	d55c      	bpl.n	8000c5e <HAL_UART_IRQHandler+0xce>
 8000ba4:	068d      	lsls	r5, r1, #26
 8000ba6:	d55a      	bpl.n	8000c5e <HAL_UART_IRQHandler+0xce>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
  {
    UART_EndTransmit_IT(huart);
    return;
  }
}
 8000ba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if(errorflags == RESET)
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
    {
      UART_Receive_IT(huart);
 8000bac:	f7ff bf85 	b.w	8000aba <UART_Receive_IT>
      return;
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && ((cr3its & (USART_CR3_EIE | USART_CR1_PEIE)) != RESET))
 8000bb0:	f240 1001 	movw	r0, #257	; 0x101
 8000bb4:	4028      	ands	r0, r5
 8000bb6:	2800      	cmp	r0, #0
 8000bb8:	d051      	beq.n	8000c5e <HAL_UART_IRQHandler+0xce>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8000bba:	07d3      	lsls	r3, r2, #31
 8000bbc:	d505      	bpl.n	8000bca <HAL_UART_IRQHandler+0x3a>
 8000bbe:	05ce      	lsls	r6, r1, #23
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8000bc0:	bf42      	ittt	mi
 8000bc2:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8000bc4:	f043 0301 	orrmi.w	r3, r3, #1
 8000bc8:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000bca:	0750      	lsls	r0, r2, #29
 8000bcc:	d505      	bpl.n	8000bda <HAL_UART_IRQHandler+0x4a>
 8000bce:	07eb      	lsls	r3, r5, #31
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8000bd0:	bf42      	ittt	mi
 8000bd2:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8000bd4:	f043 0302 	orrmi.w	r3, r3, #2
 8000bd8:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000bda:	0796      	lsls	r6, r2, #30
 8000bdc:	d505      	bpl.n	8000bea <HAL_UART_IRQHandler+0x5a>
 8000bde:	07e8      	lsls	r0, r5, #31
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8000be0:	bf42      	ittt	mi
 8000be2:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8000be4:	f043 0304 	orrmi.w	r3, r3, #4
 8000be8:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8000bea:	0713      	lsls	r3, r2, #28
 8000bec:	d505      	bpl.n	8000bfa <HAL_UART_IRQHandler+0x6a>
 8000bee:	07ee      	lsls	r6, r5, #31
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8000bf0:	bf42      	ittt	mi
 8000bf2:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8000bf4:	f043 0308 	orrmi.w	r3, r3, #8
 8000bf8:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8000bfa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d066      	beq.n	8000cce <HAL_UART_IRQHandler+0x13e>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000c00:	0695      	lsls	r5, r2, #26
 8000c02:	d504      	bpl.n	8000c0e <HAL_UART_IRQHandler+0x7e>
 8000c04:	0688      	lsls	r0, r1, #26
 8000c06:	d502      	bpl.n	8000c0e <HAL_UART_IRQHandler+0x7e>
      {
        UART_Receive_IT(huart);
 8000c08:	4620      	mov	r0, r4
 8000c0a:	f7ff ff56 	bl	8000aba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8000c0e:	6823      	ldr	r3, [r4, #0]
 8000c10:	695b      	ldr	r3, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8000c12:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8000c14:	0711      	lsls	r1, r2, #28
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8000c16:	4620      	mov	r0, r4
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8000c18:	d402      	bmi.n	8000c20 <HAL_UART_IRQHandler+0x90>
 8000c1a:	f013 0540 	ands.w	r5, r3, #64	; 0x40
 8000c1e:	d01a      	beq.n	8000c56 <HAL_UART_IRQHandler+0xc6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8000c20:	f7ff fd11 	bl	8000646 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8000c24:	6823      	ldr	r3, [r4, #0]
 8000c26:	695a      	ldr	r2, [r3, #20]
 8000c28:	0652      	lsls	r2, r2, #25
 8000c2a:	d510      	bpl.n	8000c4e <HAL_UART_IRQHandler+0xbe>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000c2c:	695a      	ldr	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8000c2e:	6b60      	ldr	r0, [r4, #52]	; 0x34
        UART_EndRxTransfer(huart);
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8000c30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c34:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8000c36:	b150      	cbz	r0, 8000c4e <HAL_UART_IRQHandler+0xbe>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8000c38:	4b25      	ldr	r3, [pc, #148]	; (8000cd0 <HAL_UART_IRQHandler+0x140>)
 8000c3a:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8000c3c:	f000 fce0 	bl	8001600 <HAL_DMA_Abort_IT>
 8000c40:	2800      	cmp	r0, #0
 8000c42:	d044      	beq.n	8000cce <HAL_UART_IRQHandler+0x13e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8000c44:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
  {
    UART_EndTransmit_IT(huart);
    return;
  }
}
 8000c46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8000c4a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8000c4c:	4718      	bx	r3
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8000c4e:	4620      	mov	r0, r4
 8000c50:	f7ff ff75 	bl	8000b3e <HAL_UART_ErrorCallback>
 8000c54:	bd70      	pop	{r4, r5, r6, pc}
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8000c56:	f7ff ff72 	bl	8000b3e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000c5a:	63e5      	str	r5, [r4, #60]	; 0x3c
 8000c5c:	bd70      	pop	{r4, r5, r6, pc}
    }
    return;
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000c5e:	0616      	lsls	r6, r2, #24
 8000c60:	d527      	bpl.n	8000cb2 <HAL_UART_IRQHandler+0x122>
 8000c62:	060d      	lsls	r5, r1, #24
 8000c64:	d525      	bpl.n	8000cb2 <HAL_UART_IRQHandler+0x122>
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8000c66:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8000c6a:	2a21      	cmp	r2, #33	; 0x21
 8000c6c:	d12f      	bne.n	8000cce <HAL_UART_IRQHandler+0x13e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8000c6e:	68a2      	ldr	r2, [r4, #8]
 8000c70:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8000c74:	6a22      	ldr	r2, [r4, #32]
 8000c76:	d10a      	bne.n	8000c8e <HAL_UART_IRQHandler+0xfe>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FFU);
 8000c78:	8811      	ldrh	r1, [r2, #0]
 8000c7a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8000c7e:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8000c80:	6921      	ldr	r1, [r4, #16]
 8000c82:	b909      	cbnz	r1, 8000c88 <HAL_UART_IRQHandler+0xf8>
      {
        huart->pTxBuffPtr += 2U;
 8000c84:	3202      	adds	r2, #2
 8000c86:	e000      	b.n	8000c8a <HAL_UART_IRQHandler+0xfa>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8000c88:	3201      	adds	r2, #1
 8000c8a:	6222      	str	r2, [r4, #32]
 8000c8c:	e003      	b.n	8000c96 <HAL_UART_IRQHandler+0x106>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FFU);
 8000c8e:	1c51      	adds	r1, r2, #1
 8000c90:	6221      	str	r1, [r4, #32]
 8000c92:	7812      	ldrb	r2, [r2, #0]
 8000c94:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8000c96:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8000c98:	3a01      	subs	r2, #1
 8000c9a:	b292      	uxth	r2, r2
 8000c9c:	84e2      	strh	r2, [r4, #38]	; 0x26
 8000c9e:	b9b2      	cbnz	r2, 8000cce <HAL_UART_IRQHandler+0x13e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8000ca0:	68da      	ldr	r2, [r3, #12]
 8000ca2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ca6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8000ca8:	68da      	ldr	r2, [r3, #12]
 8000caa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	bd70      	pop	{r4, r5, r6, pc}
    UART_Transmit_IT(huart);
    return;
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8000cb2:	0650      	lsls	r0, r2, #25
 8000cb4:	d50b      	bpl.n	8000cce <HAL_UART_IRQHandler+0x13e>
 8000cb6:	064a      	lsls	r2, r1, #25
 8000cb8:	d509      	bpl.n	8000cce <HAL_UART_IRQHandler+0x13e>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8000cba:	68da      	ldr	r2, [r3, #12]
 8000cbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000cc0:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8000cc2:	2320      	movs	r3, #32
 8000cc4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 8000cc8:	4620      	mov	r0, r4
 8000cca:	f7ff fed9 	bl	8000a80 <HAL_UART_TxCpltCallback>
 8000cce:	bd70      	pop	{r4, r5, r6, pc}
 8000cd0:	08000cd5 	.word	0x08000cd5

08000cd4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8000cd4:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000cd6:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0;
 8000cdc:	84c3      	strh	r3, [r0, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 8000cde:	f7ff ff2e 	bl	8000b3e <HAL_UART_ErrorCallback>
 8000ce2:	bd08      	pop	{r3, pc}

08000ce4 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ce4:	6803      	ldr	r3, [r0, #0]
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ce6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cea:	07de      	lsls	r6, r3, #31
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cec:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cee:	d403      	bmi.n	8000cf8 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cf0:	6823      	ldr	r3, [r4, #0]
 8000cf2:	079d      	lsls	r5, r3, #30
 8000cf4:	d440      	bmi.n	8000d78 <HAL_RCC_OscConfig+0x94>
 8000cf6:	e099      	b.n	8000e2c <HAL_RCC_OscConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000cf8:	4ba6      	ldr	r3, [pc, #664]	; (8000f94 <HAL_RCC_OscConfig+0x2b0>)
 8000cfa:	689a      	ldr	r2, [r3, #8]
 8000cfc:	f002 020c 	and.w	r2, r2, #12
 8000d00:	2a04      	cmp	r2, #4
 8000d02:	d010      	beq.n	8000d26 <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000d04:	689a      	ldr	r2, [r3, #8]
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8000d06:	f002 020c 	and.w	r2, r2, #12
 8000d0a:	2a08      	cmp	r2, #8
 8000d0c:	d102      	bne.n	8000d14 <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	0258      	lsls	r0, r3, #9
 8000d12:	d408      	bmi.n	8000d26 <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d14:	4a9f      	ldr	r2, [pc, #636]	; (8000f94 <HAL_RCC_OscConfig+0x2b0>)
 8000d16:	6893      	ldr	r3, [r2, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8000d18:	f003 030c 	and.w	r3, r3, #12
 8000d1c:	2b0c      	cmp	r3, #12
 8000d1e:	d10b      	bne.n	8000d38 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000d20:	6853      	ldr	r3, [r2, #4]
 8000d22:	0259      	lsls	r1, r3, #9
 8000d24:	d508      	bpl.n	8000d38 <HAL_RCC_OscConfig+0x54>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d26:	4b9b      	ldr	r3, [pc, #620]	; (8000f94 <HAL_RCC_OscConfig+0x2b0>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	039a      	lsls	r2, r3, #14
 8000d2c:	d5e0      	bpl.n	8000cf0 <HAL_RCC_OscConfig+0xc>
 8000d2e:	6863      	ldr	r3, [r4, #4]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d1dd      	bne.n	8000cf0 <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8000d34:	2001      	movs	r0, #1
 8000d36:	e154      	b.n	8000fe2 <HAL_RCC_OscConfig+0x2fe>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d38:	4b97      	ldr	r3, [pc, #604]	; (8000f98 <HAL_RCC_OscConfig+0x2b4>)
 8000d3a:	7922      	ldrb	r2, [r4, #4]
 8000d3c:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000d3e:	6863      	ldr	r3, [r4, #4]
 8000d40:	b16b      	cbz	r3, 8000d5e <HAL_RCC_OscConfig+0x7a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d42:	f000 fddd 	bl	8001900 <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d46:	4d93      	ldr	r5, [pc, #588]	; (8000f94 <HAL_RCC_OscConfig+0x2b0>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d48:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d4a:	682b      	ldr	r3, [r5, #0]
 8000d4c:	039b      	lsls	r3, r3, #14
 8000d4e:	d4cf      	bmi.n	8000cf0 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d50:	f000 fdd6 	bl	8001900 <HAL_GetTick>
 8000d54:	1b80      	subs	r0, r0, r6
 8000d56:	2864      	cmp	r0, #100	; 0x64
 8000d58:	d9f7      	bls.n	8000d4a <HAL_RCC_OscConfig+0x66>
          {
            return HAL_TIMEOUT;
 8000d5a:	2003      	movs	r0, #3
 8000d5c:	e141      	b.n	8000fe2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d5e:	f000 fdcf 	bl	8001900 <HAL_GetTick>

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d62:	4d8c      	ldr	r5, [pc, #560]	; (8000f94 <HAL_RCC_OscConfig+0x2b0>)
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d64:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d66:	682b      	ldr	r3, [r5, #0]
 8000d68:	039f      	lsls	r7, r3, #14
 8000d6a:	d5c1      	bpl.n	8000cf0 <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d6c:	f000 fdc8 	bl	8001900 <HAL_GetTick>
 8000d70:	1b80      	subs	r0, r0, r6
 8000d72:	2864      	cmp	r0, #100	; 0x64
 8000d74:	d9f7      	bls.n	8000d66 <HAL_RCC_OscConfig+0x82>
 8000d76:	e7f0      	b.n	8000d5a <HAL_RCC_OscConfig+0x76>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000d78:	4b86      	ldr	r3, [pc, #536]	; (8000f94 <HAL_RCC_OscConfig+0x2b0>)
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	f012 0f0c 	tst.w	r2, #12
 8000d80:	d010      	beq.n	8000da4 <HAL_RCC_OscConfig+0xc0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000d82:	689a      	ldr	r2, [r3, #8]
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8000d84:	f002 020c 	and.w	r2, r2, #12
 8000d88:	2a08      	cmp	r2, #8
 8000d8a:	d102      	bne.n	8000d92 <HAL_RCC_OscConfig+0xae>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	0258      	lsls	r0, r3, #9
 8000d90:	d508      	bpl.n	8000da4 <HAL_RCC_OscConfig+0xc0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d92:	4a80      	ldr	r2, [pc, #512]	; (8000f94 <HAL_RCC_OscConfig+0x2b0>)
 8000d94:	6893      	ldr	r3, [r2, #8]
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8000d96:	f003 030c 	and.w	r3, r3, #12
 8000d9a:	2b0c      	cmp	r3, #12
 8000d9c:	d117      	bne.n	8000dce <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d9e:	6853      	ldr	r3, [r2, #4]
 8000da0:	0259      	lsls	r1, r3, #9
 8000da2:	d414      	bmi.n	8000dce <HAL_RCC_OscConfig+0xea>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000da4:	4b7b      	ldr	r3, [pc, #492]	; (8000f94 <HAL_RCC_OscConfig+0x2b0>)
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	0792      	lsls	r2, r2, #30
 8000daa:	d502      	bpl.n	8000db2 <HAL_RCC_OscConfig+0xce>
 8000dac:	68e2      	ldr	r2, [r4, #12]
 8000dae:	2a01      	cmp	r2, #1
 8000db0:	d1c0      	bne.n	8000d34 <HAL_RCC_OscConfig+0x50>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000db2:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db4:	21f8      	movs	r1, #248	; 0xf8
 8000db6:	fa91 f1a1 	rbit	r1, r1
 8000dba:	6920      	ldr	r0, [r4, #16]
 8000dbc:	fab1 f181 	clz	r1, r1
 8000dc0:	fa00 f101 	lsl.w	r1, r0, r1
 8000dc4:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	601a      	str	r2, [r3, #0]
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dcc:	e02e      	b.n	8000e2c <HAL_RCC_OscConfig+0x148>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000dce:	68e2      	ldr	r2, [r4, #12]
 8000dd0:	4b72      	ldr	r3, [pc, #456]	; (8000f9c <HAL_RCC_OscConfig+0x2b8>)
 8000dd2:	b1ea      	cbz	r2, 8000e10 <HAL_RCC_OscConfig+0x12c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dd8:	f000 fd92 	bl	8001900 <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ddc:	4d6d      	ldr	r5, [pc, #436]	; (8000f94 <HAL_RCC_OscConfig+0x2b0>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dde:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de0:	682b      	ldr	r3, [r5, #0]
 8000de2:	486c      	ldr	r0, [pc, #432]	; (8000f94 <HAL_RCC_OscConfig+0x2b0>)
 8000de4:	079b      	lsls	r3, r3, #30
 8000de6:	d405      	bmi.n	8000df4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000de8:	f000 fd8a 	bl	8001900 <HAL_GetTick>
 8000dec:	1b80      	subs	r0, r0, r6
 8000dee:	2802      	cmp	r0, #2
 8000df0:	d9f6      	bls.n	8000de0 <HAL_RCC_OscConfig+0xfc>
 8000df2:	e7b2      	b.n	8000d5a <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000df4:	6803      	ldr	r3, [r0, #0]
 8000df6:	22f8      	movs	r2, #248	; 0xf8
 8000df8:	fa92 f2a2 	rbit	r2, r2
 8000dfc:	6921      	ldr	r1, [r4, #16]
 8000dfe:	fab2 f282 	clz	r2, r2
 8000e02:	fa01 f202 	lsl.w	r2, r1, r2
 8000e06:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	6003      	str	r3, [r0, #0]
 8000e0e:	e00d      	b.n	8000e2c <HAL_RCC_OscConfig+0x148>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e12:	f000 fd75 	bl	8001900 <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e16:	4d5f      	ldr	r5, [pc, #380]	; (8000f94 <HAL_RCC_OscConfig+0x2b0>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e18:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e1a:	682b      	ldr	r3, [r5, #0]
 8000e1c:	079f      	lsls	r7, r3, #30
 8000e1e:	d505      	bpl.n	8000e2c <HAL_RCC_OscConfig+0x148>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e20:	f000 fd6e 	bl	8001900 <HAL_GetTick>
 8000e24:	1b80      	subs	r0, r0, r6
 8000e26:	2802      	cmp	r0, #2
 8000e28:	d9f7      	bls.n	8000e1a <HAL_RCC_OscConfig+0x136>
 8000e2a:	e796      	b.n	8000d5a <HAL_RCC_OscConfig+0x76>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e2c:	6823      	ldr	r3, [r4, #0]
 8000e2e:	071e      	lsls	r6, r3, #28
 8000e30:	d403      	bmi.n	8000e3a <HAL_RCC_OscConfig+0x156>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e32:	6823      	ldr	r3, [r4, #0]
 8000e34:	075d      	lsls	r5, r3, #29
 8000e36:	d545      	bpl.n	8000ec4 <HAL_RCC_OscConfig+0x1e0>
 8000e38:	e01f      	b.n	8000e7a <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e3a:	6962      	ldr	r2, [r4, #20]
 8000e3c:	4b58      	ldr	r3, [pc, #352]	; (8000fa0 <HAL_RCC_OscConfig+0x2bc>)
 8000e3e:	b172      	cbz	r2, 8000e5e <HAL_RCC_OscConfig+0x17a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e40:	2201      	movs	r2, #1
 8000e42:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e44:	f000 fd5c 	bl	8001900 <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e48:	4d52      	ldr	r5, [pc, #328]	; (8000f94 <HAL_RCC_OscConfig+0x2b0>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e4a:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e4c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000e4e:	0798      	lsls	r0, r3, #30
 8000e50:	d4ef      	bmi.n	8000e32 <HAL_RCC_OscConfig+0x14e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e52:	f000 fd55 	bl	8001900 <HAL_GetTick>
 8000e56:	1b80      	subs	r0, r0, r6
 8000e58:	2802      	cmp	r0, #2
 8000e5a:	d9f7      	bls.n	8000e4c <HAL_RCC_OscConfig+0x168>
 8000e5c:	e77d      	b.n	8000d5a <HAL_RCC_OscConfig+0x76>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e5e:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e60:	f000 fd4e 	bl	8001900 <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e64:	4d4b      	ldr	r5, [pc, #300]	; (8000f94 <HAL_RCC_OscConfig+0x2b0>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e66:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e68:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000e6a:	0799      	lsls	r1, r3, #30
 8000e6c:	d5e1      	bpl.n	8000e32 <HAL_RCC_OscConfig+0x14e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e6e:	f000 fd47 	bl	8001900 <HAL_GetTick>
 8000e72:	1b80      	subs	r0, r0, r6
 8000e74:	2802      	cmp	r0, #2
 8000e76:	d9f7      	bls.n	8000e68 <HAL_RCC_OscConfig+0x184>
 8000e78:	e76f      	b.n	8000d5a <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	9301      	str	r3, [sp, #4]
 8000e7e:	4b45      	ldr	r3, [pc, #276]	; (8000f94 <HAL_RCC_OscConfig+0x2b0>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000e80:	4d48      	ldr	r5, [pc, #288]	; (8000fa4 <HAL_RCC_OscConfig+0x2c0>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8000e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e88:	641a      	str	r2, [r3, #64]	; 0x40
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e90:	9301      	str	r3, [sp, #4]
 8000e92:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8000e94:	682b      	ldr	r3, [r5, #0]
 8000e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e9a:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8000e9c:	f000 fd30 	bl	8001900 <HAL_GetTick>
 8000ea0:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8000ea2:	682b      	ldr	r3, [r5, #0]
 8000ea4:	05da      	lsls	r2, r3, #23
 8000ea6:	d510      	bpl.n	8000eca <HAL_RCC_OscConfig+0x1e6>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea8:	4b3f      	ldr	r3, [pc, #252]	; (8000fa8 <HAL_RCC_OscConfig+0x2c4>)
 8000eaa:	7a22      	ldrb	r2, [r4, #8]
 8000eac:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000eae:	68a3      	ldr	r3, [r4, #8]
 8000eb0:	b1bb      	cbz	r3, 8000ee2 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000eb2:	f000 fd25 	bl	8001900 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eb6:	4d37      	ldr	r5, [pc, #220]	; (8000f94 <HAL_RCC_OscConfig+0x2b0>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000eb8:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eba:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ebe:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ec0:	079b      	lsls	r3, r3, #30
 8000ec2:	d508      	bpl.n	8000ed6 <HAL_RCC_OscConfig+0x1f2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ec4:	69a2      	ldr	r2, [r4, #24]
 8000ec6:	b9da      	cbnz	r2, 8000f00 <HAL_RCC_OscConfig+0x21c>
 8000ec8:	e062      	b.n	8000f90 <HAL_RCC_OscConfig+0x2ac>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000eca:	f000 fd19 	bl	8001900 <HAL_GetTick>
 8000ece:	1b80      	subs	r0, r0, r6
 8000ed0:	2802      	cmp	r0, #2
 8000ed2:	d9e6      	bls.n	8000ea2 <HAL_RCC_OscConfig+0x1be>
 8000ed4:	e741      	b.n	8000d5a <HAL_RCC_OscConfig+0x76>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ed6:	f000 fd13 	bl	8001900 <HAL_GetTick>
 8000eda:	1b80      	subs	r0, r0, r6
 8000edc:	42b8      	cmp	r0, r7
 8000ede:	d9ee      	bls.n	8000ebe <HAL_RCC_OscConfig+0x1da>
 8000ee0:	e73b      	b.n	8000d5a <HAL_RCC_OscConfig+0x76>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ee2:	f000 fd0d 	bl	8001900 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ee6:	4d2b      	ldr	r5, [pc, #172]	; (8000f94 <HAL_RCC_OscConfig+0x2b0>)
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ee8:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000eea:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eee:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ef0:	0798      	lsls	r0, r3, #30
 8000ef2:	d5e7      	bpl.n	8000ec4 <HAL_RCC_OscConfig+0x1e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ef4:	f000 fd04 	bl	8001900 <HAL_GetTick>
 8000ef8:	1b80      	subs	r0, r0, r6
 8000efa:	42b8      	cmp	r0, r7
 8000efc:	d9f7      	bls.n	8000eee <HAL_RCC_OscConfig+0x20a>
 8000efe:	e72c      	b.n	8000d5a <HAL_RCC_OscConfig+0x76>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f00:	4d24      	ldr	r5, [pc, #144]	; (8000f94 <HAL_RCC_OscConfig+0x2b0>)
 8000f02:	68ab      	ldr	r3, [r5, #8]
 8000f04:	f003 030c 	and.w	r3, r3, #12
 8000f08:	2b08      	cmp	r3, #8
 8000f0a:	f43f af13 	beq.w	8000d34 <HAL_RCC_OscConfig+0x50>
 8000f0e:	4e27      	ldr	r6, [pc, #156]	; (8000fac <HAL_RCC_OscConfig+0x2c8>)
 8000f10:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f12:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f14:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f16:	d158      	bne.n	8000fca <HAL_RCC_OscConfig+0x2e6>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f18:	f000 fcf2 	bl	8001900 <HAL_GetTick>
 8000f1c:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f1e:	682b      	ldr	r3, [r5, #0]
 8000f20:	4f1c      	ldr	r7, [pc, #112]	; (8000f94 <HAL_RCC_OscConfig+0x2b0>)
 8000f22:	0199      	lsls	r1, r3, #6
 8000f24:	d444      	bmi.n	8000fb0 <HAL_RCC_OscConfig+0x2cc>
 8000f26:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000f2a:	fa92 f2a2 	rbit	r2, r2
 8000f2e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f32:	fab2 fc82 	clz	ip, r2
 8000f36:	fa93 f3a3 	rbit	r3, r3
 8000f3a:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8000f3e:	fab3 fe83 	clz	lr, r3
 8000f42:	fa91 f1a1 	rbit	r1, r1
 8000f46:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8000f4a:	fab1 f581 	clz	r5, r1
 8000f4e:	fa92 f2a2 	rbit	r2, r2
 8000f52:	69e3      	ldr	r3, [r4, #28]
 8000f54:	fab2 f082 	clz	r0, r2
 8000f58:	6a22      	ldr	r2, [r4, #32]
 8000f5a:	ea43 0102 	orr.w	r1, r3, r2
 8000f5e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000f62:	fa02 f20c 	lsl.w	r2, r2, ip
 8000f66:	4311      	orrs	r1, r2
 8000f68:	085a      	lsrs	r2, r3, #1
 8000f6a:	3a01      	subs	r2, #1
 8000f6c:	fa02 f30e 	lsl.w	r3, r2, lr
 8000f70:	430b      	orrs	r3, r1
 8000f72:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000f74:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000f76:	40a9      	lsls	r1, r5
 8000f78:	430b      	orrs	r3, r1
 8000f7a:	4082      	lsls	r2, r0
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	607b      	str	r3, [r7, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f80:	2301      	movs	r3, #1
 8000f82:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f84:	f000 fcbc 	bl	8001900 <HAL_GetTick>
 8000f88:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	019a      	lsls	r2, r3, #6
 8000f8e:	d516      	bpl.n	8000fbe <HAL_RCC_OscConfig+0x2da>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000f90:	2000      	movs	r0, #0
 8000f92:	e026      	b.n	8000fe2 <HAL_RCC_OscConfig+0x2fe>
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40023802 	.word	0x40023802
 8000f9c:	42470000 	.word	0x42470000
 8000fa0:	42470e80 	.word	0x42470e80
 8000fa4:	40007000 	.word	0x40007000
 8000fa8:	40023870 	.word	0x40023870
 8000fac:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fb0:	f000 fca6 	bl	8001900 <HAL_GetTick>
 8000fb4:	ebc8 0000 	rsb	r0, r8, r0
 8000fb8:	2802      	cmp	r0, #2
 8000fba:	d9b0      	bls.n	8000f1e <HAL_RCC_OscConfig+0x23a>
 8000fbc:	e6cd      	b.n	8000d5a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fbe:	f000 fc9f 	bl	8001900 <HAL_GetTick>
 8000fc2:	1b00      	subs	r0, r0, r4
 8000fc4:	2802      	cmp	r0, #2
 8000fc6:	d9e0      	bls.n	8000f8a <HAL_RCC_OscConfig+0x2a6>
 8000fc8:	e6c7      	b.n	8000d5a <HAL_RCC_OscConfig+0x76>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fca:	f000 fc99 	bl	8001900 <HAL_GetTick>
 8000fce:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fd0:	682b      	ldr	r3, [r5, #0]
 8000fd2:	019b      	lsls	r3, r3, #6
 8000fd4:	d5dc      	bpl.n	8000f90 <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fd6:	f000 fc93 	bl	8001900 <HAL_GetTick>
 8000fda:	1b00      	subs	r0, r0, r4
 8000fdc:	2802      	cmp	r0, #2
 8000fde:	d9f7      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x2ec>
 8000fe0:	e6bb      	b.n	8000d5a <HAL_RCC_OscConfig+0x76>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000fe2:	b002      	add	sp, #8
 8000fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000fe8 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000fe8:	4930      	ldr	r1, [pc, #192]	; (80010ac <HAL_RCC_GetSysClockFreq+0xc4>)
 8000fea:	6888      	ldr	r0, [r1, #8]
 8000fec:	f000 000c 	and.w	r0, r0, #12
 8000ff0:	2808      	cmp	r0, #8
 8000ff2:	d008      	beq.n	8001006 <HAL_RCC_GetSysClockFreq+0x1e>
 8000ff4:	280c      	cmp	r0, #12
 8000ff6:	d02f      	beq.n	8001058 <HAL_RCC_GetSysClockFreq+0x70>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000ff8:	4a2d      	ldr	r2, [pc, #180]	; (80010b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000ffa:	4b2e      	ldr	r3, [pc, #184]	; (80010b4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8000ffc:	2804      	cmp	r0, #4
 8000ffe:	bf0c      	ite	eq
 8001000:	4618      	moveq	r0, r3
 8001002:	4610      	movne	r0, r2
 8001004:	4770      	bx	lr
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001006:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001008:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800100a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800100e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001012:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001016:	684b      	ldr	r3, [r1, #4]
 8001018:	fa92 f2a2 	rbit	r2, r2
 800101c:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001020:	fab2 f282 	clz	r2, r2
 8001024:	ea01 0103 	and.w	r1, r1, r3
 8001028:	fa21 f102 	lsr.w	r1, r1, r2
 800102c:	bf14      	ite	ne
 800102e:	4a21      	ldrne	r2, [pc, #132]	; (80010b4 <HAL_RCC_GetSysClockFreq+0xcc>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001030:	4a1f      	ldreq	r2, [pc, #124]	; (80010b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001032:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8001036:	4a1d      	ldr	r2, [pc, #116]	; (80010ac <HAL_RCC_GetSysClockFreq+0xc4>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001038:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 800103c:	6852      	ldr	r2, [r2, #4]
 800103e:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001042:	fa90 f0a0 	rbit	r0, r0
 8001046:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 800104a:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800104e:	fa22 f000 	lsr.w	r0, r2, r0
 8001052:	3001      	adds	r0, #1
 8001054:	0040      	lsls	r0, r0, #1
 8001056:	e025      	b.n	80010a4 <HAL_RCC_GetSysClockFreq+0xbc>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001058:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800105a:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800105c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001060:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001064:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001068:	684b      	ldr	r3, [r1, #4]
 800106a:	fa92 f2a2 	rbit	r2, r2
 800106e:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001072:	fab2 f282 	clz	r2, r2
 8001076:	ea01 0103 	and.w	r1, r1, r3
 800107a:	fa21 f102 	lsr.w	r1, r1, r2
 800107e:	bf14      	ite	ne
 8001080:	4a0c      	ldrne	r2, [pc, #48]	; (80010b4 <HAL_RCC_GetSysClockFreq+0xcc>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001082:	4a0b      	ldreq	r2, [pc, #44]	; (80010b0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001084:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 8001088:	4a08      	ldr	r2, [pc, #32]	; (80010ac <HAL_RCC_GetSysClockFreq+0xc4>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 800108a:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 800108e:	6852      	ldr	r2, [r2, #4]
 8001090:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 8001094:	fa90 f0a0 	rbit	r0, r0
 8001098:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllr;
 800109c:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 80010a0:	fa22 f000 	lsr.w	r0, r2, r0
 80010a4:	fbb3 f0f0 	udiv	r0, r3, r0
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800
 80010b0:	00f42400 	.word	0x00f42400
 80010b4:	007a1200 	.word	0x007a1200

080010b8 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010b8:	4b55      	ldr	r3, [pc, #340]	; (8001210 <HAL_RCC_ClockConfig+0x158>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	f002 020f 	and.w	r2, r2, #15
 80010c0:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010c6:	4605      	mov	r5, r0
 80010c8:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80010ca:	d30a      	bcc.n	80010e2 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010cc:	6829      	ldr	r1, [r5, #0]
 80010ce:	0788      	lsls	r0, r1, #30
 80010d0:	d511      	bpl.n	80010f6 <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010d2:	4850      	ldr	r0, [pc, #320]	; (8001214 <HAL_RCC_ClockConfig+0x15c>)
 80010d4:	6883      	ldr	r3, [r0, #8]
 80010d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010da:	68ab      	ldr	r3, [r5, #8]
 80010dc:	4313      	orrs	r3, r2
 80010de:	6083      	str	r3, [r0, #8]
 80010e0:	e009      	b.n	80010f6 <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010e2:	b2ca      	uxtb	r2, r1
 80010e4:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 030f 	and.w	r3, r3, #15
 80010ec:	4299      	cmp	r1, r3
 80010ee:	d0ed      	beq.n	80010cc <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 80010f0:	2001      	movs	r0, #1
 80010f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010f6:	07c9      	lsls	r1, r1, #31
 80010f8:	d406      	bmi.n	8001108 <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80010fa:	4b45      	ldr	r3, [pc, #276]	; (8001210 <HAL_RCC_ClockConfig+0x158>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	f002 020f 	and.w	r2, r2, #15
 8001102:	4296      	cmp	r6, r2
 8001104:	d351      	bcc.n	80011aa <HAL_RCC_ClockConfig+0xf2>
 8001106:	e057      	b.n	80011b8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001108:	686b      	ldr	r3, [r5, #4]
 800110a:	4a42      	ldr	r2, [pc, #264]	; (8001214 <HAL_RCC_ClockConfig+0x15c>)
 800110c:	2b01      	cmp	r3, #1
 800110e:	d103      	bne.n	8001118 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001110:	6812      	ldr	r2, [r2, #0]
 8001112:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001116:	e008      	b.n	800112a <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001118:	1e99      	subs	r1, r3, #2
 800111a:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800111c:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800111e:	d802      	bhi.n	8001126 <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001120:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001124:	e001      	b.n	800112a <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001126:	f012 0f02 	tst.w	r2, #2
 800112a:	d0e1      	beq.n	80010f0 <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800112c:	4c39      	ldr	r4, [pc, #228]	; (8001214 <HAL_RCC_ClockConfig+0x15c>)
 800112e:	68a2      	ldr	r2, [r4, #8]
 8001130:	f022 0203 	bic.w	r2, r2, #3
 8001134:	4313      	orrs	r3, r2
 8001136:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001138:	f000 fbe2 	bl	8001900 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800113c:	686b      	ldr	r3, [r5, #4]
 800113e:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001140:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001142:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001146:	d10c      	bne.n	8001162 <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001148:	68a3      	ldr	r3, [r4, #8]
 800114a:	f003 030c 	and.w	r3, r3, #12
 800114e:	2b04      	cmp	r3, #4
 8001150:	d0d3      	beq.n	80010fa <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001152:	f000 fbd5 	bl	8001900 <HAL_GetTick>
 8001156:	1bc0      	subs	r0, r0, r7
 8001158:	4540      	cmp	r0, r8
 800115a:	d9f5      	bls.n	8001148 <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 800115c:	2003      	movs	r0, #3
 800115e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001162:	2b02      	cmp	r3, #2
 8001164:	d10a      	bne.n	800117c <HAL_RCC_ClockConfig+0xc4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001166:	68a3      	ldr	r3, [r4, #8]
 8001168:	f003 030c 	and.w	r3, r3, #12
 800116c:	2b08      	cmp	r3, #8
 800116e:	d0c4      	beq.n	80010fa <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001170:	f000 fbc6 	bl	8001900 <HAL_GetTick>
 8001174:	1bc0      	subs	r0, r0, r7
 8001176:	4540      	cmp	r0, r8
 8001178:	d9f5      	bls.n	8001166 <HAL_RCC_ClockConfig+0xae>
 800117a:	e7ef      	b.n	800115c <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 800117c:	2b03      	cmp	r3, #3
 800117e:	d10f      	bne.n	80011a0 <HAL_RCC_ClockConfig+0xe8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001180:	68a3      	ldr	r3, [r4, #8]
 8001182:	f003 030c 	and.w	r3, r3, #12
 8001186:	2b0c      	cmp	r3, #12
 8001188:	d0b7      	beq.n	80010fa <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800118a:	f000 fbb9 	bl	8001900 <HAL_GetTick>
 800118e:	1bc0      	subs	r0, r0, r7
 8001190:	4540      	cmp	r0, r8
 8001192:	d9f5      	bls.n	8001180 <HAL_RCC_ClockConfig+0xc8>
 8001194:	e7e2      	b.n	800115c <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001196:	f000 fbb3 	bl	8001900 <HAL_GetTick>
 800119a:	1bc0      	subs	r0, r0, r7
 800119c:	4540      	cmp	r0, r8
 800119e:	d8dd      	bhi.n	800115c <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80011a0:	68a3      	ldr	r3, [r4, #8]
 80011a2:	f013 0f0c 	tst.w	r3, #12
 80011a6:	d1f6      	bne.n	8001196 <HAL_RCC_ClockConfig+0xde>
 80011a8:	e7a7      	b.n	80010fa <HAL_RCC_ClockConfig+0x42>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011aa:	b2f2      	uxtb	r2, r6
 80011ac:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 030f 	and.w	r3, r3, #15
 80011b4:	429e      	cmp	r6, r3
 80011b6:	d19b      	bne.n	80010f0 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011b8:	6829      	ldr	r1, [r5, #0]
 80011ba:	074a      	lsls	r2, r1, #29
 80011bc:	d506      	bpl.n	80011cc <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011be:	4815      	ldr	r0, [pc, #84]	; (8001214 <HAL_RCC_ClockConfig+0x15c>)
 80011c0:	6883      	ldr	r3, [r0, #8]
 80011c2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011c6:	68eb      	ldr	r3, [r5, #12]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011cc:	070b      	lsls	r3, r1, #28
 80011ce:	d507      	bpl.n	80011e0 <HAL_RCC_ClockConfig+0x128>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011d0:	4a10      	ldr	r2, [pc, #64]	; (8001214 <HAL_RCC_ClockConfig+0x15c>)
 80011d2:	6929      	ldr	r1, [r5, #16]
 80011d4:	6893      	ldr	r3, [r2, #8]
 80011d6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80011da:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80011de:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 80011e0:	f7ff ff02 	bl	8000fe8 <HAL_RCC_GetSysClockFreq>
 80011e4:	4b0b      	ldr	r3, [pc, #44]	; (8001214 <HAL_RCC_ClockConfig+0x15c>)
 80011e6:	22f0      	movs	r2, #240	; 0xf0
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	fa92 f2a2 	rbit	r2, r2
 80011ee:	fab2 f282 	clz	r2, r2
 80011f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011f6:	40d3      	lsrs	r3, r2
 80011f8:	4a07      	ldr	r2, [pc, #28]	; (8001218 <HAL_RCC_ClockConfig+0x160>)
 80011fa:	5cd3      	ldrb	r3, [r2, r3]
 80011fc:	40d8      	lsrs	r0, r3
 80011fe:	4b07      	ldr	r3, [pc, #28]	; (800121c <HAL_RCC_ClockConfig+0x164>)
 8001200:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001202:	2000      	movs	r0, #0
 8001204:	f000 fb46 	bl	8001894 <HAL_InitTick>
  
  return HAL_OK;
 8001208:	2000      	movs	r0, #0
}
 800120a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800120e:	bf00      	nop
 8001210:	40023c00 	.word	0x40023c00
 8001214:	40023800 	.word	0x40023800
 8001218:	08001a31 	.word	0x08001a31
 800121c:	20000000 	.word	0x20000000

08001220 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001220:	4b01      	ldr	r3, [pc, #4]	; (8001228 <HAL_RCC_GetHCLKFreq+0x8>)
 8001222:	6818      	ldr	r0, [r3, #0]
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000000 	.word	0x20000000

0800122c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 800122c:	4b08      	ldr	r3, [pc, #32]	; (8001250 <HAL_RCC_GetPCLK1Freq+0x24>)
 800122e:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	fa92 f2a2 	rbit	r2, r2
 8001238:	fab2 f282 	clz	r2, r2
 800123c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001240:	40d3      	lsrs	r3, r2
 8001242:	4a04      	ldr	r2, [pc, #16]	; (8001254 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001244:	5cd3      	ldrb	r3, [r2, r3]
 8001246:	4a04      	ldr	r2, [pc, #16]	; (8001258 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001248:	6810      	ldr	r0, [r2, #0]
}
 800124a:	40d8      	lsrs	r0, r3
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800
 8001254:	08001a31 	.word	0x08001a31
 8001258:	20000000 	.word	0x20000000

0800125c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800125c:	4b08      	ldr	r3, [pc, #32]	; (8001280 <HAL_RCC_GetPCLK2Freq+0x24>)
 800125e:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	fa92 f2a2 	rbit	r2, r2
 8001268:	fab2 f282 	clz	r2, r2
 800126c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001270:	40d3      	lsrs	r3, r2
 8001272:	4a04      	ldr	r2, [pc, #16]	; (8001284 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001274:	5cd3      	ldrb	r3, [r2, r3]
 8001276:	4a04      	ldr	r2, [pc, #16]	; (8001288 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001278:	6810      	ldr	r0, [r2, #0]
} 
 800127a:	40d8      	lsrs	r0, r3
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40023800 	.word	0x40023800
 8001284:	08001a31 	.word	0x08001a31
 8001288:	20000000 	.word	0x20000000

0800128c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800128c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001290:	4f67      	ldr	r7, [pc, #412]	; (8001430 <HAL_GPIO_Init+0x1a4>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001292:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001294:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8001438 <HAL_GPIO_Init+0x1ac>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001298:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800143c <HAL_GPIO_Init+0x1b0>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800129c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129e:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012a0:	9301      	str	r3, [sp, #4]
 80012a2:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80012a4:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 80012a6:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 80012a8:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 80012aa:	ea34 0303 	bics.w	r3, r4, r3
 80012ae:	f040 80b7 	bne.w	8001420 <HAL_GPIO_Init+0x194>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012b2:	684d      	ldr	r5, [r1, #4]
 80012b4:	f025 0a10 	bic.w	sl, r5, #16
 80012b8:	f1ba 0f02 	cmp.w	sl, #2
 80012bc:	d114      	bne.n	80012e8 <HAL_GPIO_Init+0x5c>
 80012be:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 80012c2:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80012c6:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012ca:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80012ce:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80012d2:	230f      	movs	r3, #15
 80012d4:	fa03 f30b 	lsl.w	r3, r3, fp
 80012d8:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80012dc:	690b      	ldr	r3, [r1, #16]
 80012de:	fa03 f30b 	lsl.w	r3, r3, fp
 80012e2:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 80012e4:	f8c9 3020 	str.w	r3, [r9, #32]
 80012e8:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ec:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012f0:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012f2:	fa09 f90b 	lsl.w	r9, r9, fp
 80012f6:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012fa:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012fe:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001302:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001306:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800130a:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800130c:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 8001310:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001312:	d80f      	bhi.n	8001334 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001314:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001316:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001318:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 800131c:	fa06 f60b 	lsl.w	r6, r6, fp
 8001320:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 8001322:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001324:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001326:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800132a:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800132e:	4096      	lsls	r6, r2
 8001330:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8001332:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001334:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001336:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800133a:	688b      	ldr	r3, [r1, #8]
 800133c:	fa03 f30b 	lsl.w	r3, r3, fp
 8001340:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8001344:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001346:	00eb      	lsls	r3, r5, #3
 8001348:	d56a      	bpl.n	8001420 <HAL_GPIO_Init+0x194>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	9303      	str	r3, [sp, #12]
 800134e:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001352:	4b38      	ldr	r3, [pc, #224]	; (8001434 <HAL_GPIO_Init+0x1a8>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001354:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001358:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 800135c:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 8001360:	f022 0903 	bic.w	r9, r2, #3
 8001364:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8001368:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800136c:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 8001370:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001372:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001378:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800137c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001380:	260f      	movs	r6, #15
 8001382:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001386:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001388:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800138c:	d018      	beq.n	80013c0 <HAL_GPIO_Init+0x134>
 800138e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001392:	4298      	cmp	r0, r3
 8001394:	d016      	beq.n	80013c4 <HAL_GPIO_Init+0x138>
 8001396:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800139a:	4298      	cmp	r0, r3
 800139c:	d014      	beq.n	80013c8 <HAL_GPIO_Init+0x13c>
 800139e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013a2:	4298      	cmp	r0, r3
 80013a4:	d012      	beq.n	80013cc <HAL_GPIO_Init+0x140>
 80013a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80013aa:	4298      	cmp	r0, r3
 80013ac:	d010      	beq.n	80013d0 <HAL_GPIO_Init+0x144>
 80013ae:	4540      	cmp	r0, r8
 80013b0:	d010      	beq.n	80013d4 <HAL_GPIO_Init+0x148>
 80013b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013b6:	4298      	cmp	r0, r3
 80013b8:	bf14      	ite	ne
 80013ba:	2308      	movne	r3, #8
 80013bc:	2306      	moveq	r3, #6
 80013be:	e00a      	b.n	80013d6 <HAL_GPIO_Init+0x14a>
 80013c0:	2300      	movs	r3, #0
 80013c2:	e008      	b.n	80013d6 <HAL_GPIO_Init+0x14a>
 80013c4:	2301      	movs	r3, #1
 80013c6:	e006      	b.n	80013d6 <HAL_GPIO_Init+0x14a>
 80013c8:	2302      	movs	r3, #2
 80013ca:	e004      	b.n	80013d6 <HAL_GPIO_Init+0x14a>
 80013cc:	2303      	movs	r3, #3
 80013ce:	e002      	b.n	80013d6 <HAL_GPIO_Init+0x14a>
 80013d0:	2304      	movs	r3, #4
 80013d2:	e000      	b.n	80013d6 <HAL_GPIO_Init+0x14a>
 80013d4:	2305      	movs	r3, #5
 80013d6:	fa03 f30a 	lsl.w	r3, r3, sl
 80013da:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013dc:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e0:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 80013e2:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013e4:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 80013e8:	bf0c      	ite	eq
 80013ea:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 80013ec:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 80013ee:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 80013f2:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013f6:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 80013fa:	bf0c      	ite	eq
 80013fc:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 80013fe:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 8001400:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001402:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001404:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8001408:	bf0c      	ite	eq
 800140a:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 800140c:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 800140e:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8001412:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001416:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8001418:	bf54      	ite	pl
 800141a:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 800141c:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 800141e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001420:	3201      	adds	r2, #1
 8001422:	2a10      	cmp	r2, #16
 8001424:	f47f af3e 	bne.w	80012a4 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8001428:	b005      	add	sp, #20
 800142a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800142e:	bf00      	nop
 8001430:	40013c00 	.word	0x40013c00
 8001434:	40020000 	.word	0x40020000
 8001438:	40023800 	.word	0x40023800
 800143c:	40021400 	.word	0x40021400

08001440 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001440:	b902      	cbnz	r2, 8001444 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001442:	0409      	lsls	r1, r1, #16
 8001444:	6181      	str	r1, [r0, #24]
 8001446:	4770      	bx	lr

08001448 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001448:	6943      	ldr	r3, [r0, #20]
 800144a:	4059      	eors	r1, r3
 800144c:	6141      	str	r1, [r0, #20]
 800144e:	4770      	bx	lr

08001450 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001450:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001452:	4b04      	ldr	r3, [pc, #16]	; (8001464 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001454:	6959      	ldr	r1, [r3, #20]
 8001456:	4201      	tst	r1, r0
 8001458:	d002      	beq.n	8001460 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800145a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800145c:	f7ff f886 	bl	800056c <HAL_GPIO_EXTI_Callback>
 8001460:	bd08      	pop	{r3, pc}
 8001462:	bf00      	nop
 8001464:	40013c00 	.word	0x40013c00

08001468 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001468:	6803      	ldr	r3, [r0, #0]
 800146a:	b2da      	uxtb	r2, r3
 800146c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001470:	f023 0303 	bic.w	r3, r3, #3
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001474:	2118      	movs	r1, #24
 8001476:	3a10      	subs	r2, #16
 8001478:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800147c:	4904      	ldr	r1, [pc, #16]	; (8001490 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 800147e:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001480:	bf88      	it	hi
 8001482:	3304      	addhi	r3, #4
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001484:	5c89      	ldrb	r1, [r1, r2]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001486:	6583      	str	r3, [r0, #88]	; 0x58
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001488:	65c1      	str	r1, [r0, #92]	; 0x5c
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800148a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 800148c:	4770      	bx	lr
 800148e:	bf00      	nop
 8001490:	08001a41 	.word	0x08001a41

08001494 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001494:	b570      	push	{r4, r5, r6, lr}
 8001496:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8001498:	f000 fa32 	bl	8001900 <HAL_GetTick>
 800149c:	4605      	mov	r5, r0
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800149e:	2c00      	cmp	r4, #0
 80014a0:	d064      	beq.n	800156c <HAL_DMA_Init+0xd8>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80014a2:	2300      	movs	r3, #0
 80014a4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014a8:	6822      	ldr	r2, [r4, #0]
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014aa:	2302      	movs	r3, #2
 80014ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80014b0:	6813      	ldr	r3, [r2, #0]
 80014b2:	f023 0301 	bic.w	r3, r3, #1
 80014b6:	6013      	str	r3, [r2, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014b8:	6821      	ldr	r1, [r4, #0]
 80014ba:	680b      	ldr	r3, [r1, #0]
 80014bc:	07d8      	lsls	r0, r3, #31
 80014be:	d508      	bpl.n	80014d2 <HAL_DMA_Init+0x3e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014c0:	f000 fa1e 	bl	8001900 <HAL_GetTick>
 80014c4:	1b40      	subs	r0, r0, r5
 80014c6:	2805      	cmp	r0, #5
 80014c8:	d9f6      	bls.n	80014b8 <HAL_DMA_Init+0x24>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014ca:	2320      	movs	r3, #32
 80014cc:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014ce:	2003      	movs	r0, #3
 80014d0:	e051      	b.n	8001576 <HAL_DMA_Init+0xe2>
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80014d2:	680b      	ldr	r3, [r1, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014d4:	4a29      	ldr	r2, [pc, #164]	; (800157c <HAL_DMA_Init+0xe8>)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014d6:	6865      	ldr	r5, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80014d8:	69a0      	ldr	r0, [r4, #24]
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80014da:	401a      	ands	r2, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80014dc:	68a3      	ldr	r3, [r4, #8]
 80014de:	431d      	orrs	r5, r3
 80014e0:	68e3      	ldr	r3, [r4, #12]
 80014e2:	431d      	orrs	r5, r3
 80014e4:	6923      	ldr	r3, [r4, #16]
 80014e6:	431d      	orrs	r5, r3
 80014e8:	6963      	ldr	r3, [r4, #20]
 80014ea:	432b      	orrs	r3, r5
 80014ec:	69e5      	ldr	r5, [r4, #28]
 80014ee:	4303      	orrs	r3, r0
 80014f0:	432b      	orrs	r3, r5
 80014f2:	6a25      	ldr	r5, [r4, #32]
 80014f4:	432b      	orrs	r3, r5
 80014f6:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80014f8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80014fa:	2a04      	cmp	r2, #4
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80014fc:	bf01      	itttt	eq
 80014fe:	6b25      	ldreq	r5, [r4, #48]	; 0x30
 8001500:	6ae6      	ldreq	r6, [r4, #44]	; 0x2c
 8001502:	4335      	orreq	r5, r6
 8001504:	432b      	orreq	r3, r5
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001506:	600b      	str	r3, [r1, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001508:	694b      	ldr	r3, [r1, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800150a:	2a04      	cmp	r2, #4

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800150c:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001510:	ea43 0302 	orr.w	r3, r3, r2

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001514:	d11c      	bne.n	8001550 <HAL_DMA_Init+0xbc>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001516:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001518:	4313      	orrs	r3, r2
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800151a:	b920      	cbnz	r0, 8001526 <HAL_DMA_Init+0x92>
  {
    switch (tmp)
 800151c:	2a01      	cmp	r2, #1
 800151e:	d00b      	beq.n	8001538 <HAL_DMA_Init+0xa4>
 8001520:	d313      	bcc.n	800154a <HAL_DMA_Init+0xb6>
 8001522:	2a02      	cmp	r2, #2
 8001524:	e010      	b.n	8001548 <HAL_DMA_Init+0xb4>
        break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001526:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800152a:	d10a      	bne.n	8001542 <HAL_DMA_Init+0xae>
  {
    switch (tmp)
 800152c:	2a03      	cmp	r2, #3
 800152e:	d80f      	bhi.n	8001550 <HAL_DMA_Init+0xbc>
 8001530:	e8df f002 	tbb	[pc, r2]
 8001534:	021e0b1e 	.word	0x021e0b1e
        break;
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001538:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800153a:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 800153e:	d107      	bne.n	8001550 <HAL_DMA_Init+0xbc>
 8001540:	e016      	b.n	8001570 <HAL_DMA_Init+0xdc>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001542:	2a02      	cmp	r2, #2
 8001544:	d914      	bls.n	8001570 <HAL_DMA_Init+0xdc>
 8001546:	2a03      	cmp	r2, #3
 8001548:	d102      	bne.n	8001550 <HAL_DMA_Init+0xbc>
      case DMA_FIFO_THRESHOLD_HALFFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800154a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800154c:	01d2      	lsls	r2, r2, #7
 800154e:	d40f      	bmi.n	8001570 <HAL_DMA_Init+0xdc>
      return HAL_ERROR; 
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001550:	614b      	str	r3, [r1, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001552:	4620      	mov	r0, r4
 8001554:	f7ff ff88 	bl	8001468 <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001558:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800155a:	233f      	movs	r3, #63	; 0x3f
 800155c:	4093      	lsls	r3, r2
 800155e:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001560:	2000      	movs	r0, #0
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001562:	2301      	movs	r3, #1
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001564:	6560      	str	r0, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001566:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 800156a:	bd70      	pop	{r4, r5, r6, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 800156c:	2001      	movs	r0, #1
 800156e:	bd70      	pop	{r4, r5, r6, pc}
    tmp |= hdma->Init.FIFOThreshold;
    
    if(DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001570:	2340      	movs	r3, #64	; 0x40
 8001572:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001574:	2001      	movs	r0, #1
 8001576:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 800157a:	bd70      	pop	{r4, r5, r6, pc}
 800157c:	f010803f 	.word	0xf010803f

08001580 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001580:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001582:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8001586:	2c01      	cmp	r4, #1
 8001588:	d038      	beq.n	80015fc <HAL_DMA_Start_IT+0x7c>
 800158a:	2401      	movs	r4, #1
 800158c:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001590:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001594:	6d86      	ldr	r6, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001596:	2c01      	cmp	r4, #1
 8001598:	f04f 0500 	mov.w	r5, #0
 800159c:	f04f 0402 	mov.w	r4, #2
 80015a0:	d128      	bne.n	80015f4 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015a2:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015a6:	6804      	ldr	r4, [r0, #0]
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015a8:	6545      	str	r5, [r0, #84]	; 0x54
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80015aa:	6825      	ldr	r5, [r4, #0]
 80015ac:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80015b0:	6025      	str	r5, [r4, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80015b2:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015b4:	6883      	ldr	r3, [r0, #8]
 80015b6:	2b40      	cmp	r3, #64	; 0x40
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80015b8:	bf0e      	itee	eq
 80015ba:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80015bc:	60a1      	strne	r1, [r4, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80015be:	60e2      	strne	r2, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015c0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80015c2:	bf08      	it	eq
 80015c4:	60e1      	streq	r1, [r4, #12]
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015c6:	233f      	movs	r3, #63	; 0x3f
 80015c8:	4093      	lsls	r3, r2
 80015ca:	60b3      	str	r3, [r6, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015cc:	6823      	ldr	r3, [r4, #0]
 80015ce:	f043 0316 	orr.w	r3, r3, #22
 80015d2:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80015d4:	6963      	ldr	r3, [r4, #20]
 80015d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015da:	6163      	str	r3, [r4, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015dc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80015de:	b11b      	cbz	r3, 80015e8 <HAL_DMA_Start_IT+0x68>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015e0:	6823      	ldr	r3, [r4, #0]
 80015e2:	f043 0308 	orr.w	r3, r3, #8
 80015e6:	6023      	str	r3, [r4, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015e8:	6823      	ldr	r3, [r4, #0]
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6023      	str	r3, [r4, #0]
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  HAL_StatusTypeDef status = HAL_OK;
 80015f0:	2000      	movs	r0, #0
 80015f2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015f4:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80015f8:	4620      	mov	r0, r4
 80015fa:	bd70      	pop	{r4, r5, r6, pc}
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80015fc:	2002      	movs	r0, #2
    /* Return error status */
    status = HAL_BUSY;
  }
  
  return status;
}
 80015fe:	bd70      	pop	{r4, r5, r6, pc}

08001600 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001600:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001604:	2b02      	cmp	r3, #2
 8001606:	d003      	beq.n	8001610 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800160c:	2001      	movs	r0, #1
 800160e:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001610:	6802      	ldr	r2, [r0, #0]
    return HAL_ERROR;
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001612:	2305      	movs	r3, #5
 8001614:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001618:	6813      	ldr	r3, [r2, #0]
 800161a:	f023 0301 	bic.w	r3, r3, #1
 800161e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8001620:	2000      	movs	r0, #0
}
 8001622:	4770      	bx	lr

08001624 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001624:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800162a:	6d85      	ldr	r5, [r0, #88]	; 0x58
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 800162c:	4b59      	ldr	r3, [pc, #356]	; (8001794 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800162e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8001630:	681f      	ldr	r7, [r3, #0]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;
 8001632:	682e      	ldr	r6, [r5, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001634:	2308      	movs	r3, #8
 8001636:	4093      	lsls	r3, r2
 8001638:	421e      	tst	r6, r3
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800163a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800163c:	d00c      	beq.n	8001658 <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800163e:	6801      	ldr	r1, [r0, #0]
 8001640:	6808      	ldr	r0, [r1, #0]
 8001642:	0740      	lsls	r0, r0, #29
 8001644:	d508      	bpl.n	8001658 <HAL_DMA_IRQHandler+0x34>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001646:	6808      	ldr	r0, [r1, #0]
 8001648:	f020 0004 	bic.w	r0, r0, #4
 800164c:	6008      	str	r0, [r1, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800164e:	60ab      	str	r3, [r5, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001650:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001658:	4b4f      	ldr	r3, [pc, #316]	; (8001798 <HAL_DMA_IRQHandler+0x174>)
 800165a:	4093      	lsls	r3, r2
 800165c:	421e      	tst	r6, r3
 800165e:	d008      	beq.n	8001672 <HAL_DMA_IRQHandler+0x4e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001660:	6821      	ldr	r1, [r4, #0]
 8001662:	6949      	ldr	r1, [r1, #20]
 8001664:	0609      	lsls	r1, r1, #24
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001666:	bf41      	itttt	mi
 8001668:	60ab      	strmi	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800166a:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 800166c:	f043 0302 	orrmi.w	r3, r3, #2
 8001670:	6563      	strmi	r3, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001672:	4b4a      	ldr	r3, [pc, #296]	; (800179c <HAL_DMA_IRQHandler+0x178>)
 8001674:	4093      	lsls	r3, r2
 8001676:	421e      	tst	r6, r3
 8001678:	d008      	beq.n	800168c <HAL_DMA_IRQHandler+0x68>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800167a:	6821      	ldr	r1, [r4, #0]
 800167c:	6809      	ldr	r1, [r1, #0]
 800167e:	0788      	lsls	r0, r1, #30
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001680:	bf41      	itttt	mi
 8001682:	60ab      	strmi	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001684:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 8001686:	f043 0304 	orrmi.w	r3, r3, #4
 800168a:	6563      	strmi	r3, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800168c:	2310      	movs	r3, #16
 800168e:	fa03 f202 	lsl.w	r2, r3, r2
 8001692:	4216      	tst	r6, r2
 8001694:	d017      	beq.n	80016c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001696:	6823      	ldr	r3, [r4, #0]
 8001698:	6819      	ldr	r1, [r3, #0]
 800169a:	0709      	lsls	r1, r1, #28
 800169c:	d513      	bpl.n	80016c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800169e:	60aa      	str	r2, [r5, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	0350      	lsls	r0, r2, #13
 80016a4:	d504      	bpl.n	80016b0 <HAL_DMA_IRQHandler+0x8c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	0319      	lsls	r1, r3, #12
 80016aa:	d508      	bpl.n	80016be <HAL_DMA_IRQHandler+0x9a>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016ac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80016ae:	e007      	b.n	80016c0 <HAL_DMA_IRQHandler+0x9c>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	05d2      	lsls	r2, r2, #23
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016b4:	bf5e      	ittt	pl
 80016b6:	681a      	ldrpl	r2, [r3, #0]
 80016b8:	f022 0208 	bicpl.w	r2, r2, #8
 80016bc:	601a      	strpl	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80016c0:	b10b      	cbz	r3, 80016c6 <HAL_DMA_IRQHandler+0xa2>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016c2:	4620      	mov	r0, r4
 80016c4:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016c6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80016c8:	2220      	movs	r2, #32
 80016ca:	408a      	lsls	r2, r1
 80016cc:	4216      	tst	r6, r2
 80016ce:	d03b      	beq.n	8001748 <HAL_DMA_IRQHandler+0x124>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016d0:	6823      	ldr	r3, [r4, #0]
 80016d2:	6818      	ldr	r0, [r3, #0]
 80016d4:	06c6      	lsls	r6, r0, #27
 80016d6:	d537      	bpl.n	8001748 <HAL_DMA_IRQHandler+0x124>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016d8:	60aa      	str	r2, [r5, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016da:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80016de:	2a05      	cmp	r2, #5
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016e0:	681a      	ldr	r2, [r3, #0]
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80016e2:	d119      	bne.n	8001718 <HAL_DMA_IRQHandler+0xf4>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016e4:	f022 0216 	bic.w	r2, r2, #22
 80016e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016ea:	695a      	ldr	r2, [r3, #20]
 80016ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016f2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80016f4:	b90a      	cbnz	r2, 80016fa <HAL_DMA_IRQHandler+0xd6>
 80016f6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80016f8:	b11a      	cbz	r2, 8001702 <HAL_DMA_IRQHandler+0xde>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	f022 0208 	bic.w	r2, r2, #8
 8001700:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001702:	233f      	movs	r3, #63	; 0x3f
 8001704:	408b      	lsls	r3, r1
 8001706:	60ab      	str	r3, [r5, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001708:	2300      	movs	r3, #0
 800170a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800170e:	2301      	movs	r3, #1
 8001710:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001714:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001716:	e037      	b.n	8001788 <HAL_DMA_IRQHandler+0x164>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001718:	0350      	lsls	r0, r2, #13
 800171a:	d504      	bpl.n	8001726 <HAL_DMA_IRQHandler+0x102>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	0319      	lsls	r1, r3, #12
 8001720:	d40e      	bmi.n	8001740 <HAL_DMA_IRQHandler+0x11c>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001722:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001724:	e00d      	b.n	8001742 <HAL_DMA_IRQHandler+0x11e>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800172c:	d108      	bne.n	8001740 <HAL_DMA_IRQHandler+0x11c>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800172e:	6819      	ldr	r1, [r3, #0]
 8001730:	f021 0110 	bic.w	r1, r1, #16
 8001734:	6019      	str	r1, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001736:	2301      	movs	r3, #1
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001738:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800173c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001740:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001742:	b10b      	cbz	r3, 8001748 <HAL_DMA_IRQHandler+0x124>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001744:	4620      	mov	r0, r4
 8001746:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001748:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800174a:	b303      	cbz	r3, 800178e <HAL_DMA_IRQHandler+0x16a>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800174c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800174e:	07da      	lsls	r2, r3, #31
 8001750:	d519      	bpl.n	8001786 <HAL_DMA_IRQHandler+0x162>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001752:	2305      	movs	r3, #5

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001754:	6822      	ldr	r2, [r4, #0]
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001756:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800175a:	6813      	ldr	r3, [r2, #0]
 800175c:	f023 0301 	bic.w	r3, r3, #1
 8001760:	6013      	str	r3, [r2, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8001762:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001766:	fbb7 f7f3 	udiv	r7, r7, r3
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);

      do
      {
        if (++count > timeout)
 800176a:	9b01      	ldr	r3, [sp, #4]
 800176c:	3301      	adds	r3, #1
 800176e:	429f      	cmp	r7, r3
 8001770:	9301      	str	r3, [sp, #4]
 8001772:	d302      	bcc.n	800177a <HAL_DMA_IRQHandler+0x156>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001774:	6813      	ldr	r3, [r2, #0]
 8001776:	07db      	lsls	r3, r3, #31
 8001778:	d4f7      	bmi.n	800176a <HAL_DMA_IRQHandler+0x146>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800177a:	2300      	movs	r3, #0
 800177c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001780:	2301      	movs	r3, #1
 8001782:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001786:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001788:	b10b      	cbz	r3, 800178e <HAL_DMA_IRQHandler+0x16a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800178a:	4620      	mov	r0, r4
 800178c:	4798      	blx	r3
    }
  }
}
 800178e:	b003      	add	sp, #12
 8001790:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001792:	bf00      	nop
 8001794:	20000000 	.word	0x20000000
 8001798:	00800001 	.word	0x00800001
 800179c:	00800004 	.word	0x00800004

080017a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a0:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80017a2:	68d3      	ldr	r3, [r2, #12]
 80017a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80017a8:	041b      	lsls	r3, r3, #16
 80017aa:	0c1b      	lsrs	r3, r3, #16
 80017ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80017b0:	0200      	lsls	r0, r0, #8
 80017b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80017ba:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80017bc:	60d3      	str	r3, [r2, #12]
 80017be:	4770      	bx	lr
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017c4:	4b17      	ldr	r3, [pc, #92]	; (8001824 <HAL_NVIC_SetPriority+0x60>)
 80017c6:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017cc:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ce:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017d2:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d4:	2c04      	cmp	r4, #4
 80017d6:	bf28      	it	cs
 80017d8:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017da:	2d06      	cmp	r5, #6

  return (
 80017dc:	f04f 0501 	mov.w	r5, #1
 80017e0:	fa05 f404 	lsl.w	r4, r5, r4
 80017e4:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e8:	bf8c      	ite	hi
 80017ea:	3b03      	subhi	r3, #3
 80017ec:	2300      	movls	r3, #0

  return (
 80017ee:	400c      	ands	r4, r1
 80017f0:	409c      	lsls	r4, r3
 80017f2:	fa05 f303 	lsl.w	r3, r5, r3
 80017f6:	3b01      	subs	r3, #1
 80017f8:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80017fa:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80017fc:	ea42 0204 	orr.w	r2, r2, r4
 8001800:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001804:	bfaf      	iteee	ge
 8001806:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180a:	f000 000f 	andlt.w	r0, r0, #15
 800180e:	4b06      	ldrlt	r3, [pc, #24]	; (8001828 <HAL_NVIC_SetPriority+0x64>)
 8001810:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001812:	bfa5      	ittet	ge
 8001814:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001818:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181a:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001820:	bd30      	pop	{r4, r5, pc}
 8001822:	bf00      	nop
 8001824:	e000ed00 	.word	0xe000ed00
 8001828:	e000ed14 	.word	0xe000ed14

0800182c <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800182c:	0942      	lsrs	r2, r0, #5
 800182e:	2301      	movs	r3, #1
 8001830:	f000 001f 	and.w	r0, r0, #31
 8001834:	fa03 f000 	lsl.w	r0, r3, r0
 8001838:	4b01      	ldr	r3, [pc, #4]	; (8001840 <HAL_NVIC_EnableIRQ+0x14>)
 800183a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800183e:	4770      	bx	lr
 8001840:	e000e100 	.word	0xe000e100

08001844 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001844:	3801      	subs	r0, #1
 8001846:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800184a:	d20a      	bcs.n	8001862 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184e:	4a07      	ldr	r2, [pc, #28]	; (800186c <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001850:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001852:	21f0      	movs	r1, #240	; 0xf0
 8001854:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001858:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800185a:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800185c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8001862:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000e010 	.word	0xe000e010
 800186c:	e000ed00 	.word	0xe000ed00

08001870 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001872:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001874:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001876:	bf0c      	ite	eq
 8001878:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800187c:	f022 0204 	bicne.w	r2, r2, #4
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	4770      	bx	lr
 8001884:	e000e010 	.word	0xe000e010

08001888 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001888:	4770      	bx	lr

0800188a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800188a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800188c:	f7ff fffc 	bl	8001888 <HAL_SYSTICK_Callback>
 8001890:	bd08      	pop	{r3, pc}
	...

08001894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001894:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001898:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800189a:	6818      	ldr	r0, [r3, #0]
 800189c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80018a4:	f7ff ffce 	bl	8001844 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 80018a8:	2200      	movs	r2, #0
 80018aa:	4621      	mov	r1, r4
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	f7ff ff88 	bl	80017c4 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80018b4:	2000      	movs	r0, #0
 80018b6:	bd10      	pop	{r4, pc}
 80018b8:	20000000 	.word	0x20000000

080018bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018bc:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018be:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <HAL_Init+0x30>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018c6:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80018ce:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018d6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018d8:	2003      	movs	r0, #3
 80018da:	f7ff ff61 	bl	80017a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018de:	2000      	movs	r0, #0
 80018e0:	f7ff ffd8 	bl	8001894 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80018e4:	f7fe fcb4 	bl	8000250 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80018e8:	2000      	movs	r0, #0
 80018ea:	bd08      	pop	{r3, pc}
 80018ec:	40023c00 	.word	0x40023c00

080018f0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80018f0:	4a02      	ldr	r2, [pc, #8]	; (80018fc <HAL_IncTick+0xc>)
 80018f2:	6813      	ldr	r3, [r2, #0]
 80018f4:	3301      	adds	r3, #1
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	20000144 	.word	0x20000144

08001900 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001900:	4b01      	ldr	r3, [pc, #4]	; (8001908 <HAL_GetTick+0x8>)
 8001902:	6818      	ldr	r0, [r3, #0]
}
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000144 	.word	0x20000144

0800190c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800190c:	490f      	ldr	r1, [pc, #60]	; (800194c <SystemInit+0x40>)
 800190e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001912:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800191a:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <SystemInit+0x44>)
 800191c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800191e:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001920:	f042 0201 	orr.w	r2, r2, #1
 8001924:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001926:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800192e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001932:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001934:	4a07      	ldr	r2, [pc, #28]	; (8001954 <SystemInit+0x48>)
 8001936:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001938:	681a      	ldr	r2, [r3, #0]
 800193a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800193e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001940:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001942:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001946:	608b      	str	r3, [r1, #8]
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000ed00 	.word	0xe000ed00
 8001950:	40023800 	.word	0x40023800
 8001954:	24003010 	.word	0x24003010

08001958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001958:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001990 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800195c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800195e:	e003      	b.n	8001968 <LoopCopyDataInit>

08001960 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001962:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001964:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001966:	3104      	adds	r1, #4

08001968 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001968:	480b      	ldr	r0, [pc, #44]	; (8001998 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800196a:	4b0c      	ldr	r3, [pc, #48]	; (800199c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800196c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800196e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001970:	d3f6      	bcc.n	8001960 <CopyDataInit>
  ldr  r2, =_sbss
 8001972:	4a0b      	ldr	r2, [pc, #44]	; (80019a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001974:	e002      	b.n	800197c <LoopFillZerobss>

08001976 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001976:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001978:	f842 3b04 	str.w	r3, [r2], #4

0800197c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800197e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001980:	d3f9      	bcc.n	8001976 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001982:	f7ff ffc3 	bl	800190c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001986:	f000 f811 	bl	80019ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800198a:	f7fe fd55 	bl	8000438 <main>
  bx  lr    
 800198e:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001990:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001994:	08001a54 	.word	0x08001a54
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001998:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800199c:	20000004 	.word	0x20000004
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80019a0:	20000004 	.word	0x20000004
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80019a4:	20000148 	.word	0x20000148

080019a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019a8:	e7fe      	b.n	80019a8 <ADC_IRQHandler>
	...

080019ac <__libc_init_array>:
 80019ac:	b570      	push	{r4, r5, r6, lr}
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <__libc_init_array+0x3c>)
 80019b0:	4c0e      	ldr	r4, [pc, #56]	; (80019ec <__libc_init_array+0x40>)
 80019b2:	1ae4      	subs	r4, r4, r3
 80019b4:	10a4      	asrs	r4, r4, #2
 80019b6:	2500      	movs	r5, #0
 80019b8:	461e      	mov	r6, r3
 80019ba:	42a5      	cmp	r5, r4
 80019bc:	d004      	beq.n	80019c8 <__libc_init_array+0x1c>
 80019be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019c2:	4798      	blx	r3
 80019c4:	3501      	adds	r5, #1
 80019c6:	e7f8      	b.n	80019ba <__libc_init_array+0xe>
 80019c8:	f000 f816 	bl	80019f8 <_init>
 80019cc:	4c08      	ldr	r4, [pc, #32]	; (80019f0 <__libc_init_array+0x44>)
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <__libc_init_array+0x48>)
 80019d0:	1ae4      	subs	r4, r4, r3
 80019d2:	10a4      	asrs	r4, r4, #2
 80019d4:	2500      	movs	r5, #0
 80019d6:	461e      	mov	r6, r3
 80019d8:	42a5      	cmp	r5, r4
 80019da:	d004      	beq.n	80019e6 <__libc_init_array+0x3a>
 80019dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80019e0:	4798      	blx	r3
 80019e2:	3501      	adds	r5, #1
 80019e4:	e7f8      	b.n	80019d8 <__libc_init_array+0x2c>
 80019e6:	bd70      	pop	{r4, r5, r6, pc}
 80019e8:	08001a4c 	.word	0x08001a4c
 80019ec:	08001a4c 	.word	0x08001a4c
 80019f0:	08001a50 	.word	0x08001a50
 80019f4:	08001a4c 	.word	0x08001a4c

080019f8 <_init>:
 80019f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019fa:	bf00      	nop
 80019fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019fe:	bc08      	pop	{r3}
 8001a00:	469e      	mov	lr, r3
 8001a02:	4770      	bx	lr

08001a04 <_fini>:
 8001a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a06:	bf00      	nop
 8001a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a0a:	bc08      	pop	{r3}
 8001a0c:	469e      	mov	lr, r3
 8001a0e:	4770      	bx	lr
