
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f88  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800314c  0800314c  0001314c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080031a8  080031a8  000131a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080031ac  080031ac  000131ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  080031b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00003eb0  20000008  080031b8  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20003eb8  080031b8  00023eb8  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013c3b  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003020  00000000  00000000  00033c73  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d80  00000000  00000000  00036c98  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001328  00000000  00000000  00037a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00007063  00000000  00000000  00038d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00005008  00000000  00000000  0003fda3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007e  00000000  00000000  00044dab  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002680  00000000  00000000  00044e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    0000a4e6  00000000  00000000  000474ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000008 	.word	0x20000008
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08003134 	.word	0x08003134

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	08003134 	.word	0x08003134

08000204 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 8000204:	f001 bdac 	b.w	8001d60 <osSystickHandler>

08000208 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000208:	4801      	ldr	r0, [pc, #4]	; (8000210 <DMA1_Stream5_IRQHandler+0x8>)
 800020a:	f002 bdaf 	b.w	8002d6c <HAL_DMA_IRQHandler>
 800020e:	bf00      	nop
 8000210:	20003dac 	.word	0x20003dac

08000214 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000214:	4801      	ldr	r0, [pc, #4]	; (800021c <DMA1_Stream6_IRQHandler+0x8>)
 8000216:	f002 bda9 	b.w	8002d6c <HAL_DMA_IRQHandler>
 800021a:	bf00      	nop
 800021c:	20003e10 	.word	0x20003e10

08000220 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000220:	4801      	ldr	r0, [pc, #4]	; (8000228 <TIM1_UP_TIM10_IRQHandler+0x8>)
 8000222:	f001 bffd 	b.w	8002220 <HAL_TIM_IRQHandler>
 8000226:	bf00      	nop
 8000228:	20003d6c 	.word	0x20003d6c

0800022c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800022c:	4801      	ldr	r0, [pc, #4]	; (8000234 <USART2_IRQHandler+0x8>)
 800022e:	f001 bf3b 	b.w	80020a8 <HAL_UART_IRQHandler>
 8000232:	bf00      	nop
 8000234:	20003e70 	.word	0x20003e70

08000238 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000238:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800023c:	f002 bcec 	b.w	8002c18 <HAL_GPIO_EXTI_IRQHandler>

08000240 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000240:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000242:	4601      	mov	r1, r0
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000244:	b089      	sub	sp, #36	; 0x24
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000246:	2200      	movs	r2, #0
 8000248:	2019      	movs	r0, #25
 800024a:	f002 fe5f 	bl	8002f0c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800024e:	2019      	movs	r0, #25
 8000250:	f002 fe90 	bl	8002f74 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000254:	2500      	movs	r5, #0
 8000256:	4b15      	ldr	r3, [pc, #84]	; (80002ac <HAL_InitTick+0x6c>)
 8000258:	9502      	str	r5, [sp, #8]
 800025a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800025c:	4c14      	ldr	r4, [pc, #80]	; (80002b0 <HAL_InitTick+0x70>)
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800025e:	f042 0201 	orr.w	r2, r2, #1
 8000262:	645a      	str	r2, [r3, #68]	; 0x44
 8000264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000266:	f003 0301 	and.w	r3, r3, #1
 800026a:	9302      	str	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800026c:	a901      	add	r1, sp, #4
 800026e:	a803      	add	r0, sp, #12
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000270:	9b02      	ldr	r3, [sp, #8]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000272:	f002 fbc9 	bl	8002a08 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000276:	f002 fbaf 	bl	80029d8 <HAL_RCC_GetPCLK2Freq>
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800027a:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <HAL_InitTick+0x74>)
 800027c:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800027e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000282:	60e3      	str	r3, [r4, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	4b0c      	ldr	r3, [pc, #48]	; (80002b8 <HAL_InitTick+0x78>)
 8000288:	fbb0 f0f3 	udiv	r0, r0, r3
 800028c:	3801      	subs	r0, #1
 800028e:	6060      	str	r0, [r4, #4]
  htim1.Init.ClockDivision = 0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000290:	4620      	mov	r0, r4
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 8000292:	6125      	str	r5, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000294:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000296:	f002 f8c9 	bl	800242c <HAL_TIM_Base_Init>
 800029a:	b918      	cbnz	r0, 80002a4 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800029c:	4620      	mov	r0, r4
 800029e:	f001 ffb0 	bl	8002202 <HAL_TIM_Base_Start_IT>
 80002a2:	e000      	b.n	80002a6 <HAL_InitTick+0x66>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80002a4:	2001      	movs	r0, #1
}
 80002a6:	b009      	add	sp, #36	; 0x24
 80002a8:	bd30      	pop	{r4, r5, pc}
 80002aa:	bf00      	nop
 80002ac:	40023800 	.word	0x40023800
 80002b0:	20003d6c 	.word	0x20003d6c
 80002b4:	40010000 	.word	0x40010000
 80002b8:	000f4240 	.word	0x000f4240

080002bc <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002be:	2003      	movs	r0, #3
 80002c0:	f002 fe12 	bl	8002ee8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80002c4:	2200      	movs	r2, #0
 80002c6:	4611      	mov	r1, r2
 80002c8:	f06f 000b 	mvn.w	r0, #11
 80002cc:	f002 fe1e 	bl	8002f0c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80002d0:	2200      	movs	r2, #0
 80002d2:	4611      	mov	r1, r2
 80002d4:	f06f 000a 	mvn.w	r0, #10
 80002d8:	f002 fe18 	bl	8002f0c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80002dc:	2200      	movs	r2, #0
 80002de:	4611      	mov	r1, r2
 80002e0:	f06f 0009 	mvn.w	r0, #9
 80002e4:	f002 fe12 	bl	8002f0c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80002e8:	2200      	movs	r2, #0
 80002ea:	4611      	mov	r1, r2
 80002ec:	f06f 0004 	mvn.w	r0, #4
 80002f0:	f002 fe0c 	bl	8002f0c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80002f4:	2200      	movs	r2, #0
 80002f6:	4611      	mov	r1, r2
 80002f8:	f06f 0003 	mvn.w	r0, #3
 80002fc:	f002 fe06 	bl	8002f0c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000300:	2200      	movs	r2, #0
 8000302:	210f      	movs	r1, #15
 8000304:	f06f 0001 	mvn.w	r0, #1
 8000308:	f002 fe00 	bl	8002f0c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800030c:	2200      	movs	r2, #0
 800030e:	210f      	movs	r1, #15
 8000310:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000314:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000318:	f002 bdf8 	b.w	8002f0c <HAL_NVIC_SetPriority>

0800031c <HAL_UART_MspInit>:

  /* USER CODE END MspInit 1 */
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800031c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800031e:	6802      	ldr	r2, [r0, #0]
 8000320:	4b2f      	ldr	r3, [pc, #188]	; (80003e0 <HAL_UART_MspInit+0xc4>)
 8000322:	429a      	cmp	r2, r3

  /* USER CODE END MspInit 1 */
}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000324:	b086      	sub	sp, #24
 8000326:	4606      	mov	r6, r0

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 8000328:	d158      	bne.n	80003dc <HAL_UART_MspInit+0xc0>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800032a:	2500      	movs	r5, #0
 800032c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8000330:	9500      	str	r5, [sp, #0]
 8000332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000334:	482b      	ldr	r0, [pc, #172]	; (80003e4 <HAL_UART_MspInit+0xc8>)

    /* Peripheral DMA init*/
  
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000336:	4c2c      	ldr	r4, [pc, #176]	; (80003e8 <HAL_UART_MspInit+0xcc>)
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000338:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800033c:	641a      	str	r2, [r3, #64]	; 0x40
 800033e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	9b00      	ldr	r3, [sp, #0]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000348:	230c      	movs	r3, #12
 800034a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800034c:	2302      	movs	r3, #2
 800034e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000350:	2301      	movs	r3, #1
 8000352:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000354:	2303      	movs	r3, #3
 8000356:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000358:	a901      	add	r1, sp, #4
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800035a:	2307      	movs	r3, #7
 800035c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800035e:	f002 fb71 	bl	8002a44 <HAL_GPIO_Init>

    /* Peripheral DMA init*/
  
    hdma_usart2_rx.Instance = DMA1_Stream5;
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000362:	4b22      	ldr	r3, [pc, #136]	; (80003ec <HAL_UART_MspInit+0xd0>)
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000364:	60a5      	str	r5, [r4, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* Peripheral DMA init*/
  
    hdma_usart2_rx.Instance = DMA1_Stream5;
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000366:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 800036a:	e884 1008 	stmia.w	r4, {r3, ip}
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800036e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000372:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000374:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000376:	f44f 7380 	mov.w	r3, #256	; 0x100
    /* Peripheral DMA init*/
  
    hdma_usart2_rx.Instance = DMA1_Stream5;
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800037a:	60e5      	str	r5, [r4, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800037c:	6165      	str	r5, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800037e:	61a5      	str	r5, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000380:	61e3      	str	r3, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000382:	6225      	str	r5, [r4, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000384:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000386:	f002 fc69 	bl	8002c5c <HAL_DMA_Init>
 800038a:	b108      	cbz	r0, 8000390 <HAL_UART_MspInit+0x74>
    {
      Error_Handler();
 800038c:	f000 f98c 	bl	80006a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000390:	6374      	str	r4, [r6, #52]	; 0x34

    hdma_usart2_tx.Instance = DMA1_Stream6;
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000392:	4b17      	ldr	r3, [pc, #92]	; (80003f0 <HAL_UART_MspInit+0xd4>)
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000394:	63a6      	str	r6, [r4, #56]	; 0x38

    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000396:	4c17      	ldr	r4, [pc, #92]	; (80003f4 <HAL_UART_MspInit+0xd8>)
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000398:	f44f 6280 	mov.w	r2, #1024	; 0x400

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);

    hdma_usart2_tx.Instance = DMA1_Stream6;
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800039c:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
 80003a0:	f04f 0e40 	mov.w	lr, #64	; 0x40
 80003a4:	e884 4028 	stmia.w	r4, {r3, r5, lr}
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80003a8:	6122      	str	r2, [r4, #16]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);

    hdma_usart2_tx.Instance = DMA1_Stream6;
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80003aa:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80003ac:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80003b0:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);

    hdma_usart2_tx.Instance = DMA1_Stream6;
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80003b2:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80003b4:	6163      	str	r3, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80003b6:	61a3      	str	r3, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 80003b8:	61e2      	str	r2, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80003ba:	6223      	str	r3, [r4, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80003bc:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80003be:	f002 fc4d 	bl	8002c5c <HAL_DMA_Init>
 80003c2:	b108      	cbz	r0, 80003c8 <HAL_UART_MspInit+0xac>
    {
      Error_Handler();
 80003c4:	f000 f970 	bl	80006a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80003c8:	6334      	str	r4, [r6, #48]	; 0x30

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80003ca:	2026      	movs	r0, #38	; 0x26
 80003cc:	2200      	movs	r2, #0
 80003ce:	2105      	movs	r1, #5
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
    {
      Error_Handler();
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80003d0:	63a6      	str	r6, [r4, #56]	; 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80003d2:	f002 fd9b 	bl	8002f0c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80003d6:	2026      	movs	r0, #38	; 0x26
 80003d8:	f002 fdcc 	bl	8002f74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80003dc:	b006      	add	sp, #24
 80003de:	bd70      	pop	{r4, r5, r6, pc}
 80003e0:	40004400 	.word	0x40004400
 80003e4:	40020000 	.word	0x40020000
 80003e8:	20003dac 	.word	0x20003dac
 80003ec:	40026088 	.word	0x40026088
 80003f0:	400260a0 	.word	0x400260a0
 80003f4:	20003e10 	.word	0x20003e10

080003f8 <StartDefaultTask>:
}
///* USER CODE END 4 */
//
///* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 80003f8:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	 while(1) {
		  if(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) {
			  osSemaphoreRelease(semHandle);
 80003fa:	4d08      	ldr	r5, [pc, #32]	; (800041c <StartDefaultTask+0x24>)
{

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	 while(1) {
		  if(!HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin)) {
 80003fc:	4808      	ldr	r0, [pc, #32]	; (8000420 <StartDefaultTask+0x28>)
 80003fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000402:	f002 fbf9 	bl	8002bf8 <HAL_GPIO_ReadPin>
 8000406:	4604      	mov	r4, r0
 8000408:	2800      	cmp	r0, #0
 800040a:	d1f7      	bne.n	80003fc <StartDefaultTask+0x4>
			  osSemaphoreRelease(semHandle);
 800040c:	6828      	ldr	r0, [r5, #0]
 800040e:	f001 fc83 	bl	8001d18 <osSemaphoreRelease>
			  osThreadTerminate(NULL);
 8000412:	4620      	mov	r0, r4
 8000414:	f001 fc37 	bl	8001c86 <osThreadTerminate>
 8000418:	e7f0      	b.n	80003fc <StartDefaultTask+0x4>
 800041a:	bf00      	nop
 800041c:	20003eb0 	.word	0x20003eb0
 8000420:	40020800 	.word	0x40020800

08000424 <BlinkTask>:

}

///* USER CODE BEGIN 4 */
void BlinkTask(void const *argument)
{
 8000424:	b508      	push	{r3, lr}
	if(osSemaphoreWait(semHandle, osWaitForever) == osOK) {
 8000426:	4b08      	ldr	r3, [pc, #32]	; (8000448 <BlinkTask+0x24>)
 8000428:	f04f 31ff 	mov.w	r1, #4294967295
 800042c:	6818      	ldr	r0, [r3, #0]
 800042e:	f001 fc4b 	bl	8001cc8 <osSemaphoreWait>
 8000432:	b940      	cbnz	r0, 8000446 <BlinkTask+0x22>
		while(1) {
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000434:	2120      	movs	r1, #32
 8000436:	4805      	ldr	r0, [pc, #20]	; (800044c <BlinkTask+0x28>)
 8000438:	f002 fbe8 	bl	8002c0c <HAL_GPIO_TogglePin>
			osDelay(500);
 800043c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000440:	f001 fc26 	bl	8001c90 <osDelay>
 8000444:	e7f6      	b.n	8000434 <BlinkTask+0x10>
 8000446:	bd08      	pop	{r3, pc}
 8000448:	20003eb0 	.word	0x20003eb0
 800044c:	40020000 	.word	0x40020000

08000450 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000450:	b570      	push	{r4, r5, r6, lr}
 8000452:	b094      	sub	sp, #80	; 0x50

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000454:	2200      	movs	r2, #0
 8000456:	4b27      	ldr	r3, [pc, #156]	; (80004f4 <SystemClock_Config+0xa4>)
 8000458:	9200      	str	r2, [sp, #0]
 800045a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800045c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000460:	6419      	str	r1, [r3, #64]	; 0x40
 8000462:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000464:	4924      	ldr	r1, [pc, #144]	; (80004f8 <SystemClock_Config+0xa8>)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800046a:	9300      	str	r3, [sp, #0]
 800046c:	9b00      	ldr	r3, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800046e:	9201      	str	r2, [sp, #4]
 8000470:	680b      	ldr	r3, [r1, #0]
 8000472:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000476:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800047a:	600b      	str	r3, [r1, #0]
 800047c:	680b      	ldr	r3, [r1, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800047e:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000480:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000484:	9301      	str	r3, [sp, #4]
 8000486:	9b01      	ldr	r3, [sp, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000488:	2301      	movs	r3, #1
 800048a:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800048c:	2310      	movs	r3, #16

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800048e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000490:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000492:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000494:	2604      	movs	r6, #4
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000496:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800049a:	a807      	add	r0, sp, #28

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800049c:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800049e:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
 80004a0:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80004a2:	9611      	str	r6, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80004a4:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004a6:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a8:	f001 ffda 	bl	8002460 <HAL_RCC_OscConfig>
 80004ac:	b100      	cbz	r0, 80004b0 <SystemClock_Config+0x60>
 80004ae:	e7fe      	b.n	80004ae <SystemClock_Config+0x5e>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b4:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004b6:	4621      	mov	r1, r4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b8:	250f      	movs	r5, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ba:	a802      	add	r0, sp, #8
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004bc:	9403      	str	r4, [sp, #12]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004be:	9502      	str	r5, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004c0:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80004c2:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004c4:	f002 f9b6 	bl	8002834 <HAL_RCC_ClockConfig>
 80004c8:	4604      	mov	r4, r0
 80004ca:	b100      	cbz	r0, 80004ce <SystemClock_Config+0x7e>
 80004cc:	e7fe      	b.n	80004cc <SystemClock_Config+0x7c>
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80004ce:	f002 fa65 	bl	800299c <HAL_RCC_GetHCLKFreq>
 80004d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004d6:	fbb0 f0f3 	udiv	r0, r0, r3
 80004da:	f002 fd57 	bl	8002f8c <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80004de:	4630      	mov	r0, r6
 80004e0:	f002 fd6a 	bl	8002fb8 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80004e4:	4622      	mov	r2, r4
 80004e6:	4629      	mov	r1, r5
 80004e8:	f04f 30ff 	mov.w	r0, #4294967295
 80004ec:	f002 fd0e 	bl	8002f0c <HAL_NVIC_SetPriority>
}
 80004f0:	b014      	add	sp, #80	; 0x50
 80004f2:	bd70      	pop	{r4, r5, r6, pc}
 80004f4:	40023800 	.word	0x40023800
 80004f8:	40007000 	.word	0x40007000

080004fc <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80004fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000500:	b090      	sub	sp, #64	; 0x40
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000502:	2400      	movs	r4, #0
 8000504:	4d58      	ldr	r5, [pc, #352]	; (8000668 <main+0x16c>)
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f002 fd63 	bl	8002fd0 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f7ff ffa1 	bl	8000450 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800050e:	9402      	str	r4, [sp, #8]
 8000510:	6b2b      	ldr	r3, [r5, #48]	; 0x30

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000512:	4856      	ldr	r0, [pc, #344]	; (800066c <main+0x170>)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	632b      	str	r3, [r5, #48]	; 0x30
 800051a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800051c:	f003 0304 	and.w	r3, r3, #4
 8000520:	9302      	str	r3, [sp, #8]
 8000522:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000524:	9403      	str	r4, [sp, #12]
 8000526:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800052c:	632b      	str	r3, [r5, #48]	; 0x30
 800052e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000534:	9303      	str	r3, [sp, #12]
 8000536:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000538:	9404      	str	r4, [sp, #16]
 800053a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	632b      	str	r3, [r5, #48]	; 0x30
 8000542:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000544:	f003 0301 	and.w	r3, r3, #1
 8000548:	9304      	str	r3, [sp, #16]
 800054a:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054c:	9405      	str	r4, [sp, #20]
 800054e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000550:	f043 0302 	orr.w	r3, r3, #2
 8000554:	632b      	str	r3, [r5, #48]	; 0x30
 8000556:	6b2b      	ldr	r3, [r5, #48]	; 0x30

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000558:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055a:	f003 0302 	and.w	r3, r3, #2
 800055e:	9305      	str	r3, [sp, #20]
 8000560:	9b05      	ldr	r3, [sp, #20]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000562:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000566:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000568:	a90b      	add	r1, sp, #44	; 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800056a:	4b41      	ldr	r3, [pc, #260]	; (8000670 <main+0x174>)
 800056c:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800056e:	f04f 0820 	mov.w	r8, #32

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000572:	f002 fa67 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000576:	2701      	movs	r7, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000578:	a90b      	add	r1, sp, #44	; 0x2c
 800057a:	483e      	ldr	r0, [pc, #248]	; (8000674 <main+0x178>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800057c:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000580:	f44f 4660 	mov.w	r6, #57344	; 0xe000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000584:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000586:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000588:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800058a:	f002 fa5b 	bl	8002a44 <HAL_GPIO_Init>
  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058e:	a90b      	add	r1, sp, #44	; 0x2c
 8000590:	4839      	ldr	r0, [pc, #228]	; (8000678 <main+0x17c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000592:	960b      	str	r6, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000594:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000598:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800059a:	f002 fa53 	bl	8002a44 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800059e:	4622      	mov	r2, r4
 80005a0:	4641      	mov	r1, r8
 80005a2:	4834      	ldr	r0, [pc, #208]	; (8000674 <main+0x178>)
 80005a4:	f002 fb2e 	bl	8002c04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80005a8:	4631      	mov	r1, r6
 80005aa:	4622      	mov	r2, r4
 80005ac:	4832      	ldr	r0, [pc, #200]	; (8000678 <main+0x17c>)
 80005ae:	f002 fb29 	bl	8002c04 <HAL_GPIO_WritePin>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80005b2:	4622      	mov	r2, r4
 80005b4:	2105      	movs	r1, #5
 80005b6:	2028      	movs	r0, #40	; 0x28
 80005b8:	f002 fca8 	bl	8002f0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005bc:	2028      	movs	r0, #40	; 0x28
 80005be:	f002 fcd9 	bl	8002f74 <HAL_NVIC_EnableIRQ>
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005c2:	9401      	str	r4, [sp, #4]
 80005c4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80005c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005ca:	632b      	str	r3, [r5, #48]	; 0x30
 80005cc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80005ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80005d2:	4622      	mov	r2, r4
 80005d4:	2105      	movs	r1, #5
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005d6:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80005d8:	2010      	movs	r0, #16
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005da:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80005dc:	f002 fc96 	bl	8002f0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80005e0:	2010      	movs	r0, #16
 80005e2:	f002 fcc7 	bl	8002f74 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80005e6:	4622      	mov	r2, r4
 80005e8:	2105      	movs	r1, #5
 80005ea:	2011      	movs	r0, #17
 80005ec:	f002 fc8e 	bl	8002f0c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80005f0:	2011      	movs	r0, #17
 80005f2:	f002 fcbf 	bl	8002f74 <HAL_NVIC_EnableIRQ>

/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 80005f6:	4821      	ldr	r0, [pc, #132]	; (800067c <main+0x180>)
  huart2.Init.BaudRate = 115200;
 80005f8:	4a21      	ldr	r2, [pc, #132]	; (8000680 <main+0x184>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005fa:	6084      	str	r4, [r0, #8]
/* USART2 init function */
static void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 80005fc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000600:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000604:	230c      	movs	r3, #12
{

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000606:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000608:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800060a:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800060c:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800060e:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000610:	f001 fcdc 	bl	8001fcc <HAL_UART_Init>
 8000614:	4606      	mov	r6, r0
 8000616:	b100      	cbz	r0, 800061a <main+0x11e>
 8000618:	e7fe      	b.n	8000618 <main+0x11c>
  /* USER CODE BEGIN 2 */

  /* Create the threads and semaphore */
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
  osThreadDef(blinkTask, BlinkTask, osPriorityNormal, 0, 128);
 800061a:	4c1a      	ldr	r4, [pc, #104]	; (8000684 <main+0x188>)
 800061c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800061e:	ad06      	add	r5, sp, #24
 8000620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000622:	f854 3b04 	ldr.w	r3, [r4], #4
 8000626:	602b      	str	r3, [r5, #0]
  blinkTaskHandle = osThreadCreate(osThread(blinkTask), NULL);
 8000628:	4631      	mov	r1, r6
 800062a:	a806      	add	r0, sp, #24
 800062c:	f001 fb0f 	bl	8001c4e <osThreadCreate>
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <main+0x18c>)
 8000632:	6018      	str	r0, [r3, #0]
  osSemaphoreDef(sem);
 8000634:	a810      	add	r0, sp, #64	; 0x40
  semHandle = osSemaphoreCreate(osSemaphore(sem), 1);
 8000636:	4639      	mov	r1, r7
  /* Create the threads and semaphore */
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
  osThreadDef(blinkTask, BlinkTask, osPriorityNormal, 0, 128);
  blinkTaskHandle = osThreadCreate(osThread(blinkTask), NULL);
  osSemaphoreDef(sem);
 8000638:	f840 6d40 	str.w	r6, [r0, #-64]!
  semHandle = osSemaphoreCreate(osSemaphore(sem), 1);
 800063c:	f001 fb30 	bl	8001ca0 <osSemaphoreCreate>
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <main+0x190>)
  osSemaphoreWait(semHandle, osWaitForever);
 8000642:	f04f 31ff 	mov.w	r1, #4294967295
//  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
//  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
  osThreadDef(blinkTask, BlinkTask, osPriorityNormal, 0, 128);
  blinkTaskHandle = osThreadCreate(osThread(blinkTask), NULL);
  osSemaphoreDef(sem);
  semHandle = osSemaphoreCreate(osSemaphore(sem), 1);
 8000646:	6018      	str	r0, [r3, #0]
  osSemaphoreWait(semHandle, osWaitForever);
 8000648:	f001 fb3e 	bl	8001cc8 <osSemaphoreWait>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800064c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800064e:	ad0b      	add	r5, sp, #44	; 0x2c
 8000650:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000652:	6823      	ldr	r3, [r4, #0]
 8000654:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000656:	4631      	mov	r1, r6
 8000658:	a80b      	add	r0, sp, #44	; 0x2c
 800065a:	f001 faf8 	bl	8001c4e <osThreadCreate>
 800065e:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <main+0x194>)
 8000660:	6018      	str	r0, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 8000662:	f001 faef 	bl	8001c44 <osKernelStart>
 8000666:	e7fe      	b.n	8000666 <main+0x16a>
 8000668:	40023800 	.word	0x40023800
 800066c:	40020800 	.word	0x40020800
 8000670:	10110000 	.word	0x10110000
 8000674:	40020000 	.word	0x40020000
 8000678:	40020400 	.word	0x40020400
 800067c:	20003e70 	.word	0x20003e70
 8000680:	40004400 	.word	0x40004400
 8000684:	0800314c 	.word	0x0800314c
 8000688:	20003e0c 	.word	0x20003e0c
 800068c:	20003eb0 	.word	0x20003eb0
 8000690:	20003da8 	.word	0x20003da8

08000694 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
/* USER CODE BEGIN Callback 0 */

/* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000694:	6802      	ldr	r2, [r0, #0]
 8000696:	4b03      	ldr	r3, [pc, #12]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000698:	429a      	cmp	r2, r3
 800069a:	d101      	bne.n	80006a0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800069c:	f002 bcb2 	b.w	8003004 <HAL_IncTick>
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40010000 	.word	0x40010000

080006a8 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	e7fe      	b.n	80006a8 <Error_Handler>
	...

080006ac <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80006ac:	4a06      	ldr	r2, [pc, #24]	; (80006c8 <prvResetNextTaskUnblockTime+0x1c>)
 80006ae:	6813      	ldr	r3, [r2, #0]
 80006b0:	6819      	ldr	r1, [r3, #0]
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <prvResetNextTaskUnblockTime+0x20>)
 80006b4:	b911      	cbnz	r1, 80006bc <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80006b6:	f04f 32ff 	mov.w	r2, #4294967295
 80006ba:	e003      	b.n	80006c4 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80006bc:	6812      	ldr	r2, [r2, #0]
 80006be:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 80006c0:	68d2      	ldr	r2, [r2, #12]
 80006c2:	6852      	ldr	r2, [r2, #4]
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	4770      	bx	lr
 80006c8:	20000028 	.word	0x20000028
 80006cc:	200000f4 	.word	0x200000f4

080006d0 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80006d0:	4b0e      	ldr	r3, [pc, #56]	; (800070c <prvAddCurrentTaskToDelayedList+0x3c>)
 80006d2:	681a      	ldr	r2, [r3, #0]
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 80006d4:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80006d6:	6050      	str	r0, [r2, #4]

	if( xTimeToWake < xTickCount )
 80006d8:	4a0d      	ldr	r2, [pc, #52]	; (8000710 <prvAddCurrentTaskToDelayedList+0x40>)
 80006da:	6812      	ldr	r2, [r2, #0]
 80006dc:	4290      	cmp	r0, r2
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 80006de:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
 80006e0:	d207      	bcs.n	80006f2 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80006e2:	4a0c      	ldr	r2, [pc, #48]	; (8000714 <prvAddCurrentTaskToDelayedList+0x44>)
 80006e4:	6810      	ldr	r0, [r2, #0]
 80006e6:	6819      	ldr	r1, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80006e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80006ec:	3104      	adds	r1, #4
 80006ee:	f001 ba81 	b.w	8001bf4 <vListInsert>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80006f2:	4a09      	ldr	r2, [pc, #36]	; (8000718 <prvAddCurrentTaskToDelayedList+0x48>)
 80006f4:	6810      	ldr	r0, [r2, #0]
 80006f6:	6819      	ldr	r1, [r3, #0]
 80006f8:	3104      	adds	r1, #4
 80006fa:	f001 fa7b 	bl	8001bf4 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 80006fe:	4b07      	ldr	r3, [pc, #28]	; (800071c <prvAddCurrentTaskToDelayedList+0x4c>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	4294      	cmp	r4, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 8000704:	bf38      	it	cc
 8000706:	601c      	strcc	r4, [r3, #0]
 8000708:	bd10      	pop	{r4, pc}
 800070a:	bf00      	nop
 800070c:	200000f0 	.word	0x200000f0
 8000710:	200000f8 	.word	0x200000f8
 8000714:	200000fc 	.word	0x200000fc
 8000718:	20000028 	.word	0x20000028
 800071c:	200000f4 	.word	0x200000f4

08000720 <xTaskGenericCreate.part.5>:
	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName );

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 8000720:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000724:	469a      	mov	sl, r3
 8000726:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000728:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800072a:	4681      	mov	r9, r0
 800072c:	460e      	mov	r6, r1
 800072e:	4615      	mov	r5, r2
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000730:	b93b      	cbnz	r3, 8000742 <xTaskGenericCreate.part.5+0x22>
 8000732:	0090      	lsls	r0, r2, #2
 8000734:	f000 fff0 	bl	8001718 <pvPortMalloc>

		if( pxStack != NULL )
 8000738:	4683      	mov	fp, r0
 800073a:	2800      	cmp	r0, #0
 800073c:	f000 80b2 	beq.w	80008a4 <xTaskGenericCreate.part.5+0x184>
 8000740:	e000      	b.n	8000744 <xTaskGenericCreate.part.5+0x24>
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000742:	469b      	mov	fp, r3

		if( pxStack != NULL )
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8000744:	205c      	movs	r0, #92	; 0x5c
 8000746:	f000 ffe7 	bl	8001718 <pvPortMalloc>

			if( pxNewTCB != NULL )
 800074a:	4604      	mov	r4, r0
 800074c:	b188      	cbz	r0, 8000772 <xTaskGenericCreate.part.5+0x52>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800074e:	00ad      	lsls	r5, r5, #2
 8000750:	462a      	mov	r2, r5
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );

			if( pxNewTCB != NULL )
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 8000752:	f8c0 b030 	str.w	fp, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8000756:	21a5      	movs	r1, #165	; 0xa5
 8000758:	4658      	mov	r0, fp
 800075a:	f002 fce2 	bl	8003122 <memset>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800075e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000760:	3d04      	subs	r5, #4
 8000762:	441d      	add	r5, r3
 8000764:	f025 0507 	bic.w	r5, r5, #7
 8000768:	1e73      	subs	r3, r6, #1
 800076a:	f104 0233 	add.w	r2, r4, #51	; 0x33
 800076e:	360f      	adds	r6, #15
 8000770:	e005      	b.n	800077e <xTaskGenericCreate.part.5+0x5e>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
 8000772:	4658      	mov	r0, fp
 8000774:	f001 f862 	bl	800183c <vPortFree>
 8000778:	e094      	b.n	80008a4 <xTaskGenericCreate.part.5+0x184>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800077a:	429e      	cmp	r6, r3
 800077c:	d006      	beq.n	800078c <xTaskGenericCreate.part.5+0x6c>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 800077e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8000782:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8000786:	7819      	ldrb	r1, [r3, #0]
 8000788:	2900      	cmp	r1, #0
 800078a:	d1f6      	bne.n	800077a <xTaskGenericCreate.part.5+0x5a>
 800078c:	2f06      	cmp	r7, #6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800078e:	f04f 0800 	mov.w	r8, #0
 8000792:	46bb      	mov	fp, r7
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 8000794:	f104 0604 	add.w	r6, r4, #4
 8000798:	bf28      	it	cs
 800079a:	f04f 0b06 	movcs.w	fp, #6
 800079e:	4630      	mov	r0, r6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80007a0:	f884 8043 	strb.w	r8, [r4, #67]	; 0x43
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 80007a4:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 80007a8:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 80007ac:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 80007b0:	f001 fa11 	bl	8001bd6 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 80007b4:	f104 0018 	add.w	r0, r4, #24
 80007b8:	f001 fa0d 	bl	8001bd6 <vListInitialiseItem>
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80007bc:	f1cb 0307 	rsb	r3, fp, #7
 80007c0:	61a3      	str	r3, [r4, #24]
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
 80007c2:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 80007c6:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 80007c8:	6264      	str	r4, [r4, #36]	; 0x24
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
		pxTCB->eNotifyState = eNotWaitingNotification;
 80007ca:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80007ce:	4652      	mov	r2, sl
 80007d0:	4649      	mov	r1, r9
 80007d2:	4628      	mov	r0, r5
 80007d4:	f001 f89c 	bl	8001910 <pxPortInitialiseStack>
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 80007d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80007da:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 80007dc:	b103      	cbz	r3, 80007e0 <xTaskGenericCreate.part.5+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80007de:	601c      	str	r4, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 80007e0:	f001 f8b8 	bl	8001954 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 80007e4:	4a31      	ldr	r2, [pc, #196]	; (80008ac <xTaskGenericCreate.part.5+0x18c>)
			if( pxCurrentTCB == NULL )
 80007e6:	4d32      	ldr	r5, [pc, #200]	; (80008b0 <xTaskGenericCreate.part.5+0x190>)

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 80007e8:	6813      	ldr	r3, [r2, #0]
 80007ea:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 80008d8 <xTaskGenericCreate.part.5+0x1b8>
 80007ee:	3301      	adds	r3, #1
 80007f0:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 80007f2:	682b      	ldr	r3, [r5, #0]
 80007f4:	bb3b      	cbnz	r3, 8000846 <xTaskGenericCreate.part.5+0x126>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 80007f6:	602c      	str	r4, [r5, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80007f8:	6812      	ldr	r2, [r2, #0]
 80007fa:	2a01      	cmp	r2, #1
 80007fc:	d12b      	bne.n	8000856 <xTaskGenericCreate.part.5+0x136>
 80007fe:	4698      	mov	r8, r3
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000800:	eb09 0008 	add.w	r0, r9, r8
 8000804:	f108 0814 	add.w	r8, r8, #20
 8000808:	f001 f9da 	bl	8001bc0 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800080c:	f1b8 0f8c 	cmp.w	r8, #140	; 0x8c
 8000810:	d1f6      	bne.n	8000800 <xTaskGenericCreate.part.5+0xe0>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8000812:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80008dc <xTaskGenericCreate.part.5+0x1bc>
	vListInitialise( &xDelayedTaskList2 );
 8000816:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80008e0 <xTaskGenericCreate.part.5+0x1c0>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 800081a:	4650      	mov	r0, sl
 800081c:	f001 f9d0 	bl	8001bc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8000820:	4640      	mov	r0, r8
 8000822:	f001 f9cd 	bl	8001bc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8000826:	4823      	ldr	r0, [pc, #140]	; (80008b4 <xTaskGenericCreate.part.5+0x194>)
 8000828:	f001 f9ca 	bl	8001bc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800082c:	4822      	ldr	r0, [pc, #136]	; (80008b8 <xTaskGenericCreate.part.5+0x198>)
 800082e:	f001 f9c7 	bl	8001bc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8000832:	4822      	ldr	r0, [pc, #136]	; (80008bc <xTaskGenericCreate.part.5+0x19c>)
 8000834:	f001 f9c4 	bl	8001bc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8000838:	4b21      	ldr	r3, [pc, #132]	; (80008c0 <xTaskGenericCreate.part.5+0x1a0>)
 800083a:	f8c3 a000 	str.w	sl, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800083e:	4b21      	ldr	r3, [pc, #132]	; (80008c4 <xTaskGenericCreate.part.5+0x1a4>)
 8000840:	f8c3 8000 	str.w	r8, [r3]
 8000844:	e007      	b.n	8000856 <xTaskGenericCreate.part.5+0x136>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8000846:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <xTaskGenericCreate.part.5+0x1a8>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	b923      	cbnz	r3, 8000856 <xTaskGenericCreate.part.5+0x136>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 800084c:	682b      	ldr	r3, [r5, #0]
 800084e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000850:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
 8000852:	bf28      	it	cs
 8000854:	602c      	strcs	r4, [r5, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8000856:	4a1d      	ldr	r2, [pc, #116]	; (80008cc <xTaskGenericCreate.part.5+0x1ac>)
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8000858:	491d      	ldr	r1, [pc, #116]	; (80008d0 <xTaskGenericCreate.part.5+0x1b0>)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 800085a:	6813      	ldr	r3, [r2, #0]
 800085c:	3301      	adds	r3, #1
 800085e:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8000860:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			uxTaskNumber++;

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000862:	6463      	str	r3, [r4, #68]	; 0x44
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8000864:	680b      	ldr	r3, [r1, #0]
 8000866:	2401      	movs	r4, #1
 8000868:	fa04 f002 	lsl.w	r0, r4, r2
 800086c:	4303      	orrs	r3, r0
 800086e:	2014      	movs	r0, #20
 8000870:	600b      	str	r3, [r1, #0]
 8000872:	fb00 9002 	mla	r0, r0, r2, r9
 8000876:	4631      	mov	r1, r6
 8000878:	f001 f9b0 	bl	8001bdc <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 800087c:	f001 f88c 	bl	8001998 <vPortExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 8000880:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <xTaskGenericCreate.part.5+0x1a8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	b15b      	cbz	r3, 800089e <xTaskGenericCreate.part.5+0x17e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8000886:	682b      	ldr	r3, [r5, #0]
 8000888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800088a:	429f      	cmp	r7, r3
 800088c:	d907      	bls.n	800089e <xTaskGenericCreate.part.5+0x17e>
			{
				taskYIELD_IF_USING_PREEMPTION();
 800088e:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <xTaskGenericCreate.part.5+0x1b4>)
 8000890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	f3bf 8f4f 	dsb	sy
 800089a:	f3bf 8f6f 	isb	sy
	{
		if( xSchedulerRunning != pdFALSE )
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 800089e:	4620      	mov	r0, r4
 80008a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80008a4:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 80008a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008ac:	20000140 	.word	0x20000140
 80008b0:	200000f0 	.word	0x200000f0
 80008b4:	20000100 	.word	0x20000100
 80008b8:	20000034 	.word	0x20000034
 80008bc:	20000048 	.word	0x20000048
 80008c0:	20000028 	.word	0x20000028
 80008c4:	200000fc 	.word	0x200000fc
 80008c8:	2000002c 	.word	0x2000002c
 80008cc:	20000114 	.word	0x20000114
 80008d0:	20000144 	.word	0x20000144
 80008d4:	e000ed04 	.word	0xe000ed04
 80008d8:	20000060 	.word	0x20000060
 80008dc:	20000118 	.word	0x20000118
 80008e0:	2000012c 	.word	0x2000012c

080008e4 <prvTaskIsTaskSuspended.part.0>:

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80008e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80008e8:	f383 8811 	msr	BASEPRI, r3
 80008ec:	f3bf 8f6f 	isb	sy
 80008f0:	f3bf 8f4f 	dsb	sy
 80008f4:	e7fe      	b.n	80008f4 <prvTaskIsTaskSuspended.part.0+0x10>

080008f6 <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80008f6:	b470      	push	{r4, r5, r6}
 80008f8:	ac03      	add	r4, sp, #12
 80008fa:	cc70      	ldmia	r4, {r4, r5, r6}
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
 80008fc:	b940      	cbnz	r0, 8000910 <xTaskGenericCreate+0x1a>
 80008fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000902:	f383 8811 	msr	BASEPRI, r3
 8000906:	f3bf 8f6f 	isb	sy
 800090a:	f3bf 8f4f 	dsb	sy
 800090e:	e7fe      	b.n	800090e <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 8000910:	2c06      	cmp	r4, #6
 8000912:	d908      	bls.n	8000926 <xTaskGenericCreate+0x30>
 8000914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000918:	f383 8811 	msr	BASEPRI, r3
 800091c:	f3bf 8f6f 	isb	sy
 8000920:	f3bf 8f4f 	dsb	sy
 8000924:	e7fe      	b.n	8000924 <xTaskGenericCreate+0x2e>
 8000926:	9605      	str	r6, [sp, #20]
 8000928:	9504      	str	r5, [sp, #16]
 800092a:	9403      	str	r4, [sp, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 800092c:	bc70      	pop	{r4, r5, r6}
 800092e:	f7ff bef7 	b.w	8000720 <xTaskGenericCreate.part.5>
	...

08000934 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8000934:	b538      	push	{r3, r4, r5, lr}
 8000936:	4604      	mov	r4, r0
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8000938:	f001 f80c 	bl	8001954 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800093c:	b90c      	cbnz	r4, 8000942 <vTaskDelete+0xe>
 800093e:	4b26      	ldr	r3, [pc, #152]	; (80009d8 <vTaskDelete+0xa4>)
 8000940:	681c      	ldr	r4, [r3, #0]

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8000942:	1d25      	adds	r5, r4, #4
 8000944:	4628      	mov	r0, r5
 8000946:	f001 f96d 	bl	8001c24 <uxListRemove>
 800094a:	b960      	cbnz	r0, 8000966 <vTaskDelete+0x32>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800094c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800094e:	4b23      	ldr	r3, [pc, #140]	; (80009dc <vTaskDelete+0xa8>)
 8000950:	2214      	movs	r2, #20
 8000952:	4342      	muls	r2, r0
 8000954:	589b      	ldr	r3, [r3, r2]
 8000956:	b933      	cbnz	r3, 8000966 <vTaskDelete+0x32>
 8000958:	4921      	ldr	r1, [pc, #132]	; (80009e0 <vTaskDelete+0xac>)
 800095a:	2301      	movs	r3, #1
 800095c:	680a      	ldr	r2, [r1, #0]
 800095e:	4083      	lsls	r3, r0
 8000960:	ea22 0303 	bic.w	r3, r2, r3
 8000964:	600b      	str	r3, [r1, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000966:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000968:	b11b      	cbz	r3, 8000972 <vTaskDelete+0x3e>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800096a:	f104 0018 	add.w	r0, r4, #24
 800096e:	f001 f959 	bl	8001c24 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
 8000972:	4629      	mov	r1, r5
 8000974:	481b      	ldr	r0, [pc, #108]	; (80009e4 <vTaskDelete+0xb0>)
 8000976:	f001 f931 	bl	8001bdc <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
 800097a:	4a1b      	ldr	r2, [pc, #108]	; (80009e8 <vTaskDelete+0xb4>)
 800097c:	6813      	ldr	r3, [r2, #0]
 800097e:	3301      	adds	r3, #1
 8000980:	6013      	str	r3, [r2, #0]

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
 8000982:	4a1a      	ldr	r2, [pc, #104]	; (80009ec <vTaskDelete+0xb8>)
 8000984:	6813      	ldr	r3, [r2, #0]
 8000986:	3301      	adds	r3, #1
 8000988:	6013      	str	r3, [r2, #0]

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800098a:	f001 f805 	bl	8001998 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800098e:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <vTaskDelete+0xbc>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	b303      	cbz	r3, 80009d6 <vTaskDelete+0xa2>
		{
			if( pxTCB == pxCurrentTCB )
 8000994:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <vTaskDelete+0xa4>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	429c      	cmp	r4, r3
 800099a:	d114      	bne.n	80009c6 <vTaskDelete+0x92>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800099c:	4b15      	ldr	r3, [pc, #84]	; (80009f4 <vTaskDelete+0xc0>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	b143      	cbz	r3, 80009b4 <vTaskDelete+0x80>
 80009a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80009a6:	f383 8811 	msr	BASEPRI, r3
 80009aa:	f3bf 8f6f 	isb	sy
 80009ae:	f3bf 8f4f 	dsb	sy
 80009b2:	e7fe      	b.n	80009b2 <vTaskDelete+0x7e>
				in which Windows specific clean up operations are performed,
				after which it is not possible to yield away from this task -
				hence xYieldPending is used to latch that a context switch is
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
				portYIELD_WITHIN_API();
 80009b4:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <vTaskDelete+0xc4>)
 80009b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	f3bf 8f4f 	dsb	sy
 80009c0:	f3bf 8f6f 	isb	sy
 80009c4:	bd38      	pop	{r3, r4, r5, pc}
			}
			else
			{
				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				taskENTER_CRITICAL();
 80009c6:	f000 ffc5 	bl	8001954 <vPortEnterCritical>
				{
					prvResetNextTaskUnblockTime();
 80009ca:	f7ff fe6f 	bl	80006ac <prvResetNextTaskUnblockTime>
				}
				taskEXIT_CRITICAL();
			}
		}
	}
 80009ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				the task that has just been deleted. */
				taskENTER_CRITICAL();
				{
					prvResetNextTaskUnblockTime();
				}
				taskEXIT_CRITICAL();
 80009d2:	f000 bfe1 	b.w	8001998 <vPortExitCritical>
 80009d6:	bd38      	pop	{r3, r4, r5, pc}
 80009d8:	200000f0 	.word	0x200000f0
 80009dc:	20000060 	.word	0x20000060
 80009e0:	20000144 	.word	0x20000144
 80009e4:	20000034 	.word	0x20000034
 80009e8:	20000030 	.word	0x20000030
 80009ec:	20000114 	.word	0x20000114
 80009f0:	2000002c 	.word	0x2000002c
 80009f4:	200000ec 	.word	0x200000ec
 80009f8:	e000ed04 	.word	0xe000ed04

080009fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80009fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80009fe:	2400      	movs	r4, #0
 8000a00:	9402      	str	r4, [sp, #8]
 8000a02:	9401      	str	r4, [sp, #4]
 8000a04:	9400      	str	r4, [sp, #0]
 8000a06:	4623      	mov	r3, r4
 8000a08:	2280      	movs	r2, #128	; 0x80
 8000a0a:	4913      	ldr	r1, [pc, #76]	; (8000a58 <vTaskStartScheduler+0x5c>)
 8000a0c:	4813      	ldr	r0, [pc, #76]	; (8000a5c <vTaskStartScheduler+0x60>)
 8000a0e:	f7ff fe87 	bl	8000720 <xTaskGenericCreate.part.5>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000a12:	2801      	cmp	r0, #1
 8000a14:	d114      	bne.n	8000a40 <vTaskStartScheduler+0x44>
 8000a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a1a:	f383 8811 	msr	BASEPRI, r3
 8000a1e:	f3bf 8f6f 	isb	sy
 8000a22:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <vTaskStartScheduler+0x64>)
 8000a28:	f04f 32ff 	mov.w	r2, #4294967295
 8000a2c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <vTaskStartScheduler+0x68>)
 8000a30:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <vTaskStartScheduler+0x6c>)
 8000a34:	601c      	str	r4, [r3, #0]
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 8000a36:	b004      	add	sp, #16
 8000a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000a3c:	f001 b81c 	b.w	8001a78 <xPortStartScheduler>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 8000a40:	b940      	cbnz	r0, 8000a54 <vTaskStartScheduler+0x58>
 8000a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000a46:	f383 8811 	msr	BASEPRI, r3
 8000a4a:	f3bf 8f6f 	isb	sy
 8000a4e:	f3bf 8f4f 	dsb	sy
 8000a52:	e7fe      	b.n	8000a52 <vTaskStartScheduler+0x56>
	}
}
 8000a54:	b004      	add	sp, #16
 8000a56:	bd10      	pop	{r4, pc}
 8000a58:	0800318a 	.word	0x0800318a
 8000a5c:	08000d15 	.word	0x08000d15
 8000a60:	200000f4 	.word	0x200000f4
 8000a64:	2000002c 	.word	0x2000002c
 8000a68:	200000f8 	.word	0x200000f8

08000a6c <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8000a6c:	4a02      	ldr	r2, [pc, #8]	; (8000a78 <vTaskSuspendAll+0xc>)
 8000a6e:	6813      	ldr	r3, [r2, #0]
 8000a70:	3301      	adds	r3, #1
 8000a72:	6013      	str	r3, [r2, #0]
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	200000ec 	.word	0x200000ec

08000a7c <xTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000a7c:	4b40      	ldr	r3, [pc, #256]	; (8000b80 <xTaskIncrementTick+0x104>)
 8000a7e:	681b      	ldr	r3, [r3, #0]

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000a80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d13c      	bne.n	8000b02 <xTaskIncrementTick+0x86>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8000a88:	4b3e      	ldr	r3, [pc, #248]	; (8000b84 <xTaskIncrementTick+0x108>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	3201      	adds	r2, #1
 8000a8e:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8000a90:	681d      	ldr	r5, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
 8000a92:	b9bd      	cbnz	r5, 8000ac4 <xTaskIncrementTick+0x48>
			{
				taskSWITCH_DELAYED_LISTS();
 8000a94:	4b3c      	ldr	r3, [pc, #240]	; (8000b88 <xTaskIncrementTick+0x10c>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	6812      	ldr	r2, [r2, #0]
 8000a9a:	b142      	cbz	r2, 8000aae <xTaskIncrementTick+0x32>
 8000a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000aa0:	f383 8811 	msr	BASEPRI, r3
 8000aa4:	f3bf 8f6f 	isb	sy
 8000aa8:	f3bf 8f4f 	dsb	sy
 8000aac:	e7fe      	b.n	8000aac <xTaskIncrementTick+0x30>
 8000aae:	4a37      	ldr	r2, [pc, #220]	; (8000b8c <xTaskIncrementTick+0x110>)
 8000ab0:	6819      	ldr	r1, [r3, #0]
 8000ab2:	6810      	ldr	r0, [r2, #0]
 8000ab4:	6018      	str	r0, [r3, #0]
 8000ab6:	6011      	str	r1, [r2, #0]
 8000ab8:	4a35      	ldr	r2, [pc, #212]	; (8000b90 <xTaskIncrementTick+0x114>)
 8000aba:	6813      	ldr	r3, [r2, #0]
 8000abc:	3301      	adds	r3, #1
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	f7ff fdf4 	bl	80006ac <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8000ac4:	4c33      	ldr	r4, [pc, #204]	; (8000b94 <xTaskIncrementTick+0x118>)
 8000ac6:	9401      	str	r4, [sp, #4]
 8000ac8:	6823      	ldr	r3, [r4, #0]
 8000aca:	4e33      	ldr	r6, [pc, #204]	; (8000b98 <xTaskIncrementTick+0x11c>)
 8000acc:	4f33      	ldr	r7, [pc, #204]	; (8000b9c <xTaskIncrementTick+0x120>)
 8000ace:	429d      	cmp	r5, r3
 8000ad0:	f04f 0b00 	mov.w	fp, #0
 8000ad4:	d30b      	bcc.n	8000aee <xTaskIncrementTick+0x72>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000ad6:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8000b88 <xTaskIncrementTick+0x10c>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8000ada:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8000ba8 <xTaskIncrementTick+0x12c>
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000ade:	f8d8 2000 	ldr.w	r2, [r8]
 8000ae2:	6812      	ldr	r2, [r2, #0]
 8000ae4:	b9a2      	cbnz	r2, 8000b10 <xTaskIncrementTick+0x94>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8000ae6:	9b01      	ldr	r3, [sp, #4]
 8000ae8:	f04f 32ff 	mov.w	r2, #4294967295
 8000aec:	601a      	str	r2, [r3, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000aee:	683a      	ldr	r2, [r7, #0]
 8000af0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000af2:	2214      	movs	r2, #20
 8000af4:	434a      	muls	r2, r1
 8000af6:	58b2      	ldr	r2, [r6, r2]
			{
				xSwitchRequired = pdTRUE;
 8000af8:	2a02      	cmp	r2, #2
 8000afa:	bf28      	it	cs
 8000afc:	f04f 0b01 	movcs.w	fp, #1
 8000b00:	e034      	b.n	8000b6c <xTaskIncrementTick+0xf0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8000b02:	4a27      	ldr	r2, [pc, #156]	; (8000ba0 <xTaskIncrementTick+0x124>)
 8000b04:	6813      	ldr	r3, [r2, #0]
 8000b06:	3301      	adds	r3, #1
 8000b08:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8000b0a:	f04f 0b00 	mov.w	fp, #0
 8000b0e:	e02d      	b.n	8000b6c <xTaskIncrementTick+0xf0>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000b10:	f8d8 2000 	ldr.w	r2, [r8]
 8000b14:	68d2      	ldr	r2, [r2, #12]
 8000b16:	68d4      	ldr	r4, [r2, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8000b18:	6861      	ldr	r1, [r4, #4]

						if( xConstTickCount < xItemValue )
 8000b1a:	428d      	cmp	r5, r1
 8000b1c:	d202      	bcs.n	8000b24 <xTaskIncrementTick+0xa8>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8000b1e:	9b01      	ldr	r3, [sp, #4]
 8000b20:	6019      	str	r1, [r3, #0]
							break;
 8000b22:	e7e4      	b.n	8000aee <xTaskIncrementTick+0x72>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8000b24:	f104 0a04 	add.w	sl, r4, #4
 8000b28:	4650      	mov	r0, sl
 8000b2a:	f001 f87b 	bl	8001c24 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000b2e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000b30:	b119      	cbz	r1, 8000b3a <xTaskIncrementTick+0xbe>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000b32:	f104 0018 	add.w	r0, r4, #24
 8000b36:	f001 f875 	bl	8001c24 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8000b3a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000b3c:	f8d9 1000 	ldr.w	r1, [r9]
 8000b40:	2301      	movs	r3, #1
 8000b42:	fa03 fe00 	lsl.w	lr, r3, r0
 8000b46:	ea4e 0101 	orr.w	r1, lr, r1
 8000b4a:	f04f 0e14 	mov.w	lr, #20
 8000b4e:	f8c9 1000 	str.w	r1, [r9]
 8000b52:	fb0e 6000 	mla	r0, lr, r0, r6
 8000b56:	4651      	mov	r1, sl
 8000b58:	f001 f840 	bl	8001bdc <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000b5c:	6838      	ldr	r0, [r7, #0]
 8000b5e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000b60:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
 8000b62:	4291      	cmp	r1, r2
 8000b64:	bf28      	it	cs
 8000b66:	f04f 0b01 	movcs.w	fp, #1
 8000b6a:	e7b8      	b.n	8000ade <xTaskIncrementTick+0x62>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8000b6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ba4 <xTaskIncrementTick+0x128>)
 8000b6e:	6812      	ldr	r2, [r2, #0]
		{
			xSwitchRequired = pdTRUE;
 8000b70:	2a00      	cmp	r2, #0
 8000b72:	bf18      	it	ne
 8000b74:	f04f 0b01 	movne.w	fp, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 8000b78:	4658      	mov	r0, fp
 8000b7a:	b003      	add	sp, #12
 8000b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b80:	200000ec 	.word	0x200000ec
 8000b84:	200000f8 	.word	0x200000f8
 8000b88:	20000028 	.word	0x20000028
 8000b8c:	200000fc 	.word	0x200000fc
 8000b90:	20000024 	.word	0x20000024
 8000b94:	200000f4 	.word	0x200000f4
 8000b98:	20000060 	.word	0x20000060
 8000b9c:	200000f0 	.word	0x200000f0
 8000ba0:	2000005c 	.word	0x2000005c
 8000ba4:	20000148 	.word	0x20000148
 8000ba8:	20000144 	.word	0x20000144

08000bac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8000bb0:	4c30      	ldr	r4, [pc, #192]	; (8000c74 <xTaskResumeAll+0xc8>)
 8000bb2:	6823      	ldr	r3, [r4, #0]
 8000bb4:	b943      	cbnz	r3, 8000bc8 <xTaskResumeAll+0x1c>
 8000bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bba:	f383 8811 	msr	BASEPRI, r3
 8000bbe:	f3bf 8f6f 	isb	sy
 8000bc2:	f3bf 8f4f 	dsb	sy
 8000bc6:	e7fe      	b.n	8000bc6 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000bc8:	f000 fec4 	bl	8001954 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000bcc:	6823      	ldr	r3, [r4, #0]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000bd2:	6823      	ldr	r3, [r4, #0]
 8000bd4:	b10b      	cbz	r3, 8000bda <xTaskResumeAll+0x2e>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 8000bd6:	2400      	movs	r4, #0
 8000bd8:	e047      	b.n	8000c6a <xTaskResumeAll+0xbe>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000bda:	4b27      	ldr	r3, [pc, #156]	; (8000c78 <xTaskResumeAll+0xcc>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d0f9      	beq.n	8000bd6 <xTaskResumeAll+0x2a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000be2:	4d26      	ldr	r5, [pc, #152]	; (8000c7c <xTaskResumeAll+0xd0>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8000be4:	4e26      	ldr	r6, [pc, #152]	; (8000c80 <xTaskResumeAll+0xd4>)
 8000be6:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8000c94 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000bea:	682b      	ldr	r3, [r5, #0]
 8000bec:	b303      	cbz	r3, 8000c30 <xTaskResumeAll+0x84>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8000bee:	68eb      	ldr	r3, [r5, #12]
 8000bf0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8000bf2:	f104 0904 	add.w	r9, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000bf6:	f104 0018 	add.w	r0, r4, #24
 8000bfa:	f001 f813 	bl	8001c24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8000bfe:	4648      	mov	r0, r9
 8000c00:	f001 f810 	bl	8001c24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000c04:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000c06:	6833      	ldr	r3, [r6, #0]
 8000c08:	2701      	movs	r7, #1
 8000c0a:	fa07 f102 	lsl.w	r1, r7, r2
 8000c0e:	2014      	movs	r0, #20
 8000c10:	430b      	orrs	r3, r1
 8000c12:	fb00 8002 	mla	r0, r0, r2, r8
 8000c16:	4649      	mov	r1, r9
 8000c18:	6033      	str	r3, [r6, #0]
 8000c1a:	f000 ffdf 	bl	8001bdc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <xTaskResumeAll+0xd8>)
 8000c20:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d3df      	bcc.n	8000bea <xTaskResumeAll+0x3e>
					{
						xYieldPending = pdTRUE;
 8000c2a:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <xTaskResumeAll+0xdc>)
 8000c2c:	601f      	str	r7, [r3, #0]
 8000c2e:	e7da      	b.n	8000be6 <xTaskResumeAll+0x3a>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8000c30:	4c16      	ldr	r4, [pc, #88]	; (8000c8c <xTaskResumeAll+0xe0>)
 8000c32:	6823      	ldr	r3, [r4, #0]
 8000c34:	b963      	cbnz	r3, 8000c50 <xTaskResumeAll+0xa4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 8000c36:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <xTaskResumeAll+0xdc>)
 8000c38:	681c      	ldr	r4, [r3, #0]
 8000c3a:	2c01      	cmp	r4, #1
 8000c3c:	d1cb      	bne.n	8000bd6 <xTaskResumeAll+0x2a>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <xTaskResumeAll+0xe4>)
 8000c40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	f3bf 8f4f 	dsb	sy
 8000c4a:	f3bf 8f6f 	isb	sy
 8000c4e:	e00c      	b.n	8000c6a <xTaskResumeAll+0xbe>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
						{
							xYieldPending = pdTRUE;
 8000c50:	4d0d      	ldr	r5, [pc, #52]	; (8000c88 <xTaskResumeAll+0xdc>)
 8000c52:	2601      	movs	r6, #1
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8000c54:	6823      	ldr	r3, [r4, #0]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d0ed      	beq.n	8000c36 <xTaskResumeAll+0x8a>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8000c5a:	f7ff ff0f 	bl	8000a7c <xTaskIncrementTick>
 8000c5e:	b100      	cbz	r0, 8000c62 <xTaskResumeAll+0xb6>
						{
							xYieldPending = pdTRUE;
 8000c60:	602e      	str	r6, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 8000c62:	6823      	ldr	r3, [r4, #0]
 8000c64:	3b01      	subs	r3, #1
 8000c66:	6023      	str	r3, [r4, #0]
 8000c68:	e7f4      	b.n	8000c54 <xTaskResumeAll+0xa8>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8000c6a:	f000 fe95 	bl	8001998 <vPortExitCritical>

	return xAlreadyYielded;
}
 8000c6e:	4620      	mov	r0, r4
 8000c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c74:	200000ec 	.word	0x200000ec
 8000c78:	20000140 	.word	0x20000140
 8000c7c:	20000100 	.word	0x20000100
 8000c80:	20000144 	.word	0x20000144
 8000c84:	200000f0 	.word	0x200000f0
 8000c88:	20000148 	.word	0x20000148
 8000c8c:	2000005c 	.word	0x2000005c
 8000c90:	e000ed04 	.word	0xe000ed04
 8000c94:	20000060 	.word	0x20000060

08000c98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8000c98:	b538      	push	{r3, r4, r5, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8000c9a:	b940      	cbnz	r0, 8000cae <vTaskDelay+0x16>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 8000c9c:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <vTaskDelay+0x68>)
 8000c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	f3bf 8f4f 	dsb	sy
 8000ca8:	f3bf 8f6f 	isb	sy
 8000cac:	bd38      	pop	{r3, r4, r5, pc}


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <vTaskDelay+0x6c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	b143      	cbz	r3, 8000cc6 <vTaskDelay+0x2e>
 8000cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000cb8:	f383 8811 	msr	BASEPRI, r3
 8000cbc:	f3bf 8f6f 	isb	sy
 8000cc0:	f3bf 8f4f 	dsb	sy
 8000cc4:	e7fe      	b.n	8000cc4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8000cc6:	f7ff fed1 	bl	8000a6c <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <vTaskDelay+0x70>)

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8000ccc:	4d0f      	ldr	r5, [pc, #60]	; (8000d0c <vTaskDelay+0x74>)
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	18c4      	adds	r4, r0, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8000cd2:	6828      	ldr	r0, [r5, #0]
 8000cd4:	3004      	adds	r0, #4
 8000cd6:	f000 ffa5 	bl	8001c24 <uxListRemove>
 8000cda:	b940      	cbnz	r0, 8000cee <vTaskDelay+0x56>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8000cdc:	682b      	ldr	r3, [r5, #0]
 8000cde:	490c      	ldr	r1, [pc, #48]	; (8000d10 <vTaskDelay+0x78>)
 8000ce0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000ce2:	680a      	ldr	r2, [r1, #0]
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	4083      	lsls	r3, r0
 8000ce8:	ea22 0303 	bic.w	r3, r2, r3
 8000cec:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8000cee:	4620      	mov	r0, r4
 8000cf0:	f7ff fcee 	bl	80006d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8000cf4:	f7ff ff5a 	bl	8000bac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8000cf8:	2800      	cmp	r0, #0
 8000cfa:	d0cf      	beq.n	8000c9c <vTaskDelay+0x4>
 8000cfc:	bd38      	pop	{r3, r4, r5, pc}
 8000cfe:	bf00      	nop
 8000d00:	e000ed04 	.word	0xe000ed04
 8000d04:	200000ec 	.word	0x200000ec
 8000d08:	200000f8 	.word	0x200000f8
 8000d0c:	200000f0 	.word	0x200000f0
 8000d10:	20000144 	.word	0x20000144

08000d14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000d14:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8000d16:	4d18      	ldr	r5, [pc, #96]	; (8000d78 <prvIdleTask+0x64>)
 8000d18:	462e      	mov	r6, r5
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8000d1a:	4f18      	ldr	r7, [pc, #96]	; (8000d7c <prvIdleTask+0x68>)
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8000d1c:	682b      	ldr	r3, [r5, #0]
 8000d1e:	b1f3      	cbz	r3, 8000d5e <prvIdleTask+0x4a>
		{
			vTaskSuspendAll();
 8000d20:	f7ff fea4 	bl	8000a6c <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8000d24:	683c      	ldr	r4, [r7, #0]
			}
			( void ) xTaskResumeAll();
 8000d26:	f7ff ff41 	bl	8000bac <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8000d2a:	2c00      	cmp	r4, #0
 8000d2c:	d0f6      	beq.n	8000d1c <prvIdleTask+0x8>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8000d2e:	f000 fe11 	bl	8001954 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8000d32:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <prvIdleTask+0x68>)
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8000d38:	1d20      	adds	r0, r4, #4
 8000d3a:	f000 ff73 	bl	8001c24 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8000d3e:	4a10      	ldr	r2, [pc, #64]	; (8000d80 <prvIdleTask+0x6c>)
 8000d40:	6813      	ldr	r3, [r2, #0]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 8000d46:	6833      	ldr	r3, [r6, #0]
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	6033      	str	r3, [r6, #0]
				}
				taskEXIT_CRITICAL();
 8000d4c:	f000 fe24 	bl	8001998 <vPortExitCritical>
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
 8000d50:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000d52:	f000 fd73 	bl	800183c <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
 8000d56:	4620      	mov	r0, r4
 8000d58:	f000 fd70 	bl	800183c <vPortFree>
 8000d5c:	e7de      	b.n	8000d1c <prvIdleTask+0x8>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <prvIdleTask+0x70>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d9d9      	bls.n	8000d1a <prvIdleTask+0x6>
			{
				taskYIELD();
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <prvIdleTask+0x74>)
 8000d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	f3bf 8f4f 	dsb	sy
 8000d72:	f3bf 8f6f 	isb	sy
 8000d76:	e7d0      	b.n	8000d1a <prvIdleTask+0x6>
 8000d78:	20000030 	.word	0x20000030
 8000d7c:	20000034 	.word	0x20000034
 8000d80:	20000140 	.word	0x20000140
 8000d84:	20000060 	.word	0x20000060
 8000d88:	e000ed04 	.word	0xe000ed04

08000d8c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000d8c:	4b17      	ldr	r3, [pc, #92]	; (8000dec <vTaskSwitchContext+0x60>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <vTaskSwitchContext+0x64>)

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000d92:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000d94:	b10a      	cbz	r2, 8000d9a <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8000d96:	2201      	movs	r2, #1
 8000d98:	e025      	b.n	8000de6 <vTaskSwitchContext+0x5a>
	}
	else
	{
		xYieldPending = pdFALSE;
 8000d9a:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8000d9c:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <vTaskSwitchContext+0x68>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8000da0:	fab3 f383 	clz	r3, r3
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	f1c3 031f 	rsb	r3, r3, #31
 8000daa:	2214      	movs	r2, #20
 8000dac:	4912      	ldr	r1, [pc, #72]	; (8000df8 <vTaskSwitchContext+0x6c>)
 8000dae:	435a      	muls	r2, r3
 8000db0:	1888      	adds	r0, r1, r2
 8000db2:	588c      	ldr	r4, [r1, r2]
 8000db4:	b944      	cbnz	r4, 8000dc8 <vTaskSwitchContext+0x3c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000dba:	f383 8811 	msr	BASEPRI, r3
 8000dbe:	f3bf 8f6f 	isb	sy
 8000dc2:	f3bf 8f4f 	dsb	sy
 8000dc6:	e7fe      	b.n	8000dc6 <vTaskSwitchContext+0x3a>
 8000dc8:	6844      	ldr	r4, [r0, #4]
 8000dca:	3208      	adds	r2, #8
 8000dcc:	6864      	ldr	r4, [r4, #4]
 8000dce:	6044      	str	r4, [r0, #4]
 8000dd0:	440a      	add	r2, r1
 8000dd2:	4294      	cmp	r4, r2
 8000dd4:	bf04      	itt	eq
 8000dd6:	6862      	ldreq	r2, [r4, #4]
 8000dd8:	6042      	streq	r2, [r0, #4]
 8000dda:	2214      	movs	r2, #20
 8000ddc:	fb02 1303 	mla	r3, r2, r3, r1
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	68da      	ldr	r2, [r3, #12]
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <vTaskSwitchContext+0x70>)
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	bd10      	pop	{r4, pc}
 8000dea:	bf00      	nop
 8000dec:	200000ec 	.word	0x200000ec
 8000df0:	20000148 	.word	0x20000148
 8000df4:	20000144 	.word	0x20000144
 8000df8:	20000060 	.word	0x20000060
 8000dfc:	200000f0 	.word	0x200000f0

08000e00 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8000e00:	b538      	push	{r3, r4, r5, lr}
 8000e02:	460d      	mov	r5, r1
TickType_t xTimeToWake;

	configASSERT( pxEventList );
 8000e04:	b940      	cbnz	r0, 8000e18 <vTaskPlaceOnEventList+0x18>
 8000e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e0a:	f383 8811 	msr	BASEPRI, r3
 8000e0e:	f3bf 8f6f 	isb	sy
 8000e12:	f3bf 8f4f 	dsb	sy
 8000e16:	e7fe      	b.n	8000e16 <vTaskPlaceOnEventList+0x16>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8000e18:	4c11      	ldr	r4, [pc, #68]	; (8000e60 <vTaskPlaceOnEventList+0x60>)
 8000e1a:	6821      	ldr	r1, [r4, #0]
 8000e1c:	3118      	adds	r1, #24
 8000e1e:	f000 fee9 	bl	8001bf4 <vListInsert>

	/* The task must be removed from from the ready list before it is added to
	the blocked list as the same list item is used for both lists.  Exclusive
	access to the ready lists guaranteed because the scheduler is locked. */
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8000e22:	6820      	ldr	r0, [r4, #0]
 8000e24:	3004      	adds	r0, #4
 8000e26:	f000 fefd 	bl	8001c24 <uxListRemove>
 8000e2a:	b940      	cbnz	r0, 8000e3e <vTaskPlaceOnEventList+0x3e>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8000e2c:	6823      	ldr	r3, [r4, #0]
 8000e2e:	490d      	ldr	r1, [pc, #52]	; (8000e64 <vTaskPlaceOnEventList+0x64>)
 8000e30:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000e32:	680a      	ldr	r2, [r1, #0]
 8000e34:	2301      	movs	r3, #1
 8000e36:	4083      	lsls	r3, r0
 8000e38:	ea22 0303 	bic.w	r3, r2, r3
 8000e3c:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
 8000e3e:	1c6b      	adds	r3, r5, #1
 8000e40:	d106      	bne.n	8000e50 <vTaskPlaceOnEventList+0x50>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8000e42:	6821      	ldr	r1, [r4, #0]
 8000e44:	4808      	ldr	r0, [pc, #32]	; (8000e68 <vTaskPlaceOnEventList+0x68>)
 8000e46:	3104      	adds	r1, #4
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8000e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if( xTicksToWait == portMAX_DELAY )
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure the task is not woken by a timing event.  It will
			block indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 8000e4c:	f000 bec6 	b.w	8001bdc <vListInsertEnd>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <vTaskPlaceOnEventList+0x6c>)
 8000e52:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8000e54:	4428      	add	r0, r5
			will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8000e56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			scheduler will handle it. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
 8000e5a:	f7ff bc39 	b.w	80006d0 <prvAddCurrentTaskToDelayedList>
 8000e5e:	bf00      	nop
 8000e60:	200000f0 	.word	0x200000f0
 8000e64:	20000144 	.word	0x20000144
 8000e68:	20000048 	.word	0x20000048
 8000e6c:	200000f8 	.word	0x200000f8

08000e70 <xTaskRemoveFromEventList>:
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8000e70:	68c3      	ldr	r3, [r0, #12]

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8000e72:	b570      	push	{r4, r5, r6, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8000e74:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8000e76:	b944      	cbnz	r4, 8000e8a <xTaskRemoveFromEventList+0x1a>
 8000e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000e7c:	f383 8811 	msr	BASEPRI, r3
 8000e80:	f3bf 8f6f 	isb	sy
 8000e84:	f3bf 8f4f 	dsb	sy
 8000e88:	e7fe      	b.n	8000e88 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8000e8a:	f104 0518 	add.w	r5, r4, #24
 8000e8e:	4628      	mov	r0, r5
 8000e90:	f000 fec8 	bl	8001c24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000e94:	4b11      	ldr	r3, [pc, #68]	; (8000edc <xTaskRemoveFromEventList+0x6c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	b983      	cbnz	r3, 8000ebc <xTaskRemoveFromEventList+0x4c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8000e9a:	1d26      	adds	r6, r4, #4
 8000e9c:	4630      	mov	r0, r6
 8000e9e:	f000 fec1 	bl	8001c24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8000ea2:	490f      	ldr	r1, [pc, #60]	; (8000ee0 <xTaskRemoveFromEventList+0x70>)
 8000ea4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8000ea6:	680a      	ldr	r2, [r1, #0]
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	40ab      	lsls	r3, r5
 8000eac:	4313      	orrs	r3, r2
 8000eae:	600b      	str	r3, [r1, #0]
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <xTaskRemoveFromEventList+0x74>)
 8000eb2:	2014      	movs	r0, #20
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	fb00 3005 	mla	r0, r0, r5, r3
 8000eba:	e001      	b.n	8000ec0 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8000ebc:	480a      	ldr	r0, [pc, #40]	; (8000ee8 <xTaskRemoveFromEventList+0x78>)
 8000ebe:	4629      	mov	r1, r5
 8000ec0:	f000 fe8c 	bl	8001bdc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <xTaskRemoveFromEventList+0x7c>)
 8000ec6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ecc:	429a      	cmp	r2, r3
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8000ece:	bf83      	ittte	hi
 8000ed0:	4b07      	ldrhi	r3, [pc, #28]	; (8000ef0 <xTaskRemoveFromEventList+0x80>)
 8000ed2:	2001      	movhi	r0, #1
 8000ed4:	6018      	strhi	r0, [r3, #0]
	}
	else
	{
		xReturn = pdFALSE;
 8000ed6:	2000      	movls	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
 8000ed8:	bd70      	pop	{r4, r5, r6, pc}
 8000eda:	bf00      	nop
 8000edc:	200000ec 	.word	0x200000ec
 8000ee0:	20000144 	.word	0x20000144
 8000ee4:	20000060 	.word	0x20000060
 8000ee8:	20000100 	.word	0x20000100
 8000eec:	200000f0 	.word	0x200000f0
 8000ef0:	20000148 	.word	0x20000148

08000ef4 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8000ef4:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8000ef6:	b908      	cbnz	r0, 8000efc <vTaskSetTimeOutState+0x8>
 8000ef8:	f7ff fcf4 	bl	80008e4 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8000efc:	4b03      	ldr	r3, [pc, #12]	; (8000f0c <vTaskSetTimeOutState+0x18>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8000f02:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <vTaskSetTimeOutState+0x1c>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6043      	str	r3, [r0, #4]
 8000f08:	bd08      	pop	{r3, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000024 	.word	0x20000024
 8000f10:	200000f8 	.word	0x200000f8

08000f14 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8000f14:	b538      	push	{r3, r4, r5, lr}
 8000f16:	460d      	mov	r5, r1
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8000f18:	4604      	mov	r4, r0
 8000f1a:	b940      	cbnz	r0, 8000f2e <xTaskCheckForTimeOut+0x1a>
 8000f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f20:	f383 8811 	msr	BASEPRI, r3
 8000f24:	f3bf 8f6f 	isb	sy
 8000f28:	f3bf 8f4f 	dsb	sy
 8000f2c:	e7fe      	b.n	8000f2c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8000f2e:	b941      	cbnz	r1, 8000f42 <xTaskCheckForTimeOut+0x2e>
 8000f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f34:	f383 8811 	msr	BASEPRI, r3
 8000f38:	f3bf 8f6f 	isb	sy
 8000f3c:	f3bf 8f4f 	dsb	sy
 8000f40:	e7fe      	b.n	8000f40 <xTaskCheckForTimeOut+0x2c>

	taskENTER_CRITICAL();
 8000f42:	f000 fd07 	bl	8001954 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8000f46:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <xTaskCheckForTimeOut+0x6c>)
 8000f48:	6819      	ldr	r1, [r3, #0]

		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
 8000f4a:	682b      	ldr	r3, [r5, #0]
 8000f4c:	1c5a      	adds	r2, r3, #1
 8000f4e:	d010      	beq.n	8000f72 <xTaskCheckForTimeOut+0x5e>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8000f50:	4a0c      	ldr	r2, [pc, #48]	; (8000f84 <xTaskCheckForTimeOut+0x70>)
 8000f52:	6820      	ldr	r0, [r4, #0]
 8000f54:	6812      	ldr	r2, [r2, #0]
 8000f56:	4290      	cmp	r0, r2
 8000f58:	6862      	ldr	r2, [r4, #4]
 8000f5a:	d001      	beq.n	8000f60 <xTaskCheckForTimeOut+0x4c>
 8000f5c:	4291      	cmp	r1, r2
 8000f5e:	d20a      	bcs.n	8000f76 <xTaskCheckForTimeOut+0x62>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
 8000f60:	1a88      	subs	r0, r1, r2
 8000f62:	4283      	cmp	r3, r0
 8000f64:	d907      	bls.n	8000f76 <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
 8000f66:	1a52      	subs	r2, r2, r1
 8000f68:	4413      	add	r3, r2
 8000f6a:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	f7ff ffc1 	bl	8000ef4 <vTaskSetTimeOutState>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
 8000f72:	2400      	movs	r4, #0
 8000f74:	e000      	b.n	8000f78 <xTaskCheckForTimeOut+0x64>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
 8000f76:	2401      	movs	r4, #1
		else
		{
			xReturn = pdTRUE;
		}
	}
	taskEXIT_CRITICAL();
 8000f78:	f000 fd0e 	bl	8001998 <vPortExitCritical>

	return xReturn;
}
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	bd38      	pop	{r3, r4, r5, pc}
 8000f80:	200000f8 	.word	0x200000f8
 8000f84:	20000024 	.word	0x20000024

08000f88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xYieldPending = pdTRUE;
 8000f88:	4b01      	ldr	r3, [pc, #4]	; (8000f90 <vTaskMissedYield+0x8>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	4770      	bx	lr
 8000f90:	20000148 	.word	0x20000148

08000f94 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <xTaskGetSchedulerState+0x18>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	b133      	cbz	r3, 8000fa8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000f9a:	4b05      	ldr	r3, [pc, #20]	; (8000fb0 <xTaskGetSchedulerState+0x1c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8000fa0:	bf0c      	ite	eq
 8000fa2:	2002      	moveq	r0, #2
 8000fa4:	2000      	movne	r0, #0
 8000fa6:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8000fa8:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 8000faa:	4770      	bx	lr
 8000fac:	2000002c 	.word	0x2000002c
 8000fb0:	200000ec 	.word	0x200000ec

08000fb4 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8000fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8000fb8:	4604      	mov	r4, r0
 8000fba:	2800      	cmp	r0, #0
 8000fbc:	d038      	beq.n	8001030 <vTaskPriorityInherit+0x7c>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8000fbe:	4d1d      	ldr	r5, [pc, #116]	; (8001034 <vTaskPriorityInherit+0x80>)
 8000fc0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000fc2:	682a      	ldr	r2, [r5, #0]
 8000fc4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d232      	bcs.n	8001030 <vTaskPriorityInherit+0x7c>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8000fca:	6982      	ldr	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8000fcc:	4e1a      	ldr	r6, [pc, #104]	; (8001038 <vTaskPriorityInherit+0x84>)
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8000fce:	2a00      	cmp	r2, #0
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000fd0:	bfa1      	itttt	ge
 8000fd2:	682a      	ldrge	r2, [r5, #0]
 8000fd4:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8000fd6:	f1c2 0207 	rsbge	r2, r2, #7
 8000fda:	6182      	strge	r2, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
 8000fdc:	2714      	movs	r7, #20
 8000fde:	6942      	ldr	r2, [r0, #20]
 8000fe0:	fb07 6303 	mla	r3, r7, r3, r6
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d120      	bne.n	800102a <vTaskPriorityInherit+0x76>
				{
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8000fe8:	f100 0804 	add.w	r8, r0, #4
 8000fec:	4640      	mov	r0, r8
 8000fee:	f000 fe19 	bl	8001c24 <uxListRemove>
 8000ff2:	4b12      	ldr	r3, [pc, #72]	; (800103c <vTaskPriorityInherit+0x88>)
 8000ff4:	b948      	cbnz	r0, 800100a <vTaskPriorityInherit+0x56>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8000ff6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000ff8:	4347      	muls	r7, r0
 8000ffa:	59f2      	ldr	r2, [r6, r7]
 8000ffc:	b92a      	cbnz	r2, 800100a <vTaskPriorityInherit+0x56>
 8000ffe:	6819      	ldr	r1, [r3, #0]
 8001000:	2201      	movs	r2, #1
 8001002:	4082      	lsls	r2, r0
 8001004:	ea21 0202 	bic.w	r2, r1, r2
 8001008:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800100a:	682a      	ldr	r2, [r5, #0]
 800100c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800100e:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8001010:	2001      	movs	r0, #1
 8001012:	681c      	ldr	r4, [r3, #0]
 8001014:	4090      	lsls	r0, r2
 8001016:	4320      	orrs	r0, r4
 8001018:	6018      	str	r0, [r3, #0]
 800101a:	2014      	movs	r0, #20
 800101c:	4641      	mov	r1, r8
 800101e:	fb00 6002 	mla	r0, r0, r2, r6
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001022:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
					prvAddTaskToReadyList( pxTCB );
 8001026:	f000 bdd9 	b.w	8001bdc <vListInsertEnd>
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 800102a:	682b      	ldr	r3, [r5, #0]
 800102c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102e:	62c3      	str	r3, [r0, #44]	; 0x2c
 8001030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001034:	200000f0 	.word	0x200000f0
 8001038:	20000060 	.word	0x20000060
 800103c:	20000144 	.word	0x20000144

08001040 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8001040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
 8001042:	4604      	mov	r4, r0
 8001044:	b908      	cbnz	r0, 800104a <xTaskPriorityDisinherit+0xa>
#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;
 8001046:	2000      	movs	r0, #0
 8001048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800104a:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <xTaskPriorityDisinherit+0x94>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4298      	cmp	r0, r3
 8001050:	d008      	beq.n	8001064 <xTaskPriorityDisinherit+0x24>
 8001052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001056:	f383 8811 	msr	BASEPRI, r3
 800105a:	f3bf 8f6f 	isb	sy
 800105e:	f3bf 8f4f 	dsb	sy
 8001062:	e7fe      	b.n	8001062 <xTaskPriorityDisinherit+0x22>

			configASSERT( pxTCB->uxMutexesHeld );
 8001064:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001066:	b943      	cbnz	r3, 800107a <xTaskPriorityDisinherit+0x3a>
 8001068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800106c:	f383 8811 	msr	BASEPRI, r3
 8001070:	f3bf 8f6f 	isb	sy
 8001074:	f3bf 8f4f 	dsb	sy
 8001078:	e7fe      	b.n	8001078 <xTaskPriorityDisinherit+0x38>
			( pxTCB->uxMutexesHeld )--;

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800107a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800107c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 800107e:	3b01      	subs	r3, #1

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001080:	4291      	cmp	r1, r2
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );

			configASSERT( pxTCB->uxMutexesHeld );
			( pxTCB->uxMutexesHeld )--;
 8001082:	6503      	str	r3, [r0, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8001084:	d0df      	beq.n	8001046 <xTaskPriorityDisinherit+0x6>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1dd      	bne.n	8001046 <xTaskPriorityDisinherit+0x6>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 800108a:	1d05      	adds	r5, r0, #4
 800108c:	4628      	mov	r0, r5
 800108e:	f000 fdc9 	bl	8001c24 <uxListRemove>
 8001092:	4e11      	ldr	r6, [pc, #68]	; (80010d8 <xTaskPriorityDisinherit+0x98>)
 8001094:	4a11      	ldr	r2, [pc, #68]	; (80010dc <xTaskPriorityDisinherit+0x9c>)
 8001096:	b950      	cbnz	r0, 80010ae <xTaskPriorityDisinherit+0x6e>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001098:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800109a:	2114      	movs	r1, #20
 800109c:	4379      	muls	r1, r7
 800109e:	5873      	ldr	r3, [r6, r1]
 80010a0:	b92b      	cbnz	r3, 80010ae <xTaskPriorityDisinherit+0x6e>
 80010a2:	6810      	ldr	r0, [r2, #0]
 80010a4:	2301      	movs	r3, #1
 80010a6:	40bb      	lsls	r3, r7
 80010a8:	ea20 0303 	bic.w	r3, r0, r3
 80010ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80010ae:	6ce3      	ldr	r3, [r4, #76]	; 0x4c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
					prvAddTaskToReadyList( pxTCB );
 80010b0:	6810      	ldr	r0, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80010b2:	62e3      	str	r3, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80010b4:	f1c3 0107 	rsb	r1, r3, #7
 80010b8:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80010ba:	2401      	movs	r4, #1
 80010bc:	fa04 f103 	lsl.w	r1, r4, r3
 80010c0:	4308      	orrs	r0, r1
 80010c2:	6010      	str	r0, [r2, #0]
 80010c4:	2014      	movs	r0, #20
 80010c6:	fb00 6003 	mla	r0, r0, r3, r6
 80010ca:	4629      	mov	r1, r5
 80010cc:	f000 fd86 	bl	8001bdc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80010d0:	4620      	mov	r0, r4
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
 80010d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80010d4:	200000f0 	.word	0x200000f0
 80010d8:	20000060 	.word	0x20000060
 80010dc:	20000144 	.word	0x20000144

080010e0 <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80010e0:	4b04      	ldr	r3, [pc, #16]	; (80010f4 <pvTaskIncrementMutexHeldCount+0x14>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	b11a      	cbz	r2, 80010ee <pvTaskIncrementMutexHeldCount+0xe>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80010e6:	6819      	ldr	r1, [r3, #0]
 80010e8:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 80010ea:	3201      	adds	r2, #1
 80010ec:	650a      	str	r2, [r1, #80]	; 0x50
		}

		return pxCurrentTCB;
 80010ee:	6818      	ldr	r0, [r3, #0]
	}
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	200000f0 	.word	0x200000f0

080010f8 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80010f8:	b538      	push	{r3, r4, r5, lr}
 80010fa:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80010fc:	6c02      	ldr	r2, [r0, #64]	; 0x40

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80010fe:	4604      	mov	r4, r0
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001100:	b932      	cbnz	r2, 8001110 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001102:	6805      	ldr	r5, [r0, #0]
 8001104:	bb45      	cbnz	r5, 8001158 <prvCopyDataToQueue+0x60>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001106:	6840      	ldr	r0, [r0, #4]
 8001108:	f7ff ff9a 	bl	8001040 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800110c:	6065      	str	r5, [r4, #4]
 800110e:	e024      	b.n	800115a <prvCopyDataToQueue+0x62>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8001110:	b96d      	cbnz	r5, 800112e <prvCopyDataToQueue+0x36>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001112:	6880      	ldr	r0, [r0, #8]
 8001114:	f001 fffa 	bl	800310c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001118:	68a2      	ldr	r2, [r4, #8]
 800111a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800111c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800111e:	6862      	ldr	r2, [r4, #4]
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001120:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001122:	4293      	cmp	r3, r2
 8001124:	d318      	bcc.n	8001158 <prvCopyDataToQueue+0x60>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001126:	6823      	ldr	r3, [r4, #0]
 8001128:	60a3      	str	r3, [r4, #8]
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 800112a:	4628      	mov	r0, r5
 800112c:	e015      	b.n	800115a <prvCopyDataToQueue+0x62>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800112e:	68c0      	ldr	r0, [r0, #12]
 8001130:	f001 ffec 	bl	800310c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001134:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001136:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001138:	6821      	ldr	r1, [r4, #0]
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800113a:	425b      	negs	r3, r3
 800113c:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800113e:	428a      	cmp	r2, r1
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001140:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001142:	bf3e      	ittt	cc
 8001144:	6862      	ldrcc	r2, [r4, #4]
 8001146:	189b      	addcc	r3, r3, r2
 8001148:	60e3      	strcc	r3, [r4, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800114a:	2d02      	cmp	r5, #2
 800114c:	d104      	bne.n	8001158 <prvCopyDataToQueue+0x60>
		{
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800114e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001150:	b113      	cbz	r3, 8001158 <prvCopyDataToQueue+0x60>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--( pxQueue->uxMessagesWaiting );
 8001152:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001154:	3b01      	subs	r3, #1
 8001156:	63a3      	str	r3, [r4, #56]	; 0x38
#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
BaseType_t xReturn = pdFALSE;
 8001158:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
 800115a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800115c:	3301      	adds	r3, #1
 800115e:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
 8001160:	bd38      	pop	{r3, r4, r5, pc}

08001162 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001162:	4603      	mov	r3, r0
 8001164:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001166:	6c1a      	ldr	r2, [r3, #64]	; 0x40
	return xReturn;
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8001168:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800116a:	b162      	cbz	r2, 8001186 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800116c:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800116e:	685c      	ldr	r4, [r3, #4]

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001170:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001172:	42a1      	cmp	r1, r4

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001174:	60d9      	str	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001176:	bf24      	itt	cs
 8001178:	6819      	ldrcs	r1, [r3, #0]
 800117a:	60d9      	strcs	r1, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800117c:	68d9      	ldr	r1, [r3, #12]
	}
}
 800117e:	f85d 4b04 	ldr.w	r4, [sp], #4
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001182:	f001 bfc3 	b.w	800310c <memcpy>
	}
}
 8001186:	f85d 4b04 	ldr.w	r4, [sp], #4
 800118a:	4770      	bx	lr

0800118c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800118c:	b538      	push	{r3, r4, r5, lr}
 800118e:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8001190:	f000 fbe0 	bl	8001954 <vPortEnterCritical>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001194:	f104 0524 	add.w	r5, r4, #36	; 0x24
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
 8001198:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800119a:	2b00      	cmp	r3, #0
 800119c:	dd0b      	ble.n	80011b6 <prvUnlockQueue+0x2a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800119e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011a0:	b14b      	cbz	r3, 80011b6 <prvUnlockQueue+0x2a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80011a2:	4628      	mov	r0, r5
 80011a4:	f7ff fe64 	bl	8000e70 <xTaskRemoveFromEventList>
 80011a8:	b108      	cbz	r0, 80011ae <prvUnlockQueue+0x22>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						vTaskMissedYield();
 80011aa:	f7ff feed 	bl	8000f88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--( pxQueue->xTxLock );
 80011ae:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80011b0:	3b01      	subs	r3, #1
 80011b2:	64a3      	str	r3, [r4, #72]	; 0x48
 80011b4:	e7f0      	b.n	8001198 <prvUnlockQueue+0xc>
		}

		pxQueue->xTxLock = queueUNLOCKED;
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
 80011bc:	f000 fbec 	bl	8001998 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80011c0:	f000 fbc8 	bl	8001954 <vPortEnterCritical>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80011c4:	f104 0510 	add.w	r5, r4, #16
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
 80011c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	dd0b      	ble.n	80011e6 <prvUnlockQueue+0x5a>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80011ce:	6923      	ldr	r3, [r4, #16]
 80011d0:	b14b      	cbz	r3, 80011e6 <prvUnlockQueue+0x5a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80011d2:	4628      	mov	r0, r5
 80011d4:	f7ff fe4c 	bl	8000e70 <xTaskRemoveFromEventList>
 80011d8:	b108      	cbz	r0, 80011de <prvUnlockQueue+0x52>
				{
					vTaskMissedYield();
 80011da:	f7ff fed5 	bl	8000f88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--( pxQueue->xRxLock );
 80011de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80011e0:	3b01      	subs	r3, #1
 80011e2:	6463      	str	r3, [r4, #68]	; 0x44
 80011e4:	e7f0      	b.n	80011c8 <prvUnlockQueue+0x3c>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ea:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80011ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
	}
	taskEXIT_CRITICAL();
 80011f0:	f000 bbd2 	b.w	8001998 <vPortExitCritical>

080011f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80011f4:	b538      	push	{r3, r4, r5, lr}
 80011f6:	460d      	mov	r5, r1
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80011f8:	4604      	mov	r4, r0
 80011fa:	b940      	cbnz	r0, 800120e <xQueueGenericReset+0x1a>
 80011fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001200:	f383 8811 	msr	BASEPRI, r3
 8001204:	f3bf 8f6f 	isb	sy
 8001208:	f3bf 8f4f 	dsb	sy
 800120c:	e7fe      	b.n	800120c <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 800120e:	f000 fba1 	bl	8001954 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001212:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001214:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001216:	6822      	ldr	r2, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001218:	60a2      	str	r2, [r4, #8]

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800121a:	4343      	muls	r3, r0
 800121c:	18d1      	adds	r1, r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800121e:	1a1b      	subs	r3, r3, r0
 8001220:	4413      	add	r3, r2

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001222:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001224:	60e3      	str	r3, [r4, #12]
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001226:	2100      	movs	r1, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 8001228:	f04f 33ff 	mov.w	r3, #4294967295
	configASSERT( pxQueue );

	taskENTER_CRITICAL();
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800122c:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
		pxQueue->xRxLock = queueUNLOCKED;
 800122e:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
 8001230:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
 8001232:	b985      	cbnz	r5, 8001256 <xQueueGenericReset+0x62>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001234:	6923      	ldr	r3, [r4, #16]
 8001236:	b1b3      	cbz	r3, 8001266 <xQueueGenericReset+0x72>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8001238:	f104 0010 	add.w	r0, r4, #16
 800123c:	f7ff fe18 	bl	8000e70 <xTaskRemoveFromEventList>
 8001240:	2801      	cmp	r0, #1
 8001242:	d110      	bne.n	8001266 <xQueueGenericReset+0x72>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <xQueueGenericReset+0x7c>)
 8001246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	f3bf 8f4f 	dsb	sy
 8001250:	f3bf 8f6f 	isb	sy
 8001254:	e007      	b.n	8001266 <xQueueGenericReset+0x72>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001256:	f104 0010 	add.w	r0, r4, #16
 800125a:	f000 fcb1 	bl	8001bc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800125e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001262:	f000 fcad 	bl	8001bc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001266:	f000 fb97 	bl	8001998 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 800126a:	2001      	movs	r0, #1
 800126c:	bd38      	pop	{r3, r4, r5, pc}
 800126e:	bf00      	nop
 8001270:	e000ed04 	.word	0xe000ed04

08001274 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
{
 8001274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001276:	460d      	mov	r5, r1
 8001278:	4617      	mov	r7, r2

	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800127a:	4606      	mov	r6, r0
 800127c:	b940      	cbnz	r0, 8001290 <xQueueGenericCreate+0x1c>
 800127e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001282:	f383 8811 	msr	BASEPRI, r3
 8001286:	f3bf 8f6f 	isb	sy
 800128a:	f3bf 8f4f 	dsb	sy
 800128e:	e7fe      	b.n	800128e <xQueueGenericCreate+0x1a>

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001290:	b111      	cbz	r1, 8001298 <xQueueGenericCreate+0x24>
	}
	else
	{
		/* The queue is one byte longer than asked for to make wrap checking
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001292:	4348      	muls	r0, r1
 8001294:	3001      	adds	r0, #1
 8001296:	e000      	b.n	800129a <xQueueGenericCreate+0x26>
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );

	if( uxItemSize == ( UBaseType_t ) 0 )
	{
		/* There is not going to be a queue storage area. */
		xQueueSizeInBytes = ( size_t ) 0;
 8001298:	4608      	mov	r0, r1
		easier/faster. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	}

	/* Allocate the new queue structure and storage area. */
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800129a:	3054      	adds	r0, #84	; 0x54
 800129c:	f000 fa3c 	bl	8001718 <pvPortMalloc>

	if( pxNewQueue != NULL )
 80012a0:	4604      	mov	r4, r0
 80012a2:	b130      	cbz	r0, 80012b2 <xQueueGenericCreate+0x3e>
	{
		if( uxItemSize == ( UBaseType_t ) 0 )
 80012a4:	b90d      	cbnz	r5, 80012aa <xQueueGenericCreate+0x36>
		{
			/* No RAM was allocated for the queue storage area, but PC head
			cannot be set to NULL because NULL is used as a key to say the queue
			is used as a mutex.  Therefore just set pcHead to point to the queue
			as a benign value that is known to be within the memory map. */
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80012a6:	6020      	str	r0, [r4, #0]
 80012a8:	e00c      	b.n	80012c4 <xQueueGenericCreate+0x50>
		}
		else
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80012aa:	f100 0354 	add.w	r3, r0, #84	; 0x54
 80012ae:	6003      	str	r3, [r0, #0]
 80012b0:	e008      	b.n	80012c4 <xQueueGenericCreate+0x50>
 80012b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012b6:	f383 8811 	msr	BASEPRI, r3
 80012ba:	f3bf 8f6f 	isb	sy
 80012be:	f3bf 8f4f 	dsb	sy
 80012c2:	e7fe      	b.n	80012c2 <xQueueGenericCreate+0x4e>
		}

		/* Initialise the queue members as described above where the queue type
		is defined. */
		pxNewQueue->uxLength = uxQueueLength;
 80012c4:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
 80012c6:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80012c8:	2101      	movs	r1, #1
 80012ca:	4620      	mov	r0, r4
 80012cc:	f7ff ff92 	bl	80011f4 <xQueueGenericReset>

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			pxNewQueue->ucQueueType = ucQueueType;
 80012d0:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
	}

	configASSERT( xReturn );

	return xReturn;
}
 80012d4:	4620      	mov	r0, r4
 80012d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080012d8 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80012d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80012dc:	4689      	mov	r9, r1
 80012de:	9201      	str	r2, [sp, #4]
 80012e0:	461f      	mov	r7, r3
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80012e2:	4604      	mov	r4, r0
 80012e4:	b940      	cbnz	r0, 80012f8 <xQueueGenericSend+0x20>
 80012e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012ea:	f383 8811 	msr	BASEPRI, r3
 80012ee:	f3bf 8f6f 	isb	sy
 80012f2:	f3bf 8f4f 	dsb	sy
 80012f6:	e7fe      	b.n	80012f6 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80012f8:	b951      	cbnz	r1, 8001310 <xQueueGenericSend+0x38>
 80012fa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80012fc:	b143      	cbz	r3, 8001310 <xQueueGenericSend+0x38>
 80012fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001302:	f383 8811 	msr	BASEPRI, r3
 8001306:	f3bf 8f6f 	isb	sy
 800130a:	f3bf 8f4f 	dsb	sy
 800130e:	e7fe      	b.n	800130e <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001310:	2f02      	cmp	r7, #2
 8001312:	d10b      	bne.n	800132c <xQueueGenericSend+0x54>
 8001314:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001316:	2b01      	cmp	r3, #1
 8001318:	d008      	beq.n	800132c <xQueueGenericSend+0x54>
 800131a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800131e:	f383 8811 	msr	BASEPRI, r3
 8001322:	f3bf 8f6f 	isb	sy
 8001326:	f3bf 8f4f 	dsb	sy
 800132a:	e7fe      	b.n	800132a <xQueueGenericSend+0x52>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800132c:	f7ff fe32 	bl	8000f94 <xTaskGetSchedulerState>
 8001330:	b910      	cbnz	r0, 8001338 <xQueueGenericSend+0x60>
 8001332:	9e01      	ldr	r6, [sp, #4]
 8001334:	b10e      	cbz	r6, 800133a <xQueueGenericSend+0x62>
 8001336:	e073      	b.n	8001420 <xQueueGenericSend+0x148>
 8001338:	2600      	movs	r6, #0
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 800133a:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 8001438 <xQueueGenericSend+0x160>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 800133e:	f04f 0800 	mov.w	r8, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001342:	f000 fb07 	bl	8001954 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001346:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001348:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800134a:	429a      	cmp	r2, r3
 800134c:	d301      	bcc.n	8001352 <xQueueGenericSend+0x7a>
 800134e:	2f02      	cmp	r7, #2
 8001350:	d11a      	bne.n	8001388 <xQueueGenericSend+0xb0>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001352:	463a      	mov	r2, r7
 8001354:	4649      	mov	r1, r9
 8001356:	4620      	mov	r0, r4
 8001358:	f7ff fece 	bl	80010f8 <prvCopyDataToQueue>
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800135c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800135e:	b133      	cbz	r3, 800136e <xQueueGenericSend+0x96>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
 8001360:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001364:	f7ff fd84 	bl	8000e70 <xTaskRemoveFromEventList>
 8001368:	2801      	cmp	r0, #1
 800136a:	d109      	bne.n	8001380 <xQueueGenericSend+0xa8>
 800136c:	e000      	b.n	8001370 <xQueueGenericSend+0x98>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800136e:	b138      	cbz	r0, 8001380 <xQueueGenericSend+0xa8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8001370:	4b31      	ldr	r3, [pc, #196]	; (8001438 <xQueueGenericSend+0x160>)
 8001372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	f3bf 8f4f 	dsb	sy
 800137c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8001380:	f000 fb0a 	bl	8001998 <vPortExitCritical>
				return pdPASS;
 8001384:	2001      	movs	r0, #1
 8001386:	e054      	b.n	8001432 <xQueueGenericSend+0x15a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8001388:	9d01      	ldr	r5, [sp, #4]
 800138a:	b91d      	cbnz	r5, 8001394 <xQueueGenericSend+0xbc>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800138c:	f000 fb04 	bl	8001998 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8001390:	4628      	mov	r0, r5
 8001392:	e04e      	b.n	8001432 <xQueueGenericSend+0x15a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001394:	b916      	cbnz	r6, 800139c <xQueueGenericSend+0xc4>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001396:	a802      	add	r0, sp, #8
 8001398:	f7ff fdac 	bl	8000ef4 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800139c:	f000 fafc 	bl	8001998 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80013a0:	f7ff fb64 	bl	8000a6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80013a4:	f000 fad6 	bl	8001954 <vPortEnterCritical>
 80013a8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80013aa:	3301      	adds	r3, #1
 80013ac:	bf08      	it	eq
 80013ae:	f8c4 8044 	streq.w	r8, [r4, #68]	; 0x44
 80013b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80013b4:	3301      	adds	r3, #1
 80013b6:	bf08      	it	eq
 80013b8:	f8c4 8048 	streq.w	r8, [r4, #72]	; 0x48
 80013bc:	f000 faec 	bl	8001998 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80013c0:	a901      	add	r1, sp, #4
 80013c2:	a802      	add	r0, sp, #8
 80013c4:	f7ff fda6 	bl	8000f14 <xTaskCheckForTimeOut>
 80013c8:	bb18      	cbnz	r0, 8001412 <xQueueGenericSend+0x13a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80013ca:	f000 fac3 	bl	8001954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80013ce:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80013d0:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80013d2:	f000 fae1 	bl	8001998 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80013d6:	42ae      	cmp	r6, r5
 80013d8:	d115      	bne.n	8001406 <xQueueGenericSend+0x12e>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80013da:	9901      	ldr	r1, [sp, #4]
 80013dc:	f104 0010 	add.w	r0, r4, #16
 80013e0:	f7ff fd0e 	bl	8000e00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80013e4:	4620      	mov	r0, r4
 80013e6:	f7ff fed1 	bl	800118c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80013ea:	f7ff fbdf 	bl	8000bac <xTaskResumeAll>
 80013ee:	b108      	cbz	r0, 80013f4 <xQueueGenericSend+0x11c>
 80013f0:	2601      	movs	r6, #1
 80013f2:	e7a6      	b.n	8001342 <xQueueGenericSend+0x6a>
				{
					portYIELD_WITHIN_API();
 80013f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013f8:	f8ca 3000 	str.w	r3, [sl]
 80013fc:	f3bf 8f4f 	dsb	sy
 8001400:	f3bf 8f6f 	isb	sy
 8001404:	e7f4      	b.n	80013f0 <xQueueGenericSend+0x118>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001406:	4620      	mov	r0, r4
 8001408:	f7ff fec0 	bl	800118c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800140c:	f7ff fbce 	bl	8000bac <xTaskResumeAll>
 8001410:	e7ee      	b.n	80013f0 <xQueueGenericSend+0x118>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8001412:	4620      	mov	r0, r4
 8001414:	f7ff feba 	bl	800118c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001418:	f7ff fbc8 	bl	8000bac <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800141c:	2000      	movs	r0, #0
 800141e:	e008      	b.n	8001432 <xQueueGenericSend+0x15a>
 8001420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001424:	f383 8811 	msr	BASEPRI, r3
 8001428:	f3bf 8f6f 	isb	sy
 800142c:	f3bf 8f4f 	dsb	sy
 8001430:	e7fe      	b.n	8001430 <xQueueGenericSend+0x158>
		}
	}
}
 8001432:	b004      	add	sp, #16
 8001434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001438:	e000ed04 	.word	0xe000ed04

0800143c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800143c:	b570      	push	{r4, r5, r6, lr}
 800143e:	460d      	mov	r5, r1
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8001440:	4604      	mov	r4, r0
 8001442:	b940      	cbnz	r0, 8001456 <xQueueGiveFromISR+0x1a>
 8001444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001448:	f383 8811 	msr	BASEPRI, r3
 800144c:	f3bf 8f6f 	isb	sy
 8001450:	f3bf 8f4f 	dsb	sy
 8001454:	e7fe      	b.n	8001454 <xQueueGiveFromISR+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8001456:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001458:	b143      	cbz	r3, 800146c <xQueueGiveFromISR+0x30>
 800145a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800145e:	f383 8811 	msr	BASEPRI, r3
 8001462:	f3bf 8f6f 	isb	sy
 8001466:	f3bf 8f4f 	dsb	sy
 800146a:	e7fe      	b.n	800146a <xQueueGiveFromISR+0x2e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800146c:	6803      	ldr	r3, [r0, #0]
 800146e:	b90b      	cbnz	r3, 8001474 <xQueueGiveFromISR+0x38>
 8001470:	6843      	ldr	r3, [r0, #4]
 8001472:	bb3b      	cbnz	r3, 80014c4 <xQueueGiveFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001474:	f000 fb76 	bl	8001b64 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001478:	f3ef 8611 	mrs	r6, BASEPRI
 800147c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001480:	f383 8811 	msr	BASEPRI, r3
 8001484:	f3bf 8f6f 	isb	sy
 8001488:	f3bf 8f4f 	dsb	sy
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 800148c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800148e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001490:	429a      	cmp	r2, r3
 8001492:	d215      	bcs.n	80014c0 <xQueueGiveFromISR+0x84>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );
 8001494:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001496:	3301      	adds	r3, #1
 8001498:	63a3      	str	r3, [r4, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 800149a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800149c:	3301      	adds	r3, #1
 800149e:	d10a      	bne.n	80014b6 <xQueueGiveFromISR+0x7a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80014a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80014a2:	b15b      	cbz	r3, 80014bc <xQueueGiveFromISR+0x80>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80014a4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80014a8:	f7ff fce2 	bl	8000e70 <xTaskRemoveFromEventList>
 80014ac:	b130      	cbz	r0, 80014bc <xQueueGiveFromISR+0x80>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80014ae:	b12d      	cbz	r5, 80014bc <xQueueGiveFromISR+0x80>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80014b0:	2001      	movs	r0, #1
 80014b2:	6028      	str	r0, [r5, #0]
 80014b4:	e00f      	b.n	80014d6 <xQueueGiveFromISR+0x9a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 80014b6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80014b8:	3301      	adds	r3, #1
 80014ba:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
 80014bc:	2001      	movs	r0, #1
 80014be:	e00a      	b.n	80014d6 <xQueueGiveFromISR+0x9a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80014c0:	2000      	movs	r0, #0
 80014c2:	e008      	b.n	80014d6 <xQueueGiveFromISR+0x9a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80014c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014c8:	f383 8811 	msr	BASEPRI, r3
 80014cc:	f3bf 8f6f 	isb	sy
 80014d0:	f3bf 8f4f 	dsb	sy
 80014d4:	e7fe      	b.n	80014d4 <xQueueGiveFromISR+0x98>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80014d6:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 80014da:	bd70      	pop	{r4, r5, r6, pc}

080014dc <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 80014dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80014e0:	4688      	mov	r8, r1
 80014e2:	9201      	str	r2, [sp, #4]
 80014e4:	469a      	mov	sl, r3
BaseType_t xEntryTimeSet = pdFALSE;
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 80014e6:	4604      	mov	r4, r0
 80014e8:	b940      	cbnz	r0, 80014fc <xQueueGenericReceive+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80014ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014ee:	f383 8811 	msr	BASEPRI, r3
 80014f2:	f3bf 8f6f 	isb	sy
 80014f6:	f3bf 8f4f 	dsb	sy
 80014fa:	e7fe      	b.n	80014fa <xQueueGenericReceive+0x1e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80014fc:	b951      	cbnz	r1, 8001514 <xQueueGenericReceive+0x38>
 80014fe:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001500:	b143      	cbz	r3, 8001514 <xQueueGenericReceive+0x38>
 8001502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001506:	f383 8811 	msr	BASEPRI, r3
 800150a:	f3bf 8f6f 	isb	sy
 800150e:	f3bf 8f4f 	dsb	sy
 8001512:	e7fe      	b.n	8001512 <xQueueGenericReceive+0x36>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001514:	f7ff fd3e 	bl	8000f94 <xTaskGetSchedulerState>
 8001518:	b910      	cbnz	r0, 8001520 <xQueueGenericReceive+0x44>
 800151a:	9e01      	ldr	r6, [sp, #4]
 800151c:	b10e      	cbz	r6, 8001522 <xQueueGenericReceive+0x46>
 800151e:	e085      	b.n	800162c <xQueueGenericReceive+0x150>
 8001520:	2600      	movs	r6, #0

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
				prvUnlockQueue( pxQueue );
				if( xTaskResumeAll() == pdFALSE )
				{
					portYIELD_WITHIN_API();
 8001522:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8001644 <xQueueGenericReceive+0x168>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
		prvLockQueue( pxQueue );
 8001526:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8001528:	f000 fa14 	bl	8001954 <vPortEnterCritical>
		{
			/* Is there data in the queue now?  To be running the calling task
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 800152c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800152e:	b363      	cbz	r3, 800158a <xQueueGenericReceive+0xae>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001530:	4641      	mov	r1, r8
 8001532:	4620      	mov	r0, r4
			must be	the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8001534:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001536:	f7ff fe14 	bl	8001162 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800153a:	f1ba 0f00 	cmp.w	sl, #0
 800153e:	d110      	bne.n	8001562 <xQueueGenericReceive+0x86>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					--( pxQueue->uxMessagesWaiting );
 8001540:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001542:	3b01      	subs	r3, #1
 8001544:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001546:	6823      	ldr	r3, [r4, #0]
 8001548:	b913      	cbnz	r3, 8001550 <xQueueGenericReceive+0x74>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800154a:	f7ff fdc9 	bl	80010e0 <pvTaskIncrementMutexHeldCount>
 800154e:	6060      	str	r0, [r4, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001550:	6923      	ldr	r3, [r4, #16]
 8001552:	b1b3      	cbz	r3, 8001582 <xQueueGenericReceive+0xa6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
 8001554:	f104 0010 	add.w	r0, r4, #16
 8001558:	f7ff fc8a 	bl	8000e70 <xTaskRemoveFromEventList>
 800155c:	2801      	cmp	r0, #1
 800155e:	d110      	bne.n	8001582 <xQueueGenericReceive+0xa6>
 8001560:	e007      	b.n	8001572 <xQueueGenericReceive+0x96>
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001562:	6a63      	ldr	r3, [r4, #36]	; 0x24
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8001564:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001566:	b163      	cbz	r3, 8001582 <xQueueGenericReceive+0xa6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001568:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800156c:	f7ff fc80 	bl	8000e70 <xTaskRemoveFromEventList>
 8001570:	b138      	cbz	r0, 8001582 <xQueueGenericReceive+0xa6>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8001572:	4b34      	ldr	r3, [pc, #208]	; (8001644 <xQueueGenericReceive+0x168>)
 8001574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	f3bf 8f4f 	dsb	sy
 800157e:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8001582:	f000 fa09 	bl	8001998 <vPortExitCritical>
				return pdPASS;
 8001586:	2001      	movs	r0, #1
 8001588:	e059      	b.n	800163e <xQueueGenericReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800158a:	9d01      	ldr	r5, [sp, #4]
 800158c:	b91d      	cbnz	r5, 8001596 <xQueueGenericReceive+0xba>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800158e:	f000 fa03 	bl	8001998 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001592:	4628      	mov	r0, r5
 8001594:	e053      	b.n	800163e <xQueueGenericReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001596:	b916      	cbnz	r6, 800159e <xQueueGenericReceive+0xc2>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8001598:	a802      	add	r0, sp, #8
 800159a:	f7ff fcab 	bl	8000ef4 <vTaskSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800159e:	f000 f9fb 	bl	8001998 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80015a2:	f7ff fa63 	bl	8000a6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80015a6:	f000 f9d5 	bl	8001954 <vPortEnterCritical>
 80015aa:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015ac:	3301      	adds	r3, #1
 80015ae:	bf08      	it	eq
 80015b0:	6467      	streq	r7, [r4, #68]	; 0x44
 80015b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80015b4:	3301      	adds	r3, #1
 80015b6:	bf08      	it	eq
 80015b8:	64a7      	streq	r7, [r4, #72]	; 0x48
 80015ba:	f000 f9ed 	bl	8001998 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80015be:	a901      	add	r1, sp, #4
 80015c0:	a802      	add	r0, sp, #8
 80015c2:	f7ff fca7 	bl	8000f14 <xTaskCheckForTimeOut>
 80015c6:	bb50      	cbnz	r0, 800161e <xQueueGenericReceive+0x142>

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80015c8:	f000 f9c4 	bl	8001954 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80015cc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80015ce:	f000 f9e3 	bl	8001998 <vPortExitCritical>
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80015d2:	b9f5      	cbnz	r5, 8001612 <xQueueGenericReceive+0x136>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80015d4:	6823      	ldr	r3, [r4, #0]
 80015d6:	b933      	cbnz	r3, 80015e6 <xQueueGenericReceive+0x10a>
					{
						taskENTER_CRITICAL();
 80015d8:	f000 f9bc 	bl	8001954 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80015dc:	6860      	ldr	r0, [r4, #4]
 80015de:	f7ff fce9 	bl	8000fb4 <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 80015e2:	f000 f9d9 	bl	8001998 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80015e6:	9901      	ldr	r1, [sp, #4]
 80015e8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80015ec:	f7ff fc08 	bl	8000e00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80015f0:	4620      	mov	r0, r4
 80015f2:	f7ff fdcb 	bl	800118c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80015f6:	f7ff fad9 	bl	8000bac <xTaskResumeAll>
 80015fa:	b108      	cbz	r0, 8001600 <xQueueGenericReceive+0x124>
 80015fc:	2601      	movs	r6, #1
 80015fe:	e793      	b.n	8001528 <xQueueGenericReceive+0x4c>
				{
					portYIELD_WITHIN_API();
 8001600:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001604:	f8c9 3000 	str.w	r3, [r9]
 8001608:	f3bf 8f4f 	dsb	sy
 800160c:	f3bf 8f6f 	isb	sy
 8001610:	e7f4      	b.n	80015fc <xQueueGenericReceive+0x120>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8001612:	4620      	mov	r0, r4
 8001614:	f7ff fdba 	bl	800118c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8001618:	f7ff fac8 	bl	8000bac <xTaskResumeAll>
 800161c:	e7ee      	b.n	80015fc <xQueueGenericReceive+0x120>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 800161e:	4620      	mov	r0, r4
 8001620:	f7ff fdb4 	bl	800118c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001624:	f7ff fac2 	bl	8000bac <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
 8001628:	2000      	movs	r0, #0
 800162a:	e008      	b.n	800163e <xQueueGenericReceive+0x162>
 800162c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001630:	f383 8811 	msr	BASEPRI, r3
 8001634:	f3bf 8f6f 	isb	sy
 8001638:	f3bf 8f4f 	dsb	sy
 800163c:	e7fe      	b.n	800163c <xQueueGenericReceive+0x160>
		}
	}
}
 800163e:	b004      	add	sp, #16
 8001640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001644:	e000ed04 	.word	0xe000ed04

08001648 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8001648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800164a:	460e      	mov	r6, r1
 800164c:	4617      	mov	r7, r2
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 800164e:	4604      	mov	r4, r0
 8001650:	b940      	cbnz	r0, 8001664 <xQueueReceiveFromISR+0x1c>
 8001652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001656:	f383 8811 	msr	BASEPRI, r3
 800165a:	f3bf 8f6f 	isb	sy
 800165e:	f3bf 8f4f 	dsb	sy
 8001662:	e7fe      	b.n	8001662 <xQueueReceiveFromISR+0x1a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001664:	b951      	cbnz	r1, 800167c <xQueueReceiveFromISR+0x34>
 8001666:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001668:	b143      	cbz	r3, 800167c <xQueueReceiveFromISR+0x34>
 800166a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800166e:	f383 8811 	msr	BASEPRI, r3
 8001672:	f3bf 8f6f 	isb	sy
 8001676:	f3bf 8f4f 	dsb	sy
 800167a:	e7fe      	b.n	800167a <xQueueReceiveFromISR+0x32>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800167c:	f000 fa72 	bl	8001b64 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001680:	f3ef 8511 	mrs	r5, BASEPRI
 8001684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001688:	f383 8811 	msr	BASEPRI, r3
 800168c:	f3bf 8f6f 	isb	sy
 8001690:	f3bf 8f4f 	dsb	sy

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Cannot block in an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001694:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001696:	b1c0      	cbz	r0, 80016ca <xQueueReceiveFromISR+0x82>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8001698:	4631      	mov	r1, r6
 800169a:	4620      	mov	r0, r4
 800169c:	f7ff fd61 	bl	8001162 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
 80016a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80016a2:	3b01      	subs	r3, #1
 80016a4:	63a3      	str	r3, [r4, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
 80016a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016a8:	3301      	adds	r3, #1
 80016aa:	d10a      	bne.n	80016c2 <xQueueReceiveFromISR+0x7a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80016ac:	6923      	ldr	r3, [r4, #16]
 80016ae:	b15b      	cbz	r3, 80016c8 <xQueueReceiveFromISR+0x80>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80016b0:	f104 0010 	add.w	r0, r4, #16
 80016b4:	f7ff fbdc 	bl	8000e70 <xTaskRemoveFromEventList>
 80016b8:	b130      	cbz	r0, 80016c8 <xQueueReceiveFromISR+0x80>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80016ba:	b12f      	cbz	r7, 80016c8 <xQueueReceiveFromISR+0x80>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80016bc:	2001      	movs	r0, #1
 80016be:	6038      	str	r0, [r7, #0]
 80016c0:	e003      	b.n	80016ca <xQueueReceiveFromISR+0x82>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
 80016c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016c4:	3301      	adds	r3, #1
 80016c6:	6463      	str	r3, [r4, #68]	; 0x44
			}

			xReturn = pdPASS;
 80016c8:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80016ca:	f385 8811 	msr	BASEPRI, r5
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 80016ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080016d0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80016d0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80016d2:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <prvInsertBlockIntoFreeList+0x40>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	4282      	cmp	r2, r0
 80016d8:	d201      	bcs.n	80016de <prvInsertBlockIntoFreeList+0xe>
 80016da:	4613      	mov	r3, r2
 80016dc:	e7fa      	b.n	80016d4 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80016de:	6859      	ldr	r1, [r3, #4]
 80016e0:	185c      	adds	r4, r3, r1
 80016e2:	42a0      	cmp	r0, r4
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80016e4:	bf01      	itttt	eq
 80016e6:	6840      	ldreq	r0, [r0, #4]
 80016e8:	1809      	addeq	r1, r1, r0
 80016ea:	4618      	moveq	r0, r3
 80016ec:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80016ee:	6841      	ldr	r1, [r0, #4]
 80016f0:	1844      	adds	r4, r0, r1
 80016f2:	42a2      	cmp	r2, r4
 80016f4:	d107      	bne.n	8001706 <prvInsertBlockIntoFreeList+0x36>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80016f6:	4c07      	ldr	r4, [pc, #28]	; (8001714 <prvInsertBlockIntoFreeList+0x44>)
 80016f8:	6824      	ldr	r4, [r4, #0]
 80016fa:	42a2      	cmp	r2, r4
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80016fc:	bf1f      	itttt	ne
 80016fe:	6854      	ldrne	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001700:	6812      	ldrne	r2, [r2, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001702:	1909      	addne	r1, r1, r4
 8001704:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001706:	4298      	cmp	r0, r3
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001708:	6002      	str	r2, [r0, #0]
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800170a:	bf18      	it	ne
 800170c:	6018      	strne	r0, [r3, #0]
 800170e:	bd10      	pop	{r4, pc}
 8001710:	20000154 	.word	0x20000154
 8001714:	20000150 	.word	0x20000150

08001718 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800171c:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 800171e:	f7ff f9a5 	bl	8000a6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001722:	4940      	ldr	r1, [pc, #256]	; (8001824 <pvPortMalloc+0x10c>)
 8001724:	4d40      	ldr	r5, [pc, #256]	; (8001828 <pvPortMalloc+0x110>)
 8001726:	680b      	ldr	r3, [r1, #0]
 8001728:	bb0b      	cbnz	r3, 800176e <pvPortMalloc+0x56>
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800172a:	4a40      	ldr	r2, [pc, #256]	; (800182c <pvPortMalloc+0x114>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800172c:	0756      	lsls	r6, r2, #29
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800172e:	bf1f      	itttt	ne
 8001730:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001732:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001736:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 800173a:	1a1b      	subne	r3, r3, r0
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800173c:	bf14      	ite	ne
 800173e:	4602      	movne	r2, r0
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001740:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001744:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8001746:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001748:	f023 0307 	bic.w	r3, r3, #7

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800174c:	4e38      	ldr	r6, [pc, #224]	; (8001830 <pvPortMalloc+0x118>)
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 800174e:	600b      	str	r3, [r1, #0]
	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 8001750:	2000      	movs	r0, #0
 8001752:	6070      	str	r0, [r6, #4]

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001754:	6032      	str	r2, [r6, #0]
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
 8001756:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001758:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800175a:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800175c:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800175e:	4b35      	ldr	r3, [pc, #212]	; (8001834 <pvPortMalloc+0x11c>)
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001760:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001762:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001764:	4b34      	ldr	r3, [pc, #208]	; (8001838 <pvPortMalloc+0x120>)
 8001766:	6018      	str	r0, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001768:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800176c:	602b      	str	r3, [r5, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800176e:	682f      	ldr	r7, [r5, #0]
 8001770:	4227      	tst	r7, r4
 8001772:	d146      	bne.n	8001802 <pvPortMalloc+0xea>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001774:	2c00      	cmp	r4, #0
 8001776:	d045      	beq.n	8001804 <pvPortMalloc+0xec>
			{
				xWantedSize += xHeapStructSize;
 8001778:	f104 0308 	add.w	r3, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800177c:	0758      	lsls	r0, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800177e:	bf1c      	itt	ne
 8001780:	f023 0307 	bicne.w	r3, r3, #7
 8001784:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001786:	2b00      	cmp	r3, #0
 8001788:	d039      	beq.n	80017fe <pvPortMalloc+0xe6>
 800178a:	4a2b      	ldr	r2, [pc, #172]	; (8001838 <pvPortMalloc+0x120>)
 800178c:	6816      	ldr	r6, [r2, #0]
 800178e:	42b3      	cmp	r3, r6
 8001790:	4690      	mov	r8, r2
 8001792:	d836      	bhi.n	8001802 <pvPortMalloc+0xea>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8001794:	4a26      	ldr	r2, [pc, #152]	; (8001830 <pvPortMalloc+0x118>)
 8001796:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001798:	6868      	ldr	r0, [r5, #4]
 800179a:	4283      	cmp	r3, r0
 800179c:	d803      	bhi.n	80017a6 <pvPortMalloc+0x8e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800179e:	6809      	ldr	r1, [r1, #0]
 80017a0:	428d      	cmp	r5, r1
 80017a2:	d106      	bne.n	80017b2 <pvPortMalloc+0x9a>
 80017a4:	e02d      	b.n	8001802 <pvPortMalloc+0xea>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80017a6:	682c      	ldr	r4, [r5, #0]
 80017a8:	2c00      	cmp	r4, #0
 80017aa:	d0f8      	beq.n	800179e <pvPortMalloc+0x86>
 80017ac:	462a      	mov	r2, r5
 80017ae:	4625      	mov	r5, r4
 80017b0:	e7f2      	b.n	8001798 <pvPortMalloc+0x80>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80017b2:	6829      	ldr	r1, [r5, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80017b4:	6814      	ldr	r4, [r2, #0]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80017b6:	6011      	str	r1, [r2, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80017b8:	1ac2      	subs	r2, r0, r3
 80017ba:	2a10      	cmp	r2, #16
 80017bc:	d90f      	bls.n	80017de <pvPortMalloc+0xc6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80017be:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80017c0:	0741      	lsls	r1, r0, #29
 80017c2:	d008      	beq.n	80017d6 <pvPortMalloc+0xbe>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80017c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017c8:	f383 8811 	msr	BASEPRI, r3
 80017cc:	f3bf 8f6f 	isb	sy
 80017d0:	f3bf 8f4f 	dsb	sy
 80017d4:	e7fe      	b.n	80017d4 <pvPortMalloc+0xbc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80017d6:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80017d8:	606b      	str	r3, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80017da:	f7ff ff79 	bl	80016d0 <prvInsertBlockIntoFreeList>
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80017de:	4915      	ldr	r1, [pc, #84]	; (8001834 <pvPortMalloc+0x11c>)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80017e0:	686b      	ldr	r3, [r5, #4]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80017e2:	6808      	ldr	r0, [r1, #0]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80017e4:	1af2      	subs	r2, r6, r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80017e6:	431f      	orrs	r7, r3
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80017e8:	4282      	cmp	r2, r0
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
					pxBlock->pxNextFreeBlock = NULL;
 80017ea:	f04f 0300 	mov.w	r3, #0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80017ee:	f8c8 2000 	str.w	r2, [r8]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80017f2:	bf38      	it	cc
 80017f4:	600a      	strcc	r2, [r1, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80017f6:	3408      	adds	r4, #8
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80017f8:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80017fa:	602b      	str	r3, [r5, #0]
 80017fc:	e002      	b.n	8001804 <pvPortMalloc+0xec>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80017fe:	461c      	mov	r4, r3
 8001800:	e000      	b.n	8001804 <pvPortMalloc+0xec>
 8001802:	2400      	movs	r4, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001804:	f7ff f9d2 	bl	8000bac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001808:	0763      	lsls	r3, r4, #29
 800180a:	d008      	beq.n	800181e <pvPortMalloc+0x106>
 800180c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001810:	f383 8811 	msr	BASEPRI, r3
 8001814:	f3bf 8f6f 	isb	sy
 8001818:	f3bf 8f4f 	dsb	sy
 800181c:	e7fe      	b.n	800181c <pvPortMalloc+0x104>
	return pvReturn;
}
 800181e:	4620      	mov	r0, r4
 8001820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001824:	20000150 	.word	0x20000150
 8001828:	20003d5c 	.word	0x20003d5c
 800182c:	2000015c 	.word	0x2000015c
 8001830:	20000154 	.word	0x20000154
 8001834:	20003d60 	.word	0x20003d60
 8001838:	2000014c 	.word	0x2000014c

0800183c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800183c:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 800183e:	4604      	mov	r4, r0
 8001840:	b370      	cbz	r0, 80018a0 <vPortFree+0x64>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001842:	4a18      	ldr	r2, [pc, #96]	; (80018a4 <vPortFree+0x68>)
 8001844:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001848:	6812      	ldr	r2, [r2, #0]
 800184a:	4213      	tst	r3, r2
 800184c:	d108      	bne.n	8001860 <vPortFree+0x24>
 800184e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001852:	f383 8811 	msr	BASEPRI, r3
 8001856:	f3bf 8f6f 	isb	sy
 800185a:	f3bf 8f4f 	dsb	sy
 800185e:	e7fe      	b.n	800185e <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001860:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001864:	b141      	cbz	r1, 8001878 <vPortFree+0x3c>
 8001866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800186a:	f383 8811 	msr	BASEPRI, r3
 800186e:	f3bf 8f6f 	isb	sy
 8001872:	f3bf 8f4f 	dsb	sy
 8001876:	e7fe      	b.n	8001876 <vPortFree+0x3a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001878:	ea23 0302 	bic.w	r3, r3, r2
 800187c:	f840 3c04 	str.w	r3, [r0, #-4]

				vTaskSuspendAll();
 8001880:	f7ff f8f4 	bl	8000a6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001884:	4a08      	ldr	r2, [pc, #32]	; (80018a8 <vPortFree+0x6c>)
 8001886:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800188a:	6813      	ldr	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800188c:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001890:	440b      	add	r3, r1
 8001892:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001894:	f7ff ff1c 	bl	80016d0 <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 800189c:	f7ff b986 	b.w	8000bac <xTaskResumeAll>
 80018a0:	bd10      	pop	{r4, pc}
 80018a2:	bf00      	nop
 80018a4:	20003d5c 	.word	0x20003d5c
 80018a8:	2000014c 	.word	0x2000014c

080018ac <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <prvTaskExitError+0x2c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	3301      	adds	r3, #1
 80018b2:	d008      	beq.n	80018c6 <prvTaskExitError+0x1a>
 80018b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018b8:	f383 8811 	msr	BASEPRI, r3
 80018bc:	f3bf 8f6f 	isb	sy
 80018c0:	f3bf 8f4f 	dsb	sy
 80018c4:	e7fe      	b.n	80018c4 <prvTaskExitError+0x18>
 80018c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018ca:	f383 8811 	msr	BASEPRI, r3
 80018ce:	f3bf 8f6f 	isb	sy
 80018d2:	f3bf 8f4f 	dsb	sy
 80018d6:	e7fe      	b.n	80018d6 <prvTaskExitError+0x2a>
 80018d8:	20000000 	.word	0x20000000

080018dc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80018dc:	4806      	ldr	r0, [pc, #24]	; (80018f8 <prvPortStartFirstTask+0x1c>)
 80018de:	6800      	ldr	r0, [r0, #0]
 80018e0:	6800      	ldr	r0, [r0, #0]
 80018e2:	f380 8808 	msr	MSP, r0
 80018e6:	b662      	cpsie	i
 80018e8:	b661      	cpsie	f
 80018ea:	f3bf 8f4f 	dsb	sy
 80018ee:	f3bf 8f6f 	isb	sy
 80018f2:	df00      	svc	0
 80018f4:	bf00      	nop
 80018f6:	0000      	.short	0x0000
 80018f8:	e000ed08 	.word	0xe000ed08

080018fc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80018fc:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800190c <vPortEnableVFP+0x10>
 8001900:	6801      	ldr	r1, [r0, #0]
 8001902:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001906:	6001      	str	r1, [r0, #0]
 8001908:	4770      	bx	lr
 800190a:	0000      	.short	0x0000
 800190c:	e000ed88 	.word	0xe000ed88

08001910 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001910:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8001914:	e900 000a 	stmdb	r0, {r1, r3}
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <pxPortInitialiseStack+0x20>)
 800191a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800191e:	f06f 0302 	mvn.w	r3, #2
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001922:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8001926:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 800192a:	3844      	subs	r0, #68	; 0x44
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	080018ad 	.word	0x080018ad

08001934 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001934:	4b06      	ldr	r3, [pc, #24]	; (8001950 <pxCurrentTCBConst2>)
 8001936:	6819      	ldr	r1, [r3, #0]
 8001938:	6808      	ldr	r0, [r1, #0]
 800193a:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800193e:	f380 8809 	msr	PSP, r0
 8001942:	f3bf 8f6f 	isb	sy
 8001946:	f04f 0000 	mov.w	r0, #0
 800194a:	f380 8811 	msr	BASEPRI, r0
 800194e:	4770      	bx	lr

08001950 <pxCurrentTCBConst2>:
 8001950:	200000f0 	.word	0x200000f0

08001954 <vPortEnterCritical>:
 8001954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001958:	f383 8811 	msr	BASEPRI, r3
 800195c:	f3bf 8f6f 	isb	sy
 8001960:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001964:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <vPortEnterCritical+0x3c>)
 8001966:	6813      	ldr	r3, [r2, #0]
 8001968:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800196a:	2b01      	cmp	r3, #1
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800196c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800196e:	d10d      	bne.n	800198c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001970:	4b08      	ldr	r3, [pc, #32]	; (8001994 <vPortEnterCritical+0x40>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001978:	d008      	beq.n	800198c <vPortEnterCritical+0x38>
 800197a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800197e:	f383 8811 	msr	BASEPRI, r3
 8001982:	f3bf 8f6f 	isb	sy
 8001986:	f3bf 8f4f 	dsb	sy
 800198a:	e7fe      	b.n	800198a <vPortEnterCritical+0x36>
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	20000000 	.word	0x20000000
 8001994:	e000ed04 	.word	0xe000ed04

08001998 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8001998:	4a08      	ldr	r2, [pc, #32]	; (80019bc <vPortExitCritical+0x24>)
 800199a:	6813      	ldr	r3, [r2, #0]
 800199c:	b943      	cbnz	r3, 80019b0 <vPortExitCritical+0x18>
 800199e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019a2:	f383 8811 	msr	BASEPRI, r3
 80019a6:	f3bf 8f6f 	isb	sy
 80019aa:	f3bf 8f4f 	dsb	sy
 80019ae:	e7fe      	b.n	80019ae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80019b0:	3b01      	subs	r3, #1
 80019b2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80019b4:	b90b      	cbnz	r3, 80019ba <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80019b6:	f383 8811 	msr	BASEPRI, r3
 80019ba:	4770      	bx	lr
 80019bc:	20000000 	.word	0x20000000

080019c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80019c0:	f3ef 8009 	mrs	r0, PSP
 80019c4:	f3bf 8f6f 	isb	sy
 80019c8:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <pxCurrentTCBConst>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	f01e 0f10 	tst.w	lr, #16
 80019d0:	bf08      	it	eq
 80019d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80019d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019da:	6010      	str	r0, [r2, #0]
 80019dc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80019e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80019e4:	f380 8811 	msr	BASEPRI, r0
 80019e8:	f3bf 8f4f 	dsb	sy
 80019ec:	f3bf 8f6f 	isb	sy
 80019f0:	f7ff f9cc 	bl	8000d8c <vTaskSwitchContext>
 80019f4:	f04f 0000 	mov.w	r0, #0
 80019f8:	f380 8811 	msr	BASEPRI, r0
 80019fc:	bc08      	pop	{r3}
 80019fe:	6819      	ldr	r1, [r3, #0]
 8001a00:	6808      	ldr	r0, [r1, #0]
 8001a02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a06:	f01e 0f10 	tst.w	lr, #16
 8001a0a:	bf08      	it	eq
 8001a0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001a10:	f380 8809 	msr	PSP, r0
 8001a14:	f3bf 8f6f 	isb	sy
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop

08001a1c <pxCurrentTCBConst>:
 8001a1c:	200000f0 	.word	0x200000f0

08001a20 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001a20:	b508      	push	{r3, lr}

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001a22:	f3ef 8311 	mrs	r3, BASEPRI
 8001a26:	f04f 0250 	mov.w	r2, #80	; 0x50
 8001a2a:	f382 8811 	msr	BASEPRI, r2
 8001a2e:	f3bf 8f6f 	isb	sy
 8001a32:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001a36:	f7ff f821 	bl	8000a7c <xTaskIncrementTick>
 8001a3a:	b118      	cbz	r0, 8001a44 <xPortSysTickHandler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <xPortSysTickHandler+0x2c>)
 8001a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a42:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001a44:	2300      	movs	r3, #0
 8001a46:	f383 8811 	msr	BASEPRI, r3
 8001a4a:	bd08      	pop	{r3, pc}
 8001a4c:	e000ed04 	.word	0xe000ed04

08001a50 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <vPortSetupTimerInterrupt+0x1c>)
 8001a52:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a5c:	4a04      	ldr	r2, [pc, #16]	; (8001a70 <vPortSetupTimerInterrupt+0x20>)
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001a62:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <vPortSetupTimerInterrupt+0x24>)
 8001a64:	2207      	movs	r2, #7
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	20000004 	.word	0x20000004
 8001a70:	e000e014 	.word	0xe000e014
 8001a74:	e000e010 	.word	0xe000e010

08001a78 <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001a78:	4b31      	ldr	r3, [pc, #196]	; (8001b40 <xPortStartScheduler+0xc8>)
 8001a7a:	4a32      	ldr	r2, [pc, #200]	; (8001b44 <xPortStartScheduler+0xcc>)

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001a7c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001a7e:	6819      	ldr	r1, [r3, #0]
 8001a80:	4291      	cmp	r1, r2
 8001a82:	d108      	bne.n	8001a96 <xPortStartScheduler+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a88:	f383 8811 	msr	BASEPRI, r3
 8001a8c:	f3bf 8f6f 	isb	sy
 8001a90:	f3bf 8f4f 	dsb	sy
 8001a94:	e7fe      	b.n	8001a94 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <xPortStartScheduler+0xd0>)
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d108      	bne.n	8001ab0 <xPortStartScheduler+0x38>
 8001a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001aa2:	f383 8811 	msr	BASEPRI, r3
 8001aa6:	f3bf 8f6f 	isb	sy
 8001aaa:	f3bf 8f4f 	dsb	sy
 8001aae:	e7fe      	b.n	8001aae <xPortStartScheduler+0x36>
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001ab0:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <xPortStartScheduler+0xd4>)
 8001ab2:	781a      	ldrb	r2, [r3, #0]
 8001ab4:	b2d2      	uxtb	r2, r2
 8001ab6:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001ab8:	22ff      	movs	r2, #255	; 0xff
 8001aba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001abc:	781b      	ldrb	r3, [r3, #0]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001abe:	4a24      	ldr	r2, [pc, #144]	; (8001b50 <xPortStartScheduler+0xd8>)
		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001ac6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001aca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001ace:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001ad0:	4b20      	ldr	r3, [pc, #128]	; (8001b54 <xPortStartScheduler+0xdc>)
 8001ad2:	2207      	movs	r2, #7
 8001ad4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001adc:	0600      	lsls	r0, r0, #24
 8001ade:	f102 34ff 	add.w	r4, r2, #4294967295
 8001ae2:	d508      	bpl.n	8001af6 <xPortStartScheduler+0x7e>
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001ae4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001ae8:	0052      	lsls	r2, r2, #1
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	f88d 2003 	strb.w	r2, [sp, #3]
 8001af0:	2101      	movs	r1, #1
 8001af2:	4622      	mov	r2, r4
 8001af4:	e7f0      	b.n	8001ad8 <xPortStartScheduler+0x60>
 8001af6:	b101      	cbz	r1, 8001afa <xPortStartScheduler+0x82>
 8001af8:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	0212      	lsls	r2, r2, #8
 8001afe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001b02:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001b04:	9b01      	ldr	r3, [sp, #4]
 8001b06:	4a11      	ldr	r2, [pc, #68]	; (8001b4c <xPortStartScheduler+0xd4>)
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <xPortStartScheduler+0xe0>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001b14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001b1c:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001b1e:	f7ff ff97 	bl	8001a50 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001b22:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <xPortStartScheduler+0xe4>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8001b28:	f7ff fee8 	bl	80018fc <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001b2c:	4a0c      	ldr	r2, [pc, #48]	; (8001b60 <xPortStartScheduler+0xe8>)
 8001b2e:	6813      	ldr	r3, [r2, #0]
 8001b30:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001b34:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001b36:	f7ff fed1 	bl	80018dc <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8001b3a:	f7ff feb7 	bl	80018ac <prvTaskExitError>
 8001b3e:	bf00      	nop
 8001b40:	e000ed00 	.word	0xe000ed00
 8001b44:	410fc271 	.word	0x410fc271
 8001b48:	410fc270 	.word	0x410fc270
 8001b4c:	e000e400 	.word	0xe000e400
 8001b50:	20003d64 	.word	0x20003d64
 8001b54:	20003d68 	.word	0x20003d68
 8001b58:	e000ed20 	.word	0xe000ed20
 8001b5c:	20000000 	.word	0x20000000
 8001b60:	e000ef34 	.word	0xe000ef34

08001b64 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8001b64:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001b68:	2b0f      	cmp	r3, #15
 8001b6a:	d90e      	bls.n	8001b8a <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001b6c:	4a10      	ldr	r2, [pc, #64]	; (8001bb0 <vPortValidateInterruptPriority+0x4c>)
 8001b6e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001b70:	4a10      	ldr	r2, [pc, #64]	; (8001bb4 <vPortValidateInterruptPriority+0x50>)
 8001b72:	7812      	ldrb	r2, [r2, #0]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d908      	bls.n	8001b8a <vPortValidateInterruptPriority+0x26>
 8001b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b7c:	f383 8811 	msr	BASEPRI, r3
 8001b80:	f3bf 8f6f 	isb	sy
 8001b84:	f3bf 8f4f 	dsb	sy
 8001b88:	e7fe      	b.n	8001b88 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <vPortValidateInterruptPriority+0x54>)
 8001b8c:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <vPortValidateInterruptPriority+0x58>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6812      	ldr	r2, [r2, #0]
 8001b92:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d908      	bls.n	8001bac <vPortValidateInterruptPriority+0x48>
 8001b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b9e:	f383 8811 	msr	BASEPRI, r3
 8001ba2:	f3bf 8f6f 	isb	sy
 8001ba6:	f3bf 8f4f 	dsb	sy
 8001baa:	e7fe      	b.n	8001baa <vPortValidateInterruptPriority+0x46>
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	e000e3f0 	.word	0xe000e3f0
 8001bb4:	20003d64 	.word	0x20003d64
 8001bb8:	e000ed0c 	.word	0xe000ed0c
 8001bbc:	20003d68 	.word	0x20003d68

08001bc0 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bc0:	f100 0308 	add.w	r3, r0, #8
 8001bc4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001bc6:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bca:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bcc:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001bce:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001bd0:	6082      	str	r2, [r0, #8]
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001bd2:	6003      	str	r3, [r0, #0]
 8001bd4:	4770      	bx	lr

08001bd6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	6103      	str	r3, [r0, #16]
 8001bda:	4770      	bx	lr

08001bdc <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001bdc:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001bde:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001be0:	689a      	ldr	r2, [r3, #8]
 8001be2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001be8:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001bea:	6803      	ldr	r3, [r0, #0]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001bec:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001bee:	3301      	adds	r3, #1
 8001bf0:	6003      	str	r3, [r0, #0]
 8001bf2:	4770      	bx	lr

08001bf4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001bf4:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001bf6:	1c53      	adds	r3, r2, #1
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001bf8:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001bfa:	d101      	bne.n	8001c00 <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001bfc:	6903      	ldr	r3, [r0, #16]
 8001bfe:	e007      	b.n	8001c10 <vListInsert+0x1c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c00:	f100 0308 	add.w	r3, r0, #8
 8001c04:	685c      	ldr	r4, [r3, #4]
 8001c06:	6825      	ldr	r5, [r4, #0]
 8001c08:	42aa      	cmp	r2, r5
 8001c0a:	d301      	bcc.n	8001c10 <vListInsert+0x1c>
 8001c0c:	4623      	mov	r3, r4
 8001c0e:	e7f9      	b.n	8001c04 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001c14:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001c16:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001c18:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001c1a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001c1c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001c1e:	3301      	adds	r3, #1
 8001c20:	6003      	str	r3, [r0, #0]
 8001c22:	bd30      	pop	{r4, r5, pc}

08001c24 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001c24:	6841      	ldr	r1, [r0, #4]
 8001c26:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001c28:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001c2a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001c2c:	6882      	ldr	r2, [r0, #8]
 8001c2e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001c30:	6859      	ldr	r1, [r3, #4]
 8001c32:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c34:	bf08      	it	eq
 8001c36:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001c38:	2200      	movs	r2, #0
 8001c3a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001c3c:	6818      	ldr	r0, [r3, #0]
 8001c3e:	3801      	subs	r0, #1
 8001c40:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8001c42:	4770      	bx	lr

08001c44 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001c44:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001c46:	f7fe fed9 	bl	80009fc <vTaskStartScheduler>
  
  return osOK;
}
 8001c4a:	2000      	movs	r0, #0
 8001c4c:	bd08      	pop	{r3, pc}

08001c4e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001c4e:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c50:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 8001c54:	8a02      	ldrh	r2, [r0, #16]
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001c56:	460b      	mov	r3, r1
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c58:	e890 0042 	ldmia.w	r0, {r1, r6}
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001c5c:	b086      	sub	sp, #24
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 8001c5e:	2c84      	cmp	r4, #132	; 0x84
 8001c60:	f04f 0500 	mov.w	r5, #0
    fpriority += (priority - osPriorityIdle);
 8001c64:	bf14      	ite	ne
 8001c66:	3403      	addne	r4, #3
extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001c68:	462c      	moveq	r4, r5
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001c6a:	a805      	add	r0, sp, #20
 8001c6c:	9001      	str	r0, [sp, #4]
 8001c6e:	9503      	str	r5, [sp, #12]
 8001c70:	9502      	str	r5, [sp, #8]
 8001c72:	9400      	str	r4, [sp, #0]
 8001c74:	4630      	mov	r0, r6
 8001c76:	f7fe fe3e 	bl	80008f6 <xTaskGenericCreate>
 8001c7a:	2801      	cmp	r0, #1
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
  }
  
  return handle;
 8001c7c:	bf0c      	ite	eq
 8001c7e:	9805      	ldreq	r0, [sp, #20]
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
 8001c80:	2000      	movne	r0, #0
  }
  
  return handle;
}
 8001c82:	b006      	add	sp, #24
 8001c84:	bd70      	pop	{r4, r5, r6, pc}

08001c86 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8001c86:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 8001c88:	f7fe fe54 	bl	8000934 <vTaskDelete>
  return osOK;
#else
  return osErrorOS;
#endif
}
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	bd08      	pop	{r3, pc}

08001c90 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001c90:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001c92:	2800      	cmp	r0, #0
 8001c94:	bf08      	it	eq
 8001c96:	2001      	moveq	r0, #1
 8001c98:	f7fe fffe 	bl	8000c98 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	bd08      	pop	{r3, pc}

08001ca0 <osSemaphoreCreate>:
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 8001ca0:	2901      	cmp	r1, #1
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{
 8001ca2:	b510      	push	{r4, lr}
 8001ca4:	4608      	mov	r0, r1
  (void) semaphore_def;
  osSemaphoreId sema;
  
  if (count == 1) {
 8001ca6:	d10b      	bne.n	8001cc0 <osSemaphoreCreate+0x20>
    vSemaphoreCreateBinary(sema);
 8001ca8:	2203      	movs	r2, #3
 8001caa:	2100      	movs	r1, #0
 8001cac:	f7ff fae2 	bl	8001274 <xQueueGenericCreate>
 8001cb0:	4604      	mov	r4, r0
 8001cb2:	b138      	cbz	r0, 8001cc4 <osSemaphoreCreate+0x24>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4619      	mov	r1, r3
 8001cba:	f7ff fb0d 	bl	80012d8 <xQueueGenericSend>
 8001cbe:	e001      	b.n	8001cc4 <osSemaphoreCreate+0x24>
  }

#if (configUSE_COUNTING_SEMAPHORES == 1 )	
  return xSemaphoreCreateCounting(count, 0);
#else
  return NULL;
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	bd10      	pop	{r4, pc}
 8001cc4:	4620      	mov	r0, r4
#endif
}
 8001cc6:	bd10      	pop	{r4, pc}

08001cc8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8001cc8:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001cca:	2400      	movs	r4, #0
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8001ccc:	460a      	mov	r2, r1
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001cce:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8001cd0:	b1e8      	cbz	r0, 8001d0e <osSemaphoreWait+0x46>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001cd2:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8001cd6:	b19b      	cbz	r3, 8001d00 <osSemaphoreWait+0x38>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001cd8:	aa01      	add	r2, sp, #4
 8001cda:	4621      	mov	r1, r4
 8001cdc:	f7ff fcb4 	bl	8001648 <xQueueReceiveFromISR>
 8001ce0:	2801      	cmp	r0, #1
 8001ce2:	d001      	beq.n	8001ce8 <osSemaphoreWait+0x20>
      return osErrorOS;
 8001ce4:	20ff      	movs	r0, #255	; 0xff
 8001ce6:	e013      	b.n	8001d10 <osSemaphoreWait+0x48>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8001ce8:	9b01      	ldr	r3, [sp, #4]
 8001cea:	b173      	cbz	r3, 8001d0a <osSemaphoreWait+0x42>
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <osSemaphoreWait+0x4c>)
 8001cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	f3bf 8f4f 	dsb	sy
 8001cf8:	f3bf 8f6f 	isb	sy
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	e007      	b.n	8001d10 <osSemaphoreWait+0x48>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8001d00:	4619      	mov	r1, r3
 8001d02:	f7ff fbeb 	bl	80014dc <xQueueGenericReceive>
 8001d06:	2801      	cmp	r0, #1
 8001d08:	d1ec      	bne.n	8001ce4 <osSemaphoreWait+0x1c>
    return osErrorOS;
  }
  
  return osOK;
 8001d0a:	2000      	movs	r0, #0
 8001d0c:	e000      	b.n	8001d10 <osSemaphoreWait+0x48>
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
  
  
  if (semaphore_id == NULL) {
    return osErrorParameter;
 8001d0e:	2080      	movs	r0, #128	; 0x80
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8001d10:	b002      	add	sp, #8
 8001d12:	bd10      	pop	{r4, pc}
 8001d14:	e000ed04 	.word	0xe000ed04

08001d18 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8001d18:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8001d1a:	2400      	movs	r4, #0
 8001d1c:	9401      	str	r4, [sp, #4]
 8001d1e:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 8001d22:	b18b      	cbz	r3, 8001d48 <osSemaphoreRelease+0x30>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001d24:	a901      	add	r1, sp, #4
 8001d26:	f7ff fb89 	bl	800143c <xQueueGiveFromISR>
 8001d2a:	2801      	cmp	r0, #1
 8001d2c:	d112      	bne.n	8001d54 <osSemaphoreRelease+0x3c>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001d2e:	9b01      	ldr	r3, [sp, #4]
 8001d30:	b90b      	cbnz	r3, 8001d36 <osSemaphoreRelease+0x1e>
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
  osStatus result = osOK;
 8001d32:	2000      	movs	r0, #0
 8001d34:	e00f      	b.n	8001d56 <osSemaphoreRelease+0x3e>
  
  if (inHandlerMode()) {
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <osSemaphoreRelease+0x44>)
 8001d38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	f3bf 8f4f 	dsb	sy
 8001d42:	f3bf 8f6f 	isb	sy
 8001d46:	e7f4      	b.n	8001d32 <osSemaphoreRelease+0x1a>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f7ff fac4 	bl	80012d8 <xQueueGenericSend>
 8001d50:	2801      	cmp	r0, #1
 8001d52:	d0ee      	beq.n	8001d32 <osSemaphoreRelease+0x1a>
      result = osErrorOS;
 8001d54:	20ff      	movs	r0, #255	; 0xff
    }
  }
  
  return result;
}
 8001d56:	b002      	add	sp, #8
 8001d58:	bd10      	pop	{r4, pc}
 8001d5a:	bf00      	nop
 8001d5c:	e000ed04 	.word	0xe000ed04

08001d60 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8001d60:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001d62:	f7ff f917 	bl	8000f94 <xTaskGetSchedulerState>
 8001d66:	2801      	cmp	r0, #1
 8001d68:	d003      	beq.n	8001d72 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001d6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8001d6e:	f7ff be57 	b.w	8001a20 <xPortSysTickHandler>
 8001d72:	bd08      	pop	{r3, pc}

08001d74 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d74:	6803      	ldr	r3, [r0, #0]
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001d7c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d7e:	695a      	ldr	r2, [r3, #20]
 8001d80:	f022 0201 	bic.w	r2, r2, #1
 8001d84:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d86:	2320      	movs	r3, #32
 8001d88:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001d8c:	4770      	bx	lr
	...

08001d90 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001d94:	6807      	ldr	r7, [r0, #0]
 8001d96:	693b      	ldr	r3, [r7, #16]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d98:	4604      	mov	r4, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001d9a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001d9e:	68c3      	ldr	r3, [r0, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001da0:	68a1      	ldr	r1, [r4, #8]
 8001da2:	69c0      	ldr	r0, [r0, #28]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001da4:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001da6:	6922      	ldr	r2, [r4, #16]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001da8:	613b      	str	r3, [r7, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8001daa:	68fb      	ldr	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001dac:	4311      	orrs	r1, r2
 8001dae:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001db0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001db4:	430a      	orrs	r2, r1
 8001db6:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001db8:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001dbc:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001dbe:	60fb      	str	r3, [r7, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001dc0:	697b      	ldr	r3, [r7, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001dc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001dc6:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dc8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001dcc:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	4b7c      	ldr	r3, [pc, #496]	; (8001fc4 <UART_SetConfig+0x234>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dd4:	d17c      	bne.n	8001ed0 <UART_SetConfig+0x140>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001dd6:	429f      	cmp	r7, r3
 8001dd8:	d003      	beq.n	8001de2 <UART_SetConfig+0x52>
 8001dda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001dde:	429f      	cmp	r7, r3
 8001de0:	d131      	bne.n	8001e46 <UART_SetConfig+0xb6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001de2:	f000 fdf9 	bl	80029d8 <HAL_RCC_GetPCLK2Freq>
 8001de6:	6863      	ldr	r3, [r4, #4]
 8001de8:	2519      	movs	r5, #25
 8001dea:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001dee:	4368      	muls	r0, r5
 8001df0:	fbb0 f8f8 	udiv	r8, r0, r8
 8001df4:	f000 fdf0 	bl	80029d8 <HAL_RCC_GetPCLK2Freq>
 8001df8:	6866      	ldr	r6, [r4, #4]
 8001dfa:	4368      	muls	r0, r5
 8001dfc:	0076      	lsls	r6, r6, #1
 8001dfe:	fbb0 f6f6 	udiv	r6, r0, r6
 8001e02:	f000 fde9 	bl	80029d8 <HAL_RCC_GetPCLK2Freq>
 8001e06:	6863      	ldr	r3, [r4, #4]
 8001e08:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	4368      	muls	r0, r5
 8001e10:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e14:	fbb0 f0f9 	udiv	r0, r0, r9
 8001e18:	fb09 6610 	mls	r6, r9, r0, r6
 8001e1c:	f000 fddc 	bl	80029d8 <HAL_RCC_GetPCLK2Freq>
 8001e20:	fbb8 f8f9 	udiv	r8, r8, r9
 8001e24:	6861      	ldr	r1, [r4, #4]
 8001e26:	00f6      	lsls	r6, r6, #3
 8001e28:	3632      	adds	r6, #50	; 0x32
 8001e2a:	fbb6 f6f9 	udiv	r6, r6, r9
 8001e2e:	0076      	lsls	r6, r6, #1
 8001e30:	4368      	muls	r0, r5
 8001e32:	0049      	lsls	r1, r1, #1
 8001e34:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001e38:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8001e3c:	fbb0 faf1 	udiv	sl, r0, r1
 8001e40:	f000 fdca 	bl	80029d8 <HAL_RCC_GetPCLK2Freq>
 8001e44:	e030      	b.n	8001ea8 <UART_SetConfig+0x118>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001e46:	f000 fdaf 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8001e4a:	6863      	ldr	r3, [r4, #4]
 8001e4c:	2519      	movs	r5, #25
 8001e4e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001e52:	4368      	muls	r0, r5
 8001e54:	fbb0 f8f8 	udiv	r8, r0, r8
 8001e58:	f000 fda6 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8001e5c:	6866      	ldr	r6, [r4, #4]
 8001e5e:	4368      	muls	r0, r5
 8001e60:	0076      	lsls	r6, r6, #1
 8001e62:	fbb0 f6f6 	udiv	r6, r0, r6
 8001e66:	f000 fd9f 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8001e6a:	6863      	ldr	r3, [r4, #4]
 8001e6c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4368      	muls	r0, r5
 8001e74:	fbb0 f0f3 	udiv	r0, r0, r3
 8001e78:	fbb0 f0f9 	udiv	r0, r0, r9
 8001e7c:	fb09 6610 	mls	r6, r9, r0, r6
 8001e80:	f000 fd92 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8001e84:	fbb8 f8f9 	udiv	r8, r8, r9
 8001e88:	00f6      	lsls	r6, r6, #3
 8001e8a:	6861      	ldr	r1, [r4, #4]
 8001e8c:	3632      	adds	r6, #50	; 0x32
 8001e8e:	fbb6 f6f9 	udiv	r6, r6, r9
 8001e92:	0076      	lsls	r6, r6, #1
 8001e94:	4368      	muls	r0, r5
 8001e96:	0049      	lsls	r1, r1, #1
 8001e98:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001e9c:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8001ea0:	fbb0 faf1 	udiv	sl, r0, r1
 8001ea4:	f000 fd80 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8001ea8:	4345      	muls	r5, r0
 8001eaa:	6860      	ldr	r0, [r4, #4]
 8001eac:	0040      	lsls	r0, r0, #1
 8001eae:	fbb5 f0f0 	udiv	r0, r5, r0
 8001eb2:	fbb0 f0f9 	udiv	r0, r0, r9
 8001eb6:	fb09 a210 	mls	r2, r9, r0, sl
 8001eba:	00d2      	lsls	r2, r2, #3
 8001ebc:	3232      	adds	r2, #50	; 0x32
 8001ebe:	fbb2 f3f9 	udiv	r3, r2, r9
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	4443      	add	r3, r8
 8001ec8:	441e      	add	r6, r3
 8001eca:	60be      	str	r6, [r7, #8]
 8001ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ed0:	429f      	cmp	r7, r3
 8001ed2:	d002      	beq.n	8001eda <UART_SetConfig+0x14a>
 8001ed4:	4b3c      	ldr	r3, [pc, #240]	; (8001fc8 <UART_SetConfig+0x238>)
 8001ed6:	429f      	cmp	r7, r3
 8001ed8:	d130      	bne.n	8001f3c <UART_SetConfig+0x1ac>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001eda:	f000 fd7d 	bl	80029d8 <HAL_RCC_GetPCLK2Freq>
 8001ede:	6863      	ldr	r3, [r4, #4]
 8001ee0:	2519      	movs	r5, #25
 8001ee2:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8001ee6:	4368      	muls	r0, r5
 8001ee8:	fbb0 f8f8 	udiv	r8, r0, r8
 8001eec:	f000 fd74 	bl	80029d8 <HAL_RCC_GetPCLK2Freq>
 8001ef0:	6866      	ldr	r6, [r4, #4]
 8001ef2:	4368      	muls	r0, r5
 8001ef4:	00b6      	lsls	r6, r6, #2
 8001ef6:	fbb0 f6f6 	udiv	r6, r0, r6
 8001efa:	f000 fd6d 	bl	80029d8 <HAL_RCC_GetPCLK2Freq>
 8001efe:	6863      	ldr	r3, [r4, #4]
 8001f00:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	4368      	muls	r0, r5
 8001f08:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f0c:	fbb0 f0f9 	udiv	r0, r0, r9
 8001f10:	fb09 6610 	mls	r6, r9, r0, r6
 8001f14:	f000 fd60 	bl	80029d8 <HAL_RCC_GetPCLK2Freq>
 8001f18:	fbb8 f8f9 	udiv	r8, r8, r9
 8001f1c:	6861      	ldr	r1, [r4, #4]
 8001f1e:	0136      	lsls	r6, r6, #4
 8001f20:	4368      	muls	r0, r5
 8001f22:	0089      	lsls	r1, r1, #2
 8001f24:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001f28:	3632      	adds	r6, #50	; 0x32
 8001f2a:	fbb0 faf1 	udiv	sl, r0, r1
 8001f2e:	fbb6 f6f9 	udiv	r6, r6, r9
 8001f32:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8001f36:	f000 fd4f 	bl	80029d8 <HAL_RCC_GetPCLK2Freq>
 8001f3a:	e02f      	b.n	8001f9c <UART_SetConfig+0x20c>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001f3c:	f000 fd34 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8001f40:	6863      	ldr	r3, [r4, #4]
 8001f42:	2519      	movs	r5, #25
 8001f44:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8001f48:	4368      	muls	r0, r5
 8001f4a:	fbb0 f8f8 	udiv	r8, r0, r8
 8001f4e:	f000 fd2b 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8001f52:	6866      	ldr	r6, [r4, #4]
 8001f54:	4368      	muls	r0, r5
 8001f56:	00b6      	lsls	r6, r6, #2
 8001f58:	fbb0 f6f6 	udiv	r6, r0, r6
 8001f5c:	f000 fd24 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8001f60:	6863      	ldr	r3, [r4, #4]
 8001f62:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	4368      	muls	r0, r5
 8001f6a:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f6e:	fbb0 f0f9 	udiv	r0, r0, r9
 8001f72:	fb09 6610 	mls	r6, r9, r0, r6
 8001f76:	f000 fd17 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8001f7a:	fbb8 f8f9 	udiv	r8, r8, r9
 8001f7e:	6861      	ldr	r1, [r4, #4]
 8001f80:	0136      	lsls	r6, r6, #4
 8001f82:	3632      	adds	r6, #50	; 0x32
 8001f84:	4368      	muls	r0, r5
 8001f86:	fbb6 f6f9 	udiv	r6, r6, r9
 8001f8a:	0089      	lsls	r1, r1, #2
 8001f8c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001f90:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8001f94:	fbb0 faf1 	udiv	sl, r0, r1
 8001f98:	f000 fd06 	bl	80029a8 <HAL_RCC_GetPCLK1Freq>
 8001f9c:	4345      	muls	r5, r0
 8001f9e:	6860      	ldr	r0, [r4, #4]
 8001fa0:	0080      	lsls	r0, r0, #2
 8001fa2:	fbb5 f0f0 	udiv	r0, r5, r0
 8001fa6:	fbb0 f0f9 	udiv	r0, r0, r9
 8001faa:	fb09 a210 	mls	r2, r9, r0, sl
 8001fae:	0112      	lsls	r2, r2, #4
 8001fb0:	3232      	adds	r2, #50	; 0x32
 8001fb2:	fbb2 f3f9 	udiv	r3, r2, r9
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	4433      	add	r3, r6
 8001fbc:	4443      	add	r3, r8
 8001fbe:	60bb      	str	r3, [r7, #8]
 8001fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fc4:	40011000 	.word	0x40011000
 8001fc8:	40011400 	.word	0x40011400

08001fcc <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fcc:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001fce:	4604      	mov	r4, r0
 8001fd0:	b340      	cbz	r0, 8002024 <HAL_UART_Init+0x58>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001fd2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001fd6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001fda:	b91b      	cbnz	r3, 8001fe4 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fdc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001fe0:	f7fe f99c 	bl	800031c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fe4:	6822      	ldr	r2, [r4, #0]
    huart->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fe6:	2324      	movs	r3, #36	; 0x24
 8001fe8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fec:	68d3      	ldr	r3, [r2, #12]
 8001fee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ff2:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	f7ff fecb 	bl	8001d90 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ffa:	6823      	ldr	r3, [r4, #0]
 8001ffc:	691a      	ldr	r2, [r3, #16]
 8001ffe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002002:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002004:	695a      	ldr	r2, [r3, #20]
 8002006:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800200a:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002012:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002014:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8002016:	2320      	movs	r3, #32
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002018:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800201a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800201e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 8002022:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8002024:	2001      	movs	r0, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 8002026:	bd10      	pop	{r4, pc}

08002028 <HAL_UART_TxCpltCallback>:
 8002028:	4770      	bx	lr

0800202a <HAL_UART_RxCpltCallback>:
 800202a:	4770      	bx	lr

0800202c <UART_Receive_IT>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 800202c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002030:	2b22      	cmp	r3, #34	; 0x22
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002032:	b510      	push	{r4, lr}
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8002034:	d132      	bne.n	800209c <UART_Receive_IT+0x70>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002036:	6883      	ldr	r3, [r0, #8]
 8002038:	6901      	ldr	r1, [r0, #16]
 800203a:	6802      	ldr	r2, [r0, #0]
 800203c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002040:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002042:	d10b      	bne.n	800205c <UART_Receive_IT+0x30>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 8002044:	6852      	ldr	r2, [r2, #4]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002046:	b921      	cbnz	r1, 8002052 <UART_Receive_IT+0x26>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 8002048:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800204c:	f823 2b02 	strh.w	r2, [r3], #2
 8002050:	e002      	b.n	8002058 <UART_Receive_IT+0x2c>
        huart->pRxBuffPtr += 2U;
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FFU);
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 8002058:	6283      	str	r3, [r0, #40]	; 0x28
 800205a:	e00a      	b.n	8002072 <UART_Receive_IT+0x46>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 800205c:	b919      	cbnz	r1, 8002066 <UART_Receive_IT+0x3a>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FFU);
 800205e:	1c59      	adds	r1, r3, #1
 8002060:	6281      	str	r1, [r0, #40]	; 0x28
 8002062:	6852      	ldr	r2, [r2, #4]
 8002064:	e004      	b.n	8002070 <UART_Receive_IT+0x44>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007FU);
 8002066:	6852      	ldr	r2, [r2, #4]
 8002068:	1c59      	adds	r1, r3, #1
 800206a:	6281      	str	r1, [r0, #40]	; 0x28
 800206c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002070:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 8002072:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8002074:	3c01      	subs	r4, #1
 8002076:	b2a4      	uxth	r4, r4
 8002078:	85c4      	strh	r4, [r0, #46]	; 0x2e
 800207a:	b98c      	cbnz	r4, 80020a0 <UART_Receive_IT+0x74>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800207c:	6803      	ldr	r3, [r0, #0]
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002084:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002086:	695a      	ldr	r2, [r3, #20]
 8002088:	f022 0201 	bic.w	r2, r2, #1
 800208c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800208e:	2320      	movs	r3, #32
 8002090:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 8002094:	f7ff ffc9 	bl	800202a <HAL_UART_RxCpltCallback>
 8002098:	4620      	mov	r0, r4
 800209a:	bd10      	pop	{r4, pc}
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800209c:	2002      	movs	r0, #2
 800209e:	bd10      	pop	{r4, pc}
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007FU);
      }
    }

    if(--huart->RxXferCount == 0U)
 80020a0:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80020a2:	bd10      	pop	{r4, pc}

080020a4 <HAL_UART_ErrorCallback>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80020a4:	4770      	bx	lr
	...

080020a8 <HAL_UART_IRQHandler>:
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80020a8:	6803      	ldr	r3, [r0, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80020ac:	68d9      	ldr	r1, [r3, #12]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80020ae:	b570      	push	{r4, r5, r6, lr}
   uint32_t errorflags = 0x00U;
   uint32_t dmarequest = 0x00U;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
  if(errorflags == RESET)
 80020b0:	0716      	lsls	r6, r2, #28
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80020b2:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80020b4:	695d      	ldr	r5, [r3, #20]
   uint32_t errorflags = 0x00U;
   uint32_t dmarequest = 0x00U;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
  if(errorflags == RESET)
 80020b6:	d107      	bne.n	80020c8 <HAL_UART_IRQHandler+0x20>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020b8:	0696      	lsls	r6, r2, #26
 80020ba:	d55c      	bpl.n	8002176 <HAL_UART_IRQHandler+0xce>
 80020bc:	068d      	lsls	r5, r1, #26
 80020be:	d55a      	bpl.n	8002176 <HAL_UART_IRQHandler+0xce>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
  {
    UART_EndTransmit_IT(huart);
    return;
  }
}
 80020c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if(errorflags == RESET)
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
    {
      UART_Receive_IT(huart);
 80020c4:	f7ff bfb2 	b.w	800202c <UART_Receive_IT>
      return;
    }
  }  

  /* If some errors occur */
  if((errorflags != RESET) && ((cr3its & (USART_CR3_EIE | USART_CR1_PEIE)) != RESET))
 80020c8:	f240 1001 	movw	r0, #257	; 0x101
 80020cc:	4028      	ands	r0, r5
 80020ce:	2800      	cmp	r0, #0
 80020d0:	d051      	beq.n	8002176 <HAL_UART_IRQHandler+0xce>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80020d2:	07d3      	lsls	r3, r2, #31
 80020d4:	d505      	bpl.n	80020e2 <HAL_UART_IRQHandler+0x3a>
 80020d6:	05ce      	lsls	r6, r1, #23
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80020d8:	bf42      	ittt	mi
 80020da:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80020dc:	f043 0301 	orrmi.w	r3, r3, #1
 80020e0:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020e2:	0750      	lsls	r0, r2, #29
 80020e4:	d505      	bpl.n	80020f2 <HAL_UART_IRQHandler+0x4a>
 80020e6:	07eb      	lsls	r3, r5, #31
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80020e8:	bf42      	ittt	mi
 80020ea:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80020ec:	f043 0302 	orrmi.w	r3, r3, #2
 80020f0:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80020f2:	0796      	lsls	r6, r2, #30
 80020f4:	d505      	bpl.n	8002102 <HAL_UART_IRQHandler+0x5a>
 80020f6:	07e8      	lsls	r0, r5, #31
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020f8:	bf42      	ittt	mi
 80020fa:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80020fc:	f043 0304 	orrmi.w	r3, r3, #4
 8002100:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002102:	0713      	lsls	r3, r2, #28
 8002104:	d505      	bpl.n	8002112 <HAL_UART_IRQHandler+0x6a>
 8002106:	07ee      	lsls	r6, r5, #31
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002108:	bf42      	ittt	mi
 800210a:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 800210c:	f043 0308 	orrmi.w	r3, r3, #8
 8002110:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002112:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002114:	2b00      	cmp	r3, #0
 8002116:	d066      	beq.n	80021e6 <HAL_UART_IRQHandler+0x13e>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002118:	0695      	lsls	r5, r2, #26
 800211a:	d504      	bpl.n	8002126 <HAL_UART_IRQHandler+0x7e>
 800211c:	0688      	lsls	r0, r1, #26
 800211e:	d502      	bpl.n	8002126 <HAL_UART_IRQHandler+0x7e>
      {
        UART_Receive_IT(huart);
 8002120:	4620      	mov	r0, r4
 8002122:	f7ff ff83 	bl	800202c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002126:	6823      	ldr	r3, [r4, #0]
 8002128:	695b      	ldr	r3, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800212a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800212c:	0711      	lsls	r1, r2, #28
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800212e:	4620      	mov	r0, r4
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002130:	d402      	bmi.n	8002138 <HAL_UART_IRQHandler+0x90>
 8002132:	f013 0540 	ands.w	r5, r3, #64	; 0x40
 8002136:	d01a      	beq.n	800216e <HAL_UART_IRQHandler+0xc6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002138:	f7ff fe1c 	bl	8001d74 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800213c:	6823      	ldr	r3, [r4, #0]
 800213e:	695a      	ldr	r2, [r3, #20]
 8002140:	0652      	lsls	r2, r2, #25
 8002142:	d510      	bpl.n	8002166 <HAL_UART_IRQHandler+0xbe>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002144:	695a      	ldr	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8002146:	6b60      	ldr	r0, [r4, #52]	; 0x34
        UART_EndRxTransfer(huart);
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800214c:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800214e:	b150      	cbz	r0, 8002166 <HAL_UART_IRQHandler+0xbe>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002150:	4b25      	ldr	r3, [pc, #148]	; (80021e8 <HAL_UART_IRQHandler+0x140>)
 8002152:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002154:	f000 fdf8 	bl	8002d48 <HAL_DMA_Abort_IT>
 8002158:	2800      	cmp	r0, #0
 800215a:	d044      	beq.n	80021e6 <HAL_UART_IRQHandler+0x13e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800215c:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
  {
    UART_EndTransmit_IT(huart);
    return;
  }
}
 800215e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002162:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002164:	4718      	bx	r3
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 8002166:	4620      	mov	r0, r4
 8002168:	f7ff ff9c 	bl	80020a4 <HAL_UART_ErrorCallback>
 800216c:	bd70      	pop	{r4, r5, r6, pc}
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 800216e:	f7ff ff99 	bl	80020a4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002172:	63e5      	str	r5, [r4, #60]	; 0x3c
 8002174:	bd70      	pop	{r4, r5, r6, pc}
    }
    return;
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002176:	0616      	lsls	r6, r2, #24
 8002178:	d527      	bpl.n	80021ca <HAL_UART_IRQHandler+0x122>
 800217a:	060d      	lsls	r5, r1, #24
 800217c:	d525      	bpl.n	80021ca <HAL_UART_IRQHandler+0x122>
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 800217e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002182:	2a21      	cmp	r2, #33	; 0x21
 8002184:	d12f      	bne.n	80021e6 <HAL_UART_IRQHandler+0x13e>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002186:	68a2      	ldr	r2, [r4, #8]
 8002188:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800218c:	6a22      	ldr	r2, [r4, #32]
 800218e:	d10a      	bne.n	80021a6 <HAL_UART_IRQHandler+0xfe>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FFU);
 8002190:	8811      	ldrh	r1, [r2, #0]
 8002192:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002196:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 8002198:	6921      	ldr	r1, [r4, #16]
 800219a:	b909      	cbnz	r1, 80021a0 <HAL_UART_IRQHandler+0xf8>
      {
        huart->pTxBuffPtr += 2U;
 800219c:	3202      	adds	r2, #2
 800219e:	e000      	b.n	80021a2 <HAL_UART_IRQHandler+0xfa>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80021a0:	3201      	adds	r2, #1
 80021a2:	6222      	str	r2, [r4, #32]
 80021a4:	e003      	b.n	80021ae <HAL_UART_IRQHandler+0x106>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FFU);
 80021a6:	1c51      	adds	r1, r2, #1
 80021a8:	6221      	str	r1, [r4, #32]
 80021aa:	7812      	ldrb	r2, [r2, #0]
 80021ac:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 80021ae:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80021b0:	3a01      	subs	r2, #1
 80021b2:	b292      	uxth	r2, r2
 80021b4:	84e2      	strh	r2, [r4, #38]	; 0x26
 80021b6:	b9b2      	cbnz	r2, 80021e6 <HAL_UART_IRQHandler+0x13e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021be:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021c6:	60da      	str	r2, [r3, #12]
 80021c8:	bd70      	pop	{r4, r5, r6, pc}
    UART_Transmit_IT(huart);
    return;
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80021ca:	0650      	lsls	r0, r2, #25
 80021cc:	d50b      	bpl.n	80021e6 <HAL_UART_IRQHandler+0x13e>
 80021ce:	064a      	lsls	r2, r1, #25
 80021d0:	d509      	bpl.n	80021e6 <HAL_UART_IRQHandler+0x13e>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021d8:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80021da:	2320      	movs	r3, #32
 80021dc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 80021e0:	4620      	mov	r0, r4
 80021e2:	f7ff ff21 	bl	8002028 <HAL_UART_TxCpltCallback>
 80021e6:	bd70      	pop	{r4, r5, r6, pc}
 80021e8:	080021ed 	.word	0x080021ed

080021ec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80021ec:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021ee:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0;
 80021f4:	84c3      	strh	r3, [r0, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 80021f6:	f7ff ff55 	bl	80020a4 <HAL_UART_ErrorCallback>
 80021fa:	bd08      	pop	{r3, pc}

080021fc <HAL_TIMEx_CommutationCallback>:
 80021fc:	4770      	bx	lr

080021fe <HAL_TIMEx_BreakCallback>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021fe:	4770      	bx	lr

08002200 <HAL_TIM_Base_MspInit>:
 8002200:	4770      	bx	lr

08002202 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002202:	6803      	ldr	r3, [r0, #0]
 8002204:	68da      	ldr	r2, [r3, #12]
 8002206:	f042 0201 	orr.w	r2, r2, #1
 800220a:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	f042 0201 	orr.w	r2, r2, #1
 8002212:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8002214:	2000      	movs	r0, #0
 8002216:	4770      	bx	lr

08002218 <HAL_TIM_OC_DelayElapsedCallback>:
 8002218:	4770      	bx	lr

0800221a <HAL_TIM_IC_CaptureCallback>:
 800221a:	4770      	bx	lr

0800221c <HAL_TIM_PWM_PulseFinishedCallback>:
 800221c:	4770      	bx	lr

0800221e <HAL_TIM_TriggerCallback>:
 800221e:	4770      	bx	lr

08002220 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002220:	6803      	ldr	r3, [r0, #0]
 8002222:	691a      	ldr	r2, [r3, #16]
 8002224:	0791      	lsls	r1, r2, #30
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002226:	b510      	push	{r4, lr}
 8002228:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800222a:	d514      	bpl.n	8002256 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	0792      	lsls	r2, r2, #30
 8002230:	d511      	bpl.n	8002256 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002232:	f06f 0202 	mvn.w	r2, #2
 8002236:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002238:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800223a:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800223c:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800223e:	7602      	strb	r2, [r0, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002240:	d002      	beq.n	8002248 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002242:	f7ff ffea 	bl	800221a <HAL_TIM_IC_CaptureCallback>
 8002246:	e004      	b.n	8002252 <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002248:	f7ff ffe6 	bl	8002218 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800224c:	4620      	mov	r0, r4
 800224e:	f7ff ffe5 	bl	800221c <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002252:	2300      	movs	r3, #0
 8002254:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002256:	6823      	ldr	r3, [r4, #0]
 8002258:	691a      	ldr	r2, [r3, #16]
 800225a:	0750      	lsls	r0, r2, #29
 800225c:	d516      	bpl.n	800228c <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	0751      	lsls	r1, r2, #29
 8002262:	d513      	bpl.n	800228c <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002264:	f06f 0204 	mvn.w	r2, #4
 8002268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800226a:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800226c:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800226e:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002272:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002274:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002276:	d002      	beq.n	800227e <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002278:	f7ff ffcf 	bl	800221a <HAL_TIM_IC_CaptureCallback>
 800227c:	e004      	b.n	8002288 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800227e:	f7ff ffcb 	bl	8002218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002282:	4620      	mov	r0, r4
 8002284:	f7ff ffca 	bl	800221c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002288:	2300      	movs	r3, #0
 800228a:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800228c:	6823      	ldr	r3, [r4, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	0712      	lsls	r2, r2, #28
 8002292:	d515      	bpl.n	80022c0 <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	0710      	lsls	r0, r2, #28
 8002298:	d512      	bpl.n	80022c0 <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800229a:	f06f 0208 	mvn.w	r2, #8
 800229e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022a0:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022a2:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022a4:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022a6:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80022a8:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022aa:	d002      	beq.n	80022b2 <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80022ac:	f7ff ffb5 	bl	800221a <HAL_TIM_IC_CaptureCallback>
 80022b0:	e004      	b.n	80022bc <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022b2:	f7ff ffb1 	bl	8002218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80022b6:	4620      	mov	r0, r4
 80022b8:	f7ff ffb0 	bl	800221c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022bc:	2300      	movs	r3, #0
 80022be:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022c0:	6823      	ldr	r3, [r4, #0]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	06d2      	lsls	r2, r2, #27
 80022c6:	d516      	bpl.n	80022f6 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	06d0      	lsls	r0, r2, #27
 80022cc:	d513      	bpl.n	80022f6 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022ce:	f06f 0210 	mvn.w	r2, #16
 80022d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022d4:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022d6:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022d8:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022dc:	7622      	strb	r2, [r4, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80022de:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022e0:	d002      	beq.n	80022e8 <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80022e2:	f7ff ff9a 	bl	800221a <HAL_TIM_IC_CaptureCallback>
 80022e6:	e004      	b.n	80022f2 <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e8:	f7ff ff96 	bl	8002218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022ec:	4620      	mov	r0, r4
 80022ee:	f7ff ff95 	bl	800221c <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f2:	2300      	movs	r3, #0
 80022f4:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022f6:	6823      	ldr	r3, [r4, #0]
 80022f8:	691a      	ldr	r2, [r3, #16]
 80022fa:	07d1      	lsls	r1, r2, #31
 80022fc:	d508      	bpl.n	8002310 <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	07d2      	lsls	r2, r2, #31
 8002302:	d505      	bpl.n	8002310 <HAL_TIM_IRQHandler+0xf0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002304:	f06f 0201 	mvn.w	r2, #1
 8002308:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800230a:	4620      	mov	r0, r4
 800230c:	f7fe f9c2 	bl	8000694 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002310:	6823      	ldr	r3, [r4, #0]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	0610      	lsls	r0, r2, #24
 8002316:	d508      	bpl.n	800232a <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002318:	68da      	ldr	r2, [r3, #12]
 800231a:	0611      	lsls	r1, r2, #24
 800231c:	d505      	bpl.n	800232a <HAL_TIM_IRQHandler+0x10a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800231e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002322:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002324:	4620      	mov	r0, r4
 8002326:	f7ff ff6a 	bl	80021fe <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800232a:	6823      	ldr	r3, [r4, #0]
 800232c:	691a      	ldr	r2, [r3, #16]
 800232e:	0652      	lsls	r2, r2, #25
 8002330:	d508      	bpl.n	8002344 <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002332:	68da      	ldr	r2, [r3, #12]
 8002334:	0650      	lsls	r0, r2, #25
 8002336:	d505      	bpl.n	8002344 <HAL_TIM_IRQHandler+0x124>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002338:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800233c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800233e:	4620      	mov	r0, r4
 8002340:	f7ff ff6d 	bl	800221e <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002344:	6823      	ldr	r3, [r4, #0]
 8002346:	691a      	ldr	r2, [r3, #16]
 8002348:	0691      	lsls	r1, r2, #26
 800234a:	d50a      	bpl.n	8002362 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	0692      	lsls	r2, r2, #26
 8002350:	d507      	bpl.n	8002362 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002352:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002356:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002358:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 800235a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 800235e:	f7ff bf4d 	b.w	80021fc <HAL_TIMEx_CommutationCallback>
 8002362:	bd10      	pop	{r4, pc}

08002364 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002364:	4a2e      	ldr	r2, [pc, #184]	; (8002420 <TIM_Base_SetConfig+0xbc>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 8002366:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002368:	4290      	cmp	r0, r2
 800236a:	d012      	beq.n	8002392 <TIM_Base_SetConfig+0x2e>
 800236c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002370:	d00f      	beq.n	8002392 <TIM_Base_SetConfig+0x2e>
 8002372:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002376:	4290      	cmp	r0, r2
 8002378:	d00b      	beq.n	8002392 <TIM_Base_SetConfig+0x2e>
 800237a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800237e:	4290      	cmp	r0, r2
 8002380:	d007      	beq.n	8002392 <TIM_Base_SetConfig+0x2e>
 8002382:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002386:	4290      	cmp	r0, r2
 8002388:	d003      	beq.n	8002392 <TIM_Base_SetConfig+0x2e>
 800238a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800238e:	4290      	cmp	r0, r2
 8002390:	d118      	bne.n	80023c4 <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002392:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002398:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800239a:	4a21      	ldr	r2, [pc, #132]	; (8002420 <TIM_Base_SetConfig+0xbc>)
 800239c:	4290      	cmp	r0, r2
 800239e:	d037      	beq.n	8002410 <TIM_Base_SetConfig+0xac>
 80023a0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80023a4:	d034      	beq.n	8002410 <TIM_Base_SetConfig+0xac>
 80023a6:	4a1f      	ldr	r2, [pc, #124]	; (8002424 <TIM_Base_SetConfig+0xc0>)
 80023a8:	4290      	cmp	r0, r2
 80023aa:	d031      	beq.n	8002410 <TIM_Base_SetConfig+0xac>
 80023ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023b0:	4290      	cmp	r0, r2
 80023b2:	d02d      	beq.n	8002410 <TIM_Base_SetConfig+0xac>
 80023b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023b8:	4290      	cmp	r0, r2
 80023ba:	d029      	beq.n	8002410 <TIM_Base_SetConfig+0xac>
 80023bc:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80023c0:	4290      	cmp	r0, r2
 80023c2:	d025      	beq.n	8002410 <TIM_Base_SetConfig+0xac>
 80023c4:	4a18      	ldr	r2, [pc, #96]	; (8002428 <TIM_Base_SetConfig+0xc4>)
 80023c6:	4290      	cmp	r0, r2
 80023c8:	d022      	beq.n	8002410 <TIM_Base_SetConfig+0xac>
 80023ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023ce:	4290      	cmp	r0, r2
 80023d0:	d01e      	beq.n	8002410 <TIM_Base_SetConfig+0xac>
 80023d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023d6:	4290      	cmp	r0, r2
 80023d8:	d01a      	beq.n	8002410 <TIM_Base_SetConfig+0xac>
 80023da:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80023de:	4290      	cmp	r0, r2
 80023e0:	d016      	beq.n	8002410 <TIM_Base_SetConfig+0xac>
 80023e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023e6:	4290      	cmp	r0, r2
 80023e8:	d012      	beq.n	8002410 <TIM_Base_SetConfig+0xac>
 80023ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023ee:	4290      	cmp	r0, r2
 80023f0:	d00e      	beq.n	8002410 <TIM_Base_SetConfig+0xac>
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  TIMx->CR1 = tmpcr1;
 80023f2:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023f4:	688b      	ldr	r3, [r1, #8]
 80023f6:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80023f8:	680b      	ldr	r3, [r1, #0]
 80023fa:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80023fc:	4b08      	ldr	r3, [pc, #32]	; (8002420 <TIM_Base_SetConfig+0xbc>)
 80023fe:	4298      	cmp	r0, r3
 8002400:	d00b      	beq.n	800241a <TIM_Base_SetConfig+0xb6>
 8002402:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002406:	4298      	cmp	r0, r3
 8002408:	d007      	beq.n	800241a <TIM_Base_SetConfig+0xb6>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800240a:	2301      	movs	r3, #1
 800240c:	6143      	str	r3, [r0, #20]
}
 800240e:	4770      	bx	lr
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002410:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002412:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002416:	4313      	orrs	r3, r2
 8002418:	e7eb      	b.n	80023f2 <TIM_Base_SetConfig+0x8e>
  TIMx->PSC = (uint32_t)Structure->Prescaler;
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800241a:	690b      	ldr	r3, [r1, #16]
 800241c:	6303      	str	r3, [r0, #48]	; 0x30
 800241e:	e7f4      	b.n	800240a <TIM_Base_SetConfig+0xa6>
 8002420:	40010000 	.word	0x40010000
 8002424:	40000400 	.word	0x40000400
 8002428:	40014000 	.word	0x40014000

0800242c <HAL_TIM_Base_Init>:
  * @param  htim: pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 800242c:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 800242e:	4604      	mov	r4, r0
 8002430:	b1a0      	cbz	r0, 800245c <HAL_TIM_Base_Init+0x30>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8002432:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002436:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800243a:	b91b      	cbnz	r3, 8002444 <HAL_TIM_Base_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800243c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002440:	f7ff fede 	bl	8002200 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002444:	2302      	movs	r3, #2
 8002446:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800244a:	6820      	ldr	r0, [r4, #0]
 800244c:	1d21      	adds	r1, r4, #4
 800244e:	f7ff ff89 	bl	8002364 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002452:	2301      	movs	r3, #1
 8002454:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  
  return HAL_OK;
 8002458:	2000      	movs	r0, #0
 800245a:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 800245c:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 800245e:	bd10      	pop	{r4, pc}

08002460 <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002460:	6803      	ldr	r3, [r0, #0]
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002462:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002466:	07de      	lsls	r6, r3, #31
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature 
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002468:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800246a:	d403      	bmi.n	8002474 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800246c:	6823      	ldr	r3, [r4, #0]
 800246e:	079d      	lsls	r5, r3, #30
 8002470:	d440      	bmi.n	80024f4 <HAL_RCC_OscConfig+0x94>
 8002472:	e099      	b.n	80025a8 <HAL_RCC_OscConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002474:	4ba6      	ldr	r3, [pc, #664]	; (8002710 <HAL_RCC_OscConfig+0x2b0>)
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	f002 020c 	and.w	r2, r2, #12
 800247c:	2a04      	cmp	r2, #4
 800247e:	d010      	beq.n	80024a2 <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002480:	689a      	ldr	r2, [r3, #8]
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002482:	f002 020c 	and.w	r2, r2, #12
 8002486:	2a08      	cmp	r2, #8
 8002488:	d102      	bne.n	8002490 <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	0258      	lsls	r0, r3, #9
 800248e:	d408      	bmi.n	80024a2 <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002490:	4a9f      	ldr	r2, [pc, #636]	; (8002710 <HAL_RCC_OscConfig+0x2b0>)
 8002492:	6893      	ldr	r3, [r2, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002494:	f003 030c 	and.w	r3, r3, #12
 8002498:	2b0c      	cmp	r3, #12
 800249a:	d10b      	bne.n	80024b4 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800249c:	6853      	ldr	r3, [r2, #4]
 800249e:	0259      	lsls	r1, r3, #9
 80024a0:	d508      	bpl.n	80024b4 <HAL_RCC_OscConfig+0x54>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a2:	4b9b      	ldr	r3, [pc, #620]	; (8002710 <HAL_RCC_OscConfig+0x2b0>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	039a      	lsls	r2, r3, #14
 80024a8:	d5e0      	bpl.n	800246c <HAL_RCC_OscConfig+0xc>
 80024aa:	6863      	ldr	r3, [r4, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1dd      	bne.n	800246c <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 80024b0:	2001      	movs	r0, #1
 80024b2:	e154      	b.n	800275e <HAL_RCC_OscConfig+0x2fe>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b4:	4b97      	ldr	r3, [pc, #604]	; (8002714 <HAL_RCC_OscConfig+0x2b4>)
 80024b6:	7922      	ldrb	r2, [r4, #4]
 80024b8:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024ba:	6863      	ldr	r3, [r4, #4]
 80024bc:	b16b      	cbz	r3, 80024da <HAL_RCC_OscConfig+0x7a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024be:	f000 fda9 	bl	8003014 <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c2:	4d93      	ldr	r5, [pc, #588]	; (8002710 <HAL_RCC_OscConfig+0x2b0>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c4:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c6:	682b      	ldr	r3, [r5, #0]
 80024c8:	039b      	lsls	r3, r3, #14
 80024ca:	d4cf      	bmi.n	800246c <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024cc:	f000 fda2 	bl	8003014 <HAL_GetTick>
 80024d0:	1b80      	subs	r0, r0, r6
 80024d2:	2864      	cmp	r0, #100	; 0x64
 80024d4:	d9f7      	bls.n	80024c6 <HAL_RCC_OscConfig+0x66>
          {
            return HAL_TIMEOUT;
 80024d6:	2003      	movs	r0, #3
 80024d8:	e141      	b.n	800275e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024da:	f000 fd9b 	bl	8003014 <HAL_GetTick>

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024de:	4d8c      	ldr	r5, [pc, #560]	; (8002710 <HAL_RCC_OscConfig+0x2b0>)
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e2:	682b      	ldr	r3, [r5, #0]
 80024e4:	039f      	lsls	r7, r3, #14
 80024e6:	d5c1      	bpl.n	800246c <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e8:	f000 fd94 	bl	8003014 <HAL_GetTick>
 80024ec:	1b80      	subs	r0, r0, r6
 80024ee:	2864      	cmp	r0, #100	; 0x64
 80024f0:	d9f7      	bls.n	80024e2 <HAL_RCC_OscConfig+0x82>
 80024f2:	e7f0      	b.n	80024d6 <HAL_RCC_OscConfig+0x76>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80024f4:	4b86      	ldr	r3, [pc, #536]	; (8002710 <HAL_RCC_OscConfig+0x2b0>)
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	f012 0f0c 	tst.w	r2, #12
 80024fc:	d010      	beq.n	8002520 <HAL_RCC_OscConfig+0xc0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80024fe:	689a      	ldr	r2, [r3, #8]
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002500:	f002 020c 	and.w	r2, r2, #12
 8002504:	2a08      	cmp	r2, #8
 8002506:	d102      	bne.n	800250e <HAL_RCC_OscConfig+0xae>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	0258      	lsls	r0, r3, #9
 800250c:	d508      	bpl.n	8002520 <HAL_RCC_OscConfig+0xc0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800250e:	4a80      	ldr	r2, [pc, #512]	; (8002710 <HAL_RCC_OscConfig+0x2b0>)
 8002510:	6893      	ldr	r3, [r2, #8]
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b0c      	cmp	r3, #12
 8002518:	d117      	bne.n	800254a <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800251a:	6853      	ldr	r3, [r2, #4]
 800251c:	0259      	lsls	r1, r3, #9
 800251e:	d414      	bmi.n	800254a <HAL_RCC_OscConfig+0xea>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002520:	4b7b      	ldr	r3, [pc, #492]	; (8002710 <HAL_RCC_OscConfig+0x2b0>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	0792      	lsls	r2, r2, #30
 8002526:	d502      	bpl.n	800252e <HAL_RCC_OscConfig+0xce>
 8002528:	68e2      	ldr	r2, [r4, #12]
 800252a:	2a01      	cmp	r2, #1
 800252c:	d1c0      	bne.n	80024b0 <HAL_RCC_OscConfig+0x50>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252e:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002530:	21f8      	movs	r1, #248	; 0xf8
 8002532:	fa91 f1a1 	rbit	r1, r1
 8002536:	6920      	ldr	r0, [r4, #16]
 8002538:	fab1 f181 	clz	r1, r1
 800253c:	fa00 f101 	lsl.w	r1, r0, r1
 8002540:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8002544:	430a      	orrs	r2, r1
 8002546:	601a      	str	r2, [r3, #0]
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002548:	e02e      	b.n	80025a8 <HAL_RCC_OscConfig+0x148>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800254a:	68e2      	ldr	r2, [r4, #12]
 800254c:	4b72      	ldr	r3, [pc, #456]	; (8002718 <HAL_RCC_OscConfig+0x2b8>)
 800254e:	b1ea      	cbz	r2, 800258c <HAL_RCC_OscConfig+0x12c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002550:	2201      	movs	r2, #1
 8002552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002554:	f000 fd5e 	bl	8003014 <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002558:	4d6d      	ldr	r5, [pc, #436]	; (8002710 <HAL_RCC_OscConfig+0x2b0>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255a:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800255c:	682b      	ldr	r3, [r5, #0]
 800255e:	486c      	ldr	r0, [pc, #432]	; (8002710 <HAL_RCC_OscConfig+0x2b0>)
 8002560:	079b      	lsls	r3, r3, #30
 8002562:	d405      	bmi.n	8002570 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002564:	f000 fd56 	bl	8003014 <HAL_GetTick>
 8002568:	1b80      	subs	r0, r0, r6
 800256a:	2802      	cmp	r0, #2
 800256c:	d9f6      	bls.n	800255c <HAL_RCC_OscConfig+0xfc>
 800256e:	e7b2      	b.n	80024d6 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002570:	6803      	ldr	r3, [r0, #0]
 8002572:	22f8      	movs	r2, #248	; 0xf8
 8002574:	fa92 f2a2 	rbit	r2, r2
 8002578:	6921      	ldr	r1, [r4, #16]
 800257a:	fab2 f282 	clz	r2, r2
 800257e:	fa01 f202 	lsl.w	r2, r1, r2
 8002582:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002586:	4313      	orrs	r3, r2
 8002588:	6003      	str	r3, [r0, #0]
 800258a:	e00d      	b.n	80025a8 <HAL_RCC_OscConfig+0x148>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800258c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258e:	f000 fd41 	bl	8003014 <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002592:	4d5f      	ldr	r5, [pc, #380]	; (8002710 <HAL_RCC_OscConfig+0x2b0>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002594:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002596:	682b      	ldr	r3, [r5, #0]
 8002598:	079f      	lsls	r7, r3, #30
 800259a:	d505      	bpl.n	80025a8 <HAL_RCC_OscConfig+0x148>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800259c:	f000 fd3a 	bl	8003014 <HAL_GetTick>
 80025a0:	1b80      	subs	r0, r0, r6
 80025a2:	2802      	cmp	r0, #2
 80025a4:	d9f7      	bls.n	8002596 <HAL_RCC_OscConfig+0x136>
 80025a6:	e796      	b.n	80024d6 <HAL_RCC_OscConfig+0x76>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025a8:	6823      	ldr	r3, [r4, #0]
 80025aa:	071e      	lsls	r6, r3, #28
 80025ac:	d403      	bmi.n	80025b6 <HAL_RCC_OscConfig+0x156>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ae:	6823      	ldr	r3, [r4, #0]
 80025b0:	075d      	lsls	r5, r3, #29
 80025b2:	d545      	bpl.n	8002640 <HAL_RCC_OscConfig+0x1e0>
 80025b4:	e01f      	b.n	80025f6 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025b6:	6962      	ldr	r2, [r4, #20]
 80025b8:	4b58      	ldr	r3, [pc, #352]	; (800271c <HAL_RCC_OscConfig+0x2bc>)
 80025ba:	b172      	cbz	r2, 80025da <HAL_RCC_OscConfig+0x17a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025bc:	2201      	movs	r2, #1
 80025be:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c0:	f000 fd28 	bl	8003014 <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c4:	4d52      	ldr	r5, [pc, #328]	; (8002710 <HAL_RCC_OscConfig+0x2b0>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c6:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80025ca:	0798      	lsls	r0, r3, #30
 80025cc:	d4ef      	bmi.n	80025ae <HAL_RCC_OscConfig+0x14e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ce:	f000 fd21 	bl	8003014 <HAL_GetTick>
 80025d2:	1b80      	subs	r0, r0, r6
 80025d4:	2802      	cmp	r0, #2
 80025d6:	d9f7      	bls.n	80025c8 <HAL_RCC_OscConfig+0x168>
 80025d8:	e77d      	b.n	80024d6 <HAL_RCC_OscConfig+0x76>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025da:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025dc:	f000 fd1a 	bl	8003014 <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e0:	4d4b      	ldr	r5, [pc, #300]	; (8002710 <HAL_RCC_OscConfig+0x2b0>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e2:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80025e6:	0799      	lsls	r1, r3, #30
 80025e8:	d5e1      	bpl.n	80025ae <HAL_RCC_OscConfig+0x14e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ea:	f000 fd13 	bl	8003014 <HAL_GetTick>
 80025ee:	1b80      	subs	r0, r0, r6
 80025f0:	2802      	cmp	r0, #2
 80025f2:	d9f7      	bls.n	80025e4 <HAL_RCC_OscConfig+0x184>
 80025f4:	e76f      	b.n	80024d6 <HAL_RCC_OscConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	9301      	str	r3, [sp, #4]
 80025fa:	4b45      	ldr	r3, [pc, #276]	; (8002710 <HAL_RCC_OscConfig+0x2b0>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80025fc:	4d48      	ldr	r5, [pc, #288]	; (8002720 <HAL_RCC_OscConfig+0x2c0>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80025fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002600:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002604:	641a      	str	r2, [r3, #64]	; 0x40
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260c:	9301      	str	r3, [sp, #4]
 800260e:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002610:	682b      	ldr	r3, [r5, #0]
 8002612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002616:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002618:	f000 fcfc 	bl	8003014 <HAL_GetTick>
 800261c:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800261e:	682b      	ldr	r3, [r5, #0]
 8002620:	05da      	lsls	r2, r3, #23
 8002622:	d510      	bpl.n	8002646 <HAL_RCC_OscConfig+0x1e6>
        return HAL_TIMEOUT;
      }
    }
    
    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002624:	4b3f      	ldr	r3, [pc, #252]	; (8002724 <HAL_RCC_OscConfig+0x2c4>)
 8002626:	7a22      	ldrb	r2, [r4, #8]
 8002628:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800262a:	68a3      	ldr	r3, [r4, #8]
 800262c:	b1bb      	cbz	r3, 800265e <HAL_RCC_OscConfig+0x1fe>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262e:	f000 fcf1 	bl	8003014 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002632:	4d37      	ldr	r5, [pc, #220]	; (8002710 <HAL_RCC_OscConfig+0x2b0>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002634:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002636:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800263c:	079b      	lsls	r3, r3, #30
 800263e:	d508      	bpl.n	8002652 <HAL_RCC_OscConfig+0x1f2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002640:	69a2      	ldr	r2, [r4, #24]
 8002642:	b9da      	cbnz	r2, 800267c <HAL_RCC_OscConfig+0x21c>
 8002644:	e062      	b.n	800270c <HAL_RCC_OscConfig+0x2ac>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002646:	f000 fce5 	bl	8003014 <HAL_GetTick>
 800264a:	1b80      	subs	r0, r0, r6
 800264c:	2802      	cmp	r0, #2
 800264e:	d9e6      	bls.n	800261e <HAL_RCC_OscConfig+0x1be>
 8002650:	e741      	b.n	80024d6 <HAL_RCC_OscConfig+0x76>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002652:	f000 fcdf 	bl	8003014 <HAL_GetTick>
 8002656:	1b80      	subs	r0, r0, r6
 8002658:	42b8      	cmp	r0, r7
 800265a:	d9ee      	bls.n	800263a <HAL_RCC_OscConfig+0x1da>
 800265c:	e73b      	b.n	80024d6 <HAL_RCC_OscConfig+0x76>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265e:	f000 fcd9 	bl	8003014 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002662:	4d2b      	ldr	r5, [pc, #172]	; (8002710 <HAL_RCC_OscConfig+0x2b0>)
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002664:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002666:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800266c:	0798      	lsls	r0, r3, #30
 800266e:	d5e7      	bpl.n	8002640 <HAL_RCC_OscConfig+0x1e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002670:	f000 fcd0 	bl	8003014 <HAL_GetTick>
 8002674:	1b80      	subs	r0, r0, r6
 8002676:	42b8      	cmp	r0, r7
 8002678:	d9f7      	bls.n	800266a <HAL_RCC_OscConfig+0x20a>
 800267a:	e72c      	b.n	80024d6 <HAL_RCC_OscConfig+0x76>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800267c:	4d24      	ldr	r5, [pc, #144]	; (8002710 <HAL_RCC_OscConfig+0x2b0>)
 800267e:	68ab      	ldr	r3, [r5, #8]
 8002680:	f003 030c 	and.w	r3, r3, #12
 8002684:	2b08      	cmp	r3, #8
 8002686:	f43f af13 	beq.w	80024b0 <HAL_RCC_OscConfig+0x50>
 800268a:	4e27      	ldr	r6, [pc, #156]	; (8002728 <HAL_RCC_OscConfig+0x2c8>)
 800268c:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800268e:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002690:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002692:	d158      	bne.n	8002746 <HAL_RCC_OscConfig+0x2e6>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f000 fcbe 	bl	8003014 <HAL_GetTick>
 8002698:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269a:	682b      	ldr	r3, [r5, #0]
 800269c:	4f1c      	ldr	r7, [pc, #112]	; (8002710 <HAL_RCC_OscConfig+0x2b0>)
 800269e:	0199      	lsls	r1, r3, #6
 80026a0:	d444      	bmi.n	800272c <HAL_RCC_OscConfig+0x2cc>
 80026a2:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80026a6:	fa92 f2a2 	rbit	r2, r2
 80026aa:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026ae:	fab2 fc82 	clz	ip, r2
 80026b2:	fa93 f3a3 	rbit	r3, r3
 80026b6:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80026ba:	fab3 fe83 	clz	lr, r3
 80026be:	fa91 f1a1 	rbit	r1, r1
 80026c2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80026c6:	fab1 f581 	clz	r5, r1
 80026ca:	fa92 f2a2 	rbit	r2, r2
 80026ce:	69e3      	ldr	r3, [r4, #28]
 80026d0:	fab2 f082 	clz	r0, r2
 80026d4:	6a22      	ldr	r2, [r4, #32]
 80026d6:	ea43 0102 	orr.w	r1, r3, r2
 80026da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80026dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80026de:	fa02 f20c 	lsl.w	r2, r2, ip
 80026e2:	4311      	orrs	r1, r2
 80026e4:	085a      	lsrs	r2, r3, #1
 80026e6:	3a01      	subs	r2, #1
 80026e8:	fa02 f30e 	lsl.w	r3, r2, lr
 80026ec:	430b      	orrs	r3, r1
 80026ee:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80026f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80026f2:	40a9      	lsls	r1, r5
 80026f4:	430b      	orrs	r3, r1
 80026f6:	4082      	lsls	r2, r0
 80026f8:	4313      	orrs	r3, r2
 80026fa:	607b      	str	r3, [r7, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026fc:	2301      	movs	r3, #1
 80026fe:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002700:	f000 fc88 	bl	8003014 <HAL_GetTick>
 8002704:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	019a      	lsls	r2, r3, #6
 800270a:	d516      	bpl.n	800273a <HAL_RCC_OscConfig+0x2da>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 800270c:	2000      	movs	r0, #0
 800270e:	e026      	b.n	800275e <HAL_RCC_OscConfig+0x2fe>
 8002710:	40023800 	.word	0x40023800
 8002714:	40023802 	.word	0x40023802
 8002718:	42470000 	.word	0x42470000
 800271c:	42470e80 	.word	0x42470e80
 8002720:	40007000 	.word	0x40007000
 8002724:	40023870 	.word	0x40023870
 8002728:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272c:	f000 fc72 	bl	8003014 <HAL_GetTick>
 8002730:	ebc8 0000 	rsb	r0, r8, r0
 8002734:	2802      	cmp	r0, #2
 8002736:	d9b0      	bls.n	800269a <HAL_RCC_OscConfig+0x23a>
 8002738:	e6cd      	b.n	80024d6 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800273a:	f000 fc6b 	bl	8003014 <HAL_GetTick>
 800273e:	1b00      	subs	r0, r0, r4
 8002740:	2802      	cmp	r0, #2
 8002742:	d9e0      	bls.n	8002706 <HAL_RCC_OscConfig+0x2a6>
 8002744:	e6c7      	b.n	80024d6 <HAL_RCC_OscConfig+0x76>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002746:	f000 fc65 	bl	8003014 <HAL_GetTick>
 800274a:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800274c:	682b      	ldr	r3, [r5, #0]
 800274e:	019b      	lsls	r3, r3, #6
 8002750:	d5dc      	bpl.n	800270c <HAL_RCC_OscConfig+0x2ac>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002752:	f000 fc5f 	bl	8003014 <HAL_GetTick>
 8002756:	1b00      	subs	r0, r0, r4
 8002758:	2802      	cmp	r0, #2
 800275a:	d9f7      	bls.n	800274c <HAL_RCC_OscConfig+0x2ec>
 800275c:	e6bb      	b.n	80024d6 <HAL_RCC_OscConfig+0x76>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800275e:	b002      	add	sp, #8
 8002760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002764 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002764:	4930      	ldr	r1, [pc, #192]	; (8002828 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002766:	6888      	ldr	r0, [r1, #8]
 8002768:	f000 000c 	and.w	r0, r0, #12
 800276c:	2808      	cmp	r0, #8
 800276e:	d008      	beq.n	8002782 <HAL_RCC_GetSysClockFreq+0x1e>
 8002770:	280c      	cmp	r0, #12
 8002772:	d02f      	beq.n	80027d4 <HAL_RCC_GetSysClockFreq+0x70>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002774:	4a2d      	ldr	r2, [pc, #180]	; (800282c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002776:	4b2e      	ldr	r3, [pc, #184]	; (8002830 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002778:	2804      	cmp	r0, #4
 800277a:	bf0c      	ite	eq
 800277c:	4618      	moveq	r0, r3
 800277e:	4610      	movne	r0, r2
 8002780:	4770      	bx	lr
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002782:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002784:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002786:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800278a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800278e:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8002792:	684b      	ldr	r3, [r1, #4]
 8002794:	fa92 f2a2 	rbit	r2, r2
 8002798:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 800279c:	fab2 f282 	clz	r2, r2
 80027a0:	ea01 0103 	and.w	r1, r1, r3
 80027a4:	fa21 f102 	lsr.w	r1, r1, r2
 80027a8:	bf14      	ite	ne
 80027aa:	4a21      	ldrne	r2, [pc, #132]	; (8002830 <HAL_RCC_GetSysClockFreq+0xcc>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80027ac:	4a1f      	ldreq	r2, [pc, #124]	; (800282c <HAL_RCC_GetSysClockFreq+0xc8>)
 80027ae:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80027b2:	4a1d      	ldr	r2, [pc, #116]	; (8002828 <HAL_RCC_GetSysClockFreq+0xc4>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 80027b4:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 80027b8:	6852      	ldr	r2, [r2, #4]
 80027ba:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 80027be:	fa90 f0a0 	rbit	r0, r0
 80027c2:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 80027c6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 80027ca:	fa22 f000 	lsr.w	r0, r2, r0
 80027ce:	3001      	adds	r0, #1
 80027d0:	0040      	lsls	r0, r0, #1
 80027d2:	e025      	b.n	8002820 <HAL_RCC_GetSysClockFreq+0xbc>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027d4:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027d6:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027d8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027dc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80027e0:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80027e4:	684b      	ldr	r3, [r1, #4]
 80027e6:	fa92 f2a2 	rbit	r2, r2
 80027ea:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 80027ee:	fab2 f282 	clz	r2, r2
 80027f2:	ea01 0103 	and.w	r1, r1, r3
 80027f6:	fa21 f102 	lsr.w	r1, r1, r2
 80027fa:	bf14      	ite	ne
 80027fc:	4a0c      	ldrne	r2, [pc, #48]	; (8002830 <HAL_RCC_GetSysClockFreq+0xcc>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 80027fe:	4a0b      	ldreq	r2, [pc, #44]	; (800282c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002800:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 8002804:	4a08      	ldr	r2, [pc, #32]	; (8002828 <HAL_RCC_GetSysClockFreq+0xc4>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8002806:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> POSITION_VAL(RCC_PLLCFGR_PLLR));
 800280a:	6852      	ldr	r2, [r2, #4]
 800280c:	f04f 40e0 	mov.w	r0, #1879048192	; 0x70000000
 8002810:	fa90 f0a0 	rbit	r0, r0
 8002814:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllr;
 8002818:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 800281c:	fa22 f000 	lsr.w	r0, r2, r0
 8002820:	fbb3 f0f0 	udiv	r0, r3, r0
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	40023800 	.word	0x40023800
 800282c:	00f42400 	.word	0x00f42400
 8002830:	007a1200 	.word	0x007a1200

08002834 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002834:	4b55      	ldr	r3, [pc, #340]	; (800298c <HAL_RCC_ClockConfig+0x158>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	f002 020f 	and.w	r2, r2, #15
 800283c:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800283e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002842:	4605      	mov	r5, r0
 8002844:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002846:	d30a      	bcc.n	800285e <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002848:	6829      	ldr	r1, [r5, #0]
 800284a:	0788      	lsls	r0, r1, #30
 800284c:	d511      	bpl.n	8002872 <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800284e:	4850      	ldr	r0, [pc, #320]	; (8002990 <HAL_RCC_ClockConfig+0x15c>)
 8002850:	6883      	ldr	r3, [r0, #8]
 8002852:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002856:	68ab      	ldr	r3, [r5, #8]
 8002858:	4313      	orrs	r3, r2
 800285a:	6083      	str	r3, [r0, #8]
 800285c:	e009      	b.n	8002872 <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285e:	b2ca      	uxtb	r2, r1
 8002860:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 030f 	and.w	r3, r3, #15
 8002868:	4299      	cmp	r1, r3
 800286a:	d0ed      	beq.n	8002848 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 800286c:	2001      	movs	r0, #1
 800286e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002872:	07c9      	lsls	r1, r1, #31
 8002874:	d406      	bmi.n	8002884 <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8002876:	4b45      	ldr	r3, [pc, #276]	; (800298c <HAL_RCC_ClockConfig+0x158>)
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	f002 020f 	and.w	r2, r2, #15
 800287e:	4296      	cmp	r6, r2
 8002880:	d351      	bcc.n	8002926 <HAL_RCC_ClockConfig+0xf2>
 8002882:	e057      	b.n	8002934 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002884:	686b      	ldr	r3, [r5, #4]
 8002886:	4a42      	ldr	r2, [pc, #264]	; (8002990 <HAL_RCC_ClockConfig+0x15c>)
 8002888:	2b01      	cmp	r3, #1
 800288a:	d103      	bne.n	8002894 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288c:	6812      	ldr	r2, [r2, #0]
 800288e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002892:	e008      	b.n	80028a6 <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8002894:	1e99      	subs	r1, r3, #2
 8002896:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002898:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 800289a:	d802      	bhi.n	80028a2 <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289c:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80028a0:	e001      	b.n	80028a6 <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a2:	f012 0f02 	tst.w	r2, #2
 80028a6:	d0e1      	beq.n	800286c <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028a8:	4c39      	ldr	r4, [pc, #228]	; (8002990 <HAL_RCC_ClockConfig+0x15c>)
 80028aa:	68a2      	ldr	r2, [r4, #8]
 80028ac:	f022 0203 	bic.w	r2, r2, #3
 80028b0:	4313      	orrs	r3, r2
 80028b2:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b4:	f000 fbae 	bl	8003014 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b8:	686b      	ldr	r3, [r5, #4]
 80028ba:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028bc:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028be:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028c2:	d10c      	bne.n	80028de <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80028c4:	68a3      	ldr	r3, [r4, #8]
 80028c6:	f003 030c 	and.w	r3, r3, #12
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d0d3      	beq.n	8002876 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ce:	f000 fba1 	bl	8003014 <HAL_GetTick>
 80028d2:	1bc0      	subs	r0, r0, r7
 80028d4:	4540      	cmp	r0, r8
 80028d6:	d9f5      	bls.n	80028c4 <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 80028d8:	2003      	movs	r0, #3
 80028da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d10a      	bne.n	80028f8 <HAL_RCC_ClockConfig+0xc4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028e2:	68a3      	ldr	r3, [r4, #8]
 80028e4:	f003 030c 	and.w	r3, r3, #12
 80028e8:	2b08      	cmp	r3, #8
 80028ea:	d0c4      	beq.n	8002876 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ec:	f000 fb92 	bl	8003014 <HAL_GetTick>
 80028f0:	1bc0      	subs	r0, r0, r7
 80028f2:	4540      	cmp	r0, r8
 80028f4:	d9f5      	bls.n	80028e2 <HAL_RCC_ClockConfig+0xae>
 80028f6:	e7ef      	b.n	80028d8 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d10f      	bne.n	800291c <HAL_RCC_ClockConfig+0xe8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 80028fc:	68a3      	ldr	r3, [r4, #8]
 80028fe:	f003 030c 	and.w	r3, r3, #12
 8002902:	2b0c      	cmp	r3, #12
 8002904:	d0b7      	beq.n	8002876 <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002906:	f000 fb85 	bl	8003014 <HAL_GetTick>
 800290a:	1bc0      	subs	r0, r0, r7
 800290c:	4540      	cmp	r0, r8
 800290e:	d9f5      	bls.n	80028fc <HAL_RCC_ClockConfig+0xc8>
 8002910:	e7e2      	b.n	80028d8 <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002912:	f000 fb7f 	bl	8003014 <HAL_GetTick>
 8002916:	1bc0      	subs	r0, r0, r7
 8002918:	4540      	cmp	r0, r8
 800291a:	d8dd      	bhi.n	80028d8 <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800291c:	68a3      	ldr	r3, [r4, #8]
 800291e:	f013 0f0c 	tst.w	r3, #12
 8002922:	d1f6      	bne.n	8002912 <HAL_RCC_ClockConfig+0xde>
 8002924:	e7a7      	b.n	8002876 <HAL_RCC_ClockConfig+0x42>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	b2f2      	uxtb	r2, r6
 8002928:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 030f 	and.w	r3, r3, #15
 8002930:	429e      	cmp	r6, r3
 8002932:	d19b      	bne.n	800286c <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002934:	6829      	ldr	r1, [r5, #0]
 8002936:	074a      	lsls	r2, r1, #29
 8002938:	d506      	bpl.n	8002948 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800293a:	4815      	ldr	r0, [pc, #84]	; (8002990 <HAL_RCC_ClockConfig+0x15c>)
 800293c:	6883      	ldr	r3, [r0, #8]
 800293e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002942:	68eb      	ldr	r3, [r5, #12]
 8002944:	4313      	orrs	r3, r2
 8002946:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002948:	070b      	lsls	r3, r1, #28
 800294a:	d507      	bpl.n	800295c <HAL_RCC_ClockConfig+0x128>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800294c:	4a10      	ldr	r2, [pc, #64]	; (8002990 <HAL_RCC_ClockConfig+0x15c>)
 800294e:	6929      	ldr	r1, [r5, #16]
 8002950:	6893      	ldr	r3, [r2, #8]
 8002952:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002956:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800295a:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800295c:	f7ff ff02 	bl	8002764 <HAL_RCC_GetSysClockFreq>
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <HAL_RCC_ClockConfig+0x15c>)
 8002962:	22f0      	movs	r2, #240	; 0xf0
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	fa92 f2a2 	rbit	r2, r2
 800296a:	fab2 f282 	clz	r2, r2
 800296e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002972:	40d3      	lsrs	r3, r2
 8002974:	4a07      	ldr	r2, [pc, #28]	; (8002994 <HAL_RCC_ClockConfig+0x160>)
 8002976:	5cd3      	ldrb	r3, [r2, r3]
 8002978:	40d8      	lsrs	r0, r3
 800297a:	4b07      	ldr	r3, [pc, #28]	; (8002998 <HAL_RCC_ClockConfig+0x164>)
 800297c:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800297e:	2000      	movs	r0, #0
 8002980:	f7fd fc5e 	bl	8000240 <HAL_InitTick>
  
  return HAL_OK;
 8002984:	2000      	movs	r0, #0
}
 8002986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800298a:	bf00      	nop
 800298c:	40023c00 	.word	0x40023c00
 8002990:	40023800 	.word	0x40023800
 8002994:	0800318f 	.word	0x0800318f
 8002998:	20000004 	.word	0x20000004

0800299c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800299c:	4b01      	ldr	r3, [pc, #4]	; (80029a4 <HAL_RCC_GetHCLKFreq+0x8>)
 800299e:	6818      	ldr	r0, [r3, #0]
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	20000004 	.word	0x20000004

080029a8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 80029a8:	4b08      	ldr	r3, [pc, #32]	; (80029cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029aa:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	fa92 f2a2 	rbit	r2, r2
 80029b4:	fab2 f282 	clz	r2, r2
 80029b8:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80029bc:	40d3      	lsrs	r3, r2
 80029be:	4a04      	ldr	r2, [pc, #16]	; (80029d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029c0:	5cd3      	ldrb	r3, [r2, r3]
 80029c2:	4a04      	ldr	r2, [pc, #16]	; (80029d4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80029c4:	6810      	ldr	r0, [r2, #0]
}
 80029c6:	40d8      	lsrs	r0, r3
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800
 80029d0:	0800318f 	.word	0x0800318f
 80029d4:	20000004 	.word	0x20000004

080029d8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 80029d8:	4b08      	ldr	r3, [pc, #32]	; (80029fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80029da:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	fa92 f2a2 	rbit	r2, r2
 80029e4:	fab2 f282 	clz	r2, r2
 80029e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80029ec:	40d3      	lsrs	r3, r2
 80029ee:	4a04      	ldr	r2, [pc, #16]	; (8002a00 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029f0:	5cd3      	ldrb	r3, [r2, r3]
 80029f2:	4a04      	ldr	r2, [pc, #16]	; (8002a04 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80029f4:	6810      	ldr	r0, [r2, #0]
} 
 80029f6:	40d8      	lsrs	r0, r3
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40023800 	.word	0x40023800
 8002a00:	0800318f 	.word	0x0800318f
 8002a04:	20000004 	.word	0x20000004

08002a08 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a08:	230f      	movs	r3, #15
 8002a0a:	6003      	str	r3, [r0, #0]
   
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <HAL_RCC_GetClockConfig+0x34>)
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	f002 0203 	and.w	r2, r2, #3
 8002a14:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002a1c:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8002a24:	60c2      	str	r2, [r0, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	08db      	lsrs	r3, r3, #3
 8002a2a:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002a2e:	6103      	str	r3, [r0, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8002a30:	4b03      	ldr	r3, [pc, #12]	; (8002a40 <HAL_RCC_GetClockConfig+0x38>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 030f 	and.w	r3, r3, #15
 8002a38:	600b      	str	r3, [r1, #0]
 8002a3a:	4770      	bx	lr
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40023c00 	.word	0x40023c00

08002a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a48:	4f67      	ldr	r7, [pc, #412]	; (8002be8 <HAL_GPIO_Init+0x1a4>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a4a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a4c:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8002bf0 <HAL_GPIO_Init+0x1ac>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a50:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8002bf4 <HAL_GPIO_Init+0x1b0>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a54:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a56:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a58:	9301      	str	r3, [sp, #4]
 8002a5a:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8002a5c:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8002a5e:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8002a60:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8002a62:	ea34 0303 	bics.w	r3, r4, r3
 8002a66:	f040 80b7 	bne.w	8002bd8 <HAL_GPIO_Init+0x194>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a6a:	684d      	ldr	r5, [r1, #4]
 8002a6c:	f025 0a10 	bic.w	sl, r5, #16
 8002a70:	f1ba 0f02 	cmp.w	sl, #2
 8002a74:	d114      	bne.n	8002aa0 <HAL_GPIO_Init+0x5c>
 8002a76:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 8002a7a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8002a7e:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a82:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8002a86:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002a8a:	230f      	movs	r3, #15
 8002a8c:	fa03 f30b 	lsl.w	r3, r3, fp
 8002a90:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002a94:	690b      	ldr	r3, [r1, #16]
 8002a96:	fa03 f30b 	lsl.w	r3, r3, fp
 8002a9a:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 8002a9c:	f8c9 3020 	str.w	r3, [r9, #32]
 8002aa0:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aa4:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aa8:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aaa:	fa09 f90b 	lsl.w	r9, r9, fp
 8002aae:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ab2:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ab6:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002aba:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002abe:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ac2:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ac4:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 8002ac8:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002aca:	d80f      	bhi.n	8002aec <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002acc:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ace:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ad0:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ad4:	fa06 f60b 	lsl.w	r6, r6, fp
 8002ad8:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 8002ada:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002adc:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ade:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ae2:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ae6:	4096      	lsls	r6, r2
 8002ae8:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8002aea:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002aec:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aee:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002af2:	688b      	ldr	r3, [r1, #8]
 8002af4:	fa03 f30b 	lsl.w	r3, r3, fp
 8002af8:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8002afc:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002afe:	00eb      	lsls	r3, r5, #3
 8002b00:	d56a      	bpl.n	8002bd8 <HAL_GPIO_Init+0x194>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	9303      	str	r3, [sp, #12]
 8002b06:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b0a:	4b38      	ldr	r3, [pc, #224]	; (8002bec <HAL_GPIO_Init+0x1a8>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b0c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8002b10:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 8002b14:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 8002b18:	f022 0903 	bic.w	r9, r2, #3
 8002b1c:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8002b20:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8002b24:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 8002b28:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002b2a:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b2e:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b30:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002b34:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8002b38:	260f      	movs	r6, #15
 8002b3a:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b3e:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8002b40:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b44:	d018      	beq.n	8002b78 <HAL_GPIO_Init+0x134>
 8002b46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b4a:	4298      	cmp	r0, r3
 8002b4c:	d016      	beq.n	8002b7c <HAL_GPIO_Init+0x138>
 8002b4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b52:	4298      	cmp	r0, r3
 8002b54:	d014      	beq.n	8002b80 <HAL_GPIO_Init+0x13c>
 8002b56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b5a:	4298      	cmp	r0, r3
 8002b5c:	d012      	beq.n	8002b84 <HAL_GPIO_Init+0x140>
 8002b5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b62:	4298      	cmp	r0, r3
 8002b64:	d010      	beq.n	8002b88 <HAL_GPIO_Init+0x144>
 8002b66:	4540      	cmp	r0, r8
 8002b68:	d010      	beq.n	8002b8c <HAL_GPIO_Init+0x148>
 8002b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b6e:	4298      	cmp	r0, r3
 8002b70:	bf14      	ite	ne
 8002b72:	2308      	movne	r3, #8
 8002b74:	2306      	moveq	r3, #6
 8002b76:	e00a      	b.n	8002b8e <HAL_GPIO_Init+0x14a>
 8002b78:	2300      	movs	r3, #0
 8002b7a:	e008      	b.n	8002b8e <HAL_GPIO_Init+0x14a>
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	e006      	b.n	8002b8e <HAL_GPIO_Init+0x14a>
 8002b80:	2302      	movs	r3, #2
 8002b82:	e004      	b.n	8002b8e <HAL_GPIO_Init+0x14a>
 8002b84:	2303      	movs	r3, #3
 8002b86:	e002      	b.n	8002b8e <HAL_GPIO_Init+0x14a>
 8002b88:	2304      	movs	r3, #4
 8002b8a:	e000      	b.n	8002b8e <HAL_GPIO_Init+0x14a>
 8002b8c:	2305      	movs	r3, #5
 8002b8e:	fa03 f30a 	lsl.w	r3, r3, sl
 8002b92:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b94:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b98:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 8002b9a:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b9c:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8002ba0:	bf0c      	ite	eq
 8002ba2:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8002ba4:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 8002ba6:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8002baa:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002bae:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8002bb2:	bf0c      	ite	eq
 8002bb4:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8002bb6:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 8002bb8:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bba:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bbc:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8002bc0:	bf0c      	ite	eq
 8002bc2:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8002bc4:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 8002bc6:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8002bca:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002bce:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8002bd0:	bf54      	ite	pl
 8002bd2:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8002bd4:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 8002bd6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bd8:	3201      	adds	r2, #1
 8002bda:	2a10      	cmp	r2, #16
 8002bdc:	f47f af3e 	bne.w	8002a5c <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8002be0:	b005      	add	sp, #20
 8002be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002be6:	bf00      	nop
 8002be8:	40013c00 	.word	0x40013c00
 8002bec:	40020000 	.word	0x40020000
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40021400 	.word	0x40021400

08002bf8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bf8:	6903      	ldr	r3, [r0, #16]
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8002bfa:	4219      	tst	r1, r3
}
 8002bfc:	bf14      	ite	ne
 8002bfe:	2001      	movne	r0, #1
 8002c00:	2000      	moveq	r0, #0
 8002c02:	4770      	bx	lr

08002c04 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c04:	b902      	cbnz	r2, 8002c08 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c06:	0409      	lsls	r1, r1, #16
 8002c08:	6181      	str	r1, [r0, #24]
 8002c0a:	4770      	bx	lr

08002c0c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002c0c:	6943      	ldr	r3, [r0, #20]
 8002c0e:	4059      	eors	r1, r3
 8002c10:	6141      	str	r1, [r0, #20]
 8002c12:	4770      	bx	lr

08002c14 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002c14:	4770      	bx	lr
	...

08002c18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c18:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c1a:	4b04      	ldr	r3, [pc, #16]	; (8002c2c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8002c1c:	6959      	ldr	r1, [r3, #20]
 8002c1e:	4201      	tst	r1, r0
 8002c20:	d002      	beq.n	8002c28 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c22:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c24:	f7ff fff6 	bl	8002c14 <HAL_GPIO_EXTI_Callback>
 8002c28:	bd08      	pop	{r3, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40013c00 	.word	0x40013c00

08002c30 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c30:	6803      	ldr	r3, [r0, #0]
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c38:	f023 0303 	bic.w	r3, r3, #3
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c3c:	2118      	movs	r1, #24
 8002c3e:	3a10      	subs	r2, #16
 8002c40:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c44:	4904      	ldr	r1, [pc, #16]	; (8002c58 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8002c46:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c48:	bf88      	it	hi
 8002c4a:	3304      	addhi	r3, #4
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c4c:	5c89      	ldrb	r1, [r1, r2]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c4e:	6583      	str	r3, [r0, #88]	; 0x58
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c50:	65c1      	str	r1, [r0, #92]	; 0x5c
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8002c52:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	0800319f 	.word	0x0800319f

08002c5c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c5c:	b570      	push	{r4, r5, r6, lr}
 8002c5e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8002c60:	f000 f9d8 	bl	8003014 <HAL_GetTick>
 8002c64:	4605      	mov	r5, r0
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c66:	2c00      	cmp	r4, #0
 8002c68:	d064      	beq.n	8002d34 <HAL_DMA_Init+0xd8>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c70:	6822      	ldr	r2, [r4, #0]
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c72:	2302      	movs	r3, #2
 8002c74:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c78:	6813      	ldr	r3, [r2, #0]
 8002c7a:	f023 0301 	bic.w	r3, r3, #1
 8002c7e:	6013      	str	r3, [r2, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c80:	6821      	ldr	r1, [r4, #0]
 8002c82:	680b      	ldr	r3, [r1, #0]
 8002c84:	07d8      	lsls	r0, r3, #31
 8002c86:	d508      	bpl.n	8002c9a <HAL_DMA_Init+0x3e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c88:	f000 f9c4 	bl	8003014 <HAL_GetTick>
 8002c8c:	1b40      	subs	r0, r0, r5
 8002c8e:	2805      	cmp	r0, #5
 8002c90:	d9f6      	bls.n	8002c80 <HAL_DMA_Init+0x24>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c92:	2320      	movs	r3, #32
 8002c94:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c96:	2003      	movs	r0, #3
 8002c98:	e051      	b.n	8002d3e <HAL_DMA_Init+0xe2>
      return HAL_TIMEOUT;
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c9a:	680b      	ldr	r3, [r1, #0]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c9c:	4a29      	ldr	r2, [pc, #164]	; (8002d44 <HAL_DMA_Init+0xe8>)
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c9e:	6865      	ldr	r5, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ca0:	69a0      	ldr	r0, [r4, #24]
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002ca2:	401a      	ands	r2, r3
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ca4:	68a3      	ldr	r3, [r4, #8]
 8002ca6:	431d      	orrs	r5, r3
 8002ca8:	68e3      	ldr	r3, [r4, #12]
 8002caa:	431d      	orrs	r5, r3
 8002cac:	6923      	ldr	r3, [r4, #16]
 8002cae:	431d      	orrs	r5, r3
 8002cb0:	6963      	ldr	r3, [r4, #20]
 8002cb2:	432b      	orrs	r3, r5
 8002cb4:	69e5      	ldr	r5, [r4, #28]
 8002cb6:	4303      	orrs	r3, r0
 8002cb8:	432b      	orrs	r3, r5
 8002cba:	6a25      	ldr	r5, [r4, #32]
 8002cbc:	432b      	orrs	r3, r5
 8002cbe:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cc0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002cc2:	2a04      	cmp	r2, #4
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cc4:	bf01      	itttt	eq
 8002cc6:	6b25      	ldreq	r5, [r4, #48]	; 0x30
 8002cc8:	6ae6      	ldreq	r6, [r4, #44]	; 0x2c
 8002cca:	4335      	orreq	r5, r6
 8002ccc:	432b      	orreq	r3, r5
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002cce:	600b      	str	r3, [r1, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002cd0:	694b      	ldr	r3, [r1, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cd2:	2a04      	cmp	r2, #4

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cd4:	f023 0307 	bic.w	r3, r3, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cd8:	ea43 0302 	orr.w	r3, r3, r2

  /* the FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cdc:	d11c      	bne.n	8002d18 <HAL_DMA_Init+0xbc>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cde:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002ce0:	4313      	orrs	r3, r2
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ce2:	b920      	cbnz	r0, 8002cee <HAL_DMA_Init+0x92>
  {
    switch (tmp)
 8002ce4:	2a01      	cmp	r2, #1
 8002ce6:	d00b      	beq.n	8002d00 <HAL_DMA_Init+0xa4>
 8002ce8:	d313      	bcc.n	8002d12 <HAL_DMA_Init+0xb6>
 8002cea:	2a02      	cmp	r2, #2
 8002cec:	e010      	b.n	8002d10 <HAL_DMA_Init+0xb4>
        break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cee:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002cf2:	d10a      	bne.n	8002d0a <HAL_DMA_Init+0xae>
  {
    switch (tmp)
 8002cf4:	2a03      	cmp	r2, #3
 8002cf6:	d80f      	bhi.n	8002d18 <HAL_DMA_Init+0xbc>
 8002cf8:	e8df f002 	tbb	[pc, r2]
 8002cfc:	021e0b1e 	.word	0x021e0b1e
        break;
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d00:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002d02:	f1b2 7fc0 	cmp.w	r2, #25165824	; 0x1800000
 8002d06:	d107      	bne.n	8002d18 <HAL_DMA_Init+0xbc>
 8002d08:	e016      	b.n	8002d38 <HAL_DMA_Init+0xdc>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d0a:	2a02      	cmp	r2, #2
 8002d0c:	d914      	bls.n	8002d38 <HAL_DMA_Init+0xdc>
 8002d0e:	2a03      	cmp	r2, #3
 8002d10:	d102      	bne.n	8002d18 <HAL_DMA_Init+0xbc>
      case DMA_FIFO_THRESHOLD_HALFFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
        break;
      case DMA_FIFO_THRESHOLD_FULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002d14:	01d2      	lsls	r2, r2, #7
 8002d16:	d40f      	bmi.n	8002d38 <HAL_DMA_Init+0xdc>
      return HAL_ERROR; 
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d18:	614b      	str	r3, [r1, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	f7ff ff88 	bl	8002c30 <DMA_CalcBaseAndBitshift>
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d20:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002d22:	233f      	movs	r3, #63	; 0x3f
 8002d24:	4093      	lsls	r3, r2
 8002d26:	6083      	str	r3, [r0, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d28:	2000      	movs	r0, #0
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d2a:	2301      	movs	r3, #1
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d2c:	6560      	str	r0, [r4, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d2e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

  return HAL_OK;
 8002d32:	bd70      	pop	{r4, r5, r6, pc}
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8002d34:	2001      	movs	r0, #1
 8002d36:	bd70      	pop	{r4, r5, r6, pc}
    tmp |= hdma->Init.FIFOThreshold;
    
    if(DMA_CheckFifoParam(hdma) != HAL_OK)
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d38:	2340      	movs	r3, #64	; 0x40
 8002d3a:	6563      	str	r3, [r4, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d3c:	2001      	movs	r0, #1
 8002d3e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  return HAL_OK;
}
 8002d42:	bd70      	pop	{r4, r5, r6, pc}
 8002d44:	f010803f 	.word	0xf010803f

08002d48 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d48:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d003      	beq.n	8002d58 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d50:	2380      	movs	r3, #128	; 0x80
 8002d52:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8002d54:	2001      	movs	r0, #1
 8002d56:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d58:	6802      	ldr	r2, [r0, #0]
    return HAL_ERROR;
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d5a:	2305      	movs	r3, #5
 8002d5c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d60:	6813      	ldr	r3, [r2, #0]
 8002d62:	f023 0301 	bic.w	r3, r3, #1
 8002d66:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8002d68:	2000      	movs	r0, #0
}
 8002d6a:	4770      	bx	lr

08002d6c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600;

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d72:	6d85      	ldr	r5, [r0, #88]	; 0x58
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8002d74:	4b59      	ldr	r3, [pc, #356]	; (8002edc <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d76:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8002d78:	681f      	ldr	r7, [r3, #0]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;
 8002d7a:	682e      	ldr	r6, [r5, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d7c:	2308      	movs	r3, #8
 8002d7e:	4093      	lsls	r3, r2
 8002d80:	421e      	tst	r6, r3
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d82:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d84:	d00c      	beq.n	8002da0 <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d86:	6801      	ldr	r1, [r0, #0]
 8002d88:	6808      	ldr	r0, [r1, #0]
 8002d8a:	0740      	lsls	r0, r0, #29
 8002d8c:	d508      	bpl.n	8002da0 <HAL_DMA_IRQHandler+0x34>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d8e:	6808      	ldr	r0, [r1, #0]
 8002d90:	f020 0004 	bic.w	r0, r0, #4
 8002d94:	6008      	str	r0, [r1, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d96:	60ab      	str	r3, [r5, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d98:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002d9a:	f043 0301 	orr.w	r3, r3, #1
 8002d9e:	6563      	str	r3, [r4, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002da0:	4b4f      	ldr	r3, [pc, #316]	; (8002ee0 <HAL_DMA_IRQHandler+0x174>)
 8002da2:	4093      	lsls	r3, r2
 8002da4:	421e      	tst	r6, r3
 8002da6:	d008      	beq.n	8002dba <HAL_DMA_IRQHandler+0x4e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002da8:	6821      	ldr	r1, [r4, #0]
 8002daa:	6949      	ldr	r1, [r1, #20]
 8002dac:	0609      	lsls	r1, r1, #24
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002dae:	bf41      	itttt	mi
 8002db0:	60ab      	strmi	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002db2:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 8002db4:	f043 0302 	orrmi.w	r3, r3, #2
 8002db8:	6563      	strmi	r3, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dba:	4b4a      	ldr	r3, [pc, #296]	; (8002ee4 <HAL_DMA_IRQHandler+0x178>)
 8002dbc:	4093      	lsls	r3, r2
 8002dbe:	421e      	tst	r6, r3
 8002dc0:	d008      	beq.n	8002dd4 <HAL_DMA_IRQHandler+0x68>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002dc2:	6821      	ldr	r1, [r4, #0]
 8002dc4:	6809      	ldr	r1, [r1, #0]
 8002dc6:	0788      	lsls	r0, r1, #30
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002dc8:	bf41      	itttt	mi
 8002dca:	60ab      	strmi	r3, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002dcc:	6d63      	ldrmi	r3, [r4, #84]	; 0x54
 8002dce:	f043 0304 	orrmi.w	r3, r3, #4
 8002dd2:	6563      	strmi	r3, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002dd4:	2310      	movs	r3, #16
 8002dd6:	fa03 f202 	lsl.w	r2, r3, r2
 8002dda:	4216      	tst	r6, r2
 8002ddc:	d017      	beq.n	8002e0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002dde:	6823      	ldr	r3, [r4, #0]
 8002de0:	6819      	ldr	r1, [r3, #0]
 8002de2:	0709      	lsls	r1, r1, #28
 8002de4:	d513      	bpl.n	8002e0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002de6:	60aa      	str	r2, [r5, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	0350      	lsls	r0, r2, #13
 8002dec:	d504      	bpl.n	8002df8 <HAL_DMA_IRQHandler+0x8c>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	0319      	lsls	r1, r3, #12
 8002df2:	d508      	bpl.n	8002e06 <HAL_DMA_IRQHandler+0x9a>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002df4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002df6:	e007      	b.n	8002e08 <HAL_DMA_IRQHandler+0x9c>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	05d2      	lsls	r2, r2, #23
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dfc:	bf5e      	ittt	pl
 8002dfe:	681a      	ldrpl	r2, [r3, #0]
 8002e00:	f022 0208 	bicpl.w	r2, r2, #8
 8002e04:	601a      	strpl	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e08:	b10b      	cbz	r3, 8002e0e <HAL_DMA_IRQHandler+0xa2>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e0e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002e10:	2220      	movs	r2, #32
 8002e12:	408a      	lsls	r2, r1
 8002e14:	4216      	tst	r6, r2
 8002e16:	d03b      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x124>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e18:	6823      	ldr	r3, [r4, #0]
 8002e1a:	6818      	ldr	r0, [r3, #0]
 8002e1c:	06c6      	lsls	r6, r0, #27
 8002e1e:	d537      	bpl.n	8002e90 <HAL_DMA_IRQHandler+0x124>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e20:	60aa      	str	r2, [r5, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e22:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8002e26:	2a05      	cmp	r2, #5
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e28:	681a      	ldr	r2, [r3, #0]
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e2a:	d119      	bne.n	8002e60 <HAL_DMA_IRQHandler+0xf4>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e2c:	f022 0216 	bic.w	r2, r2, #22
 8002e30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e32:	695a      	ldr	r2, [r3, #20]
 8002e34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e3a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002e3c:	b90a      	cbnz	r2, 8002e42 <HAL_DMA_IRQHandler+0xd6>
 8002e3e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002e40:	b11a      	cbz	r2, 8002e4a <HAL_DMA_IRQHandler+0xde>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	f022 0208 	bic.w	r2, r2, #8
 8002e48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e4a:	233f      	movs	r3, #63	; 0x3f
 8002e4c:	408b      	lsls	r3, r1
 8002e4e:	60ab      	str	r3, [r5, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e50:	2300      	movs	r3, #0
 8002e52:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e56:	2301      	movs	r3, #1
 8002e58:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002e5c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002e5e:	e037      	b.n	8002ed0 <HAL_DMA_IRQHandler+0x164>
          hdma->XferAbortCallback(hdma);
        }
        return;
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e60:	0350      	lsls	r0, r2, #13
 8002e62:	d504      	bpl.n	8002e6e <HAL_DMA_IRQHandler+0x102>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	0319      	lsls	r1, r3, #12
 8002e68:	d40e      	bmi.n	8002e88 <HAL_DMA_IRQHandler+0x11c>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002e6c:	e00d      	b.n	8002e8a <HAL_DMA_IRQHandler+0x11e>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8002e74:	d108      	bne.n	8002e88 <HAL_DMA_IRQHandler+0x11c>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e76:	6819      	ldr	r1, [r3, #0]
 8002e78:	f021 0110 	bic.w	r1, r1, #16
 8002e7c:	6019      	str	r1, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e7e:	2301      	movs	r3, #1
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e80:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e84:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002e88:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002e8a:	b10b      	cbz	r3, 8002e90 <HAL_DMA_IRQHandler+0x124>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e90:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e92:	b303      	cbz	r3, 8002ed6 <HAL_DMA_IRQHandler+0x16a>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e94:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002e96:	07da      	lsls	r2, r3, #31
 8002e98:	d519      	bpl.n	8002ece <HAL_DMA_IRQHandler+0x162>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e9a:	2305      	movs	r3, #5

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e9c:	6822      	ldr	r2, [r4, #0]
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e9e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ea2:	6813      	ldr	r3, [r2, #0]
 8002ea4:	f023 0301 	bic.w	r3, r3, #1
 8002ea8:	6013      	str	r3, [r2, #0]
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
  uint32_t tmpisr;
  __IO uint32_t count = 0;
  uint32_t timeout = SystemCoreClock / 9600;
 8002eaa:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002eae:	fbb7 f7f3 	udiv	r7, r7, r3
      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);

      do
      {
        if (++count > timeout)
 8002eb2:	9b01      	ldr	r3, [sp, #4]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	429f      	cmp	r7, r3
 8002eb8:	9301      	str	r3, [sp, #4]
 8002eba:	d302      	bcc.n	8002ec2 <HAL_DMA_IRQHandler+0x156>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ebc:	6813      	ldr	r3, [r2, #0]
 8002ebe:	07db      	lsls	r3, r3, #31
 8002ec0:	d4f7      	bmi.n	8002eb2 <HAL_DMA_IRQHandler+0x146>

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002ece:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002ed0:	b10b      	cbz	r3, 8002ed6 <HAL_DMA_IRQHandler+0x16a>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ed2:	4620      	mov	r0, r4
 8002ed4:	4798      	blx	r3
    }
  }
}
 8002ed6:	b003      	add	sp, #12
 8002ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20000004 	.word	0x20000004
 8002ee0:	00800001 	.word	0x00800001
 8002ee4:	00800004 	.word	0x00800004

08002ee8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ee8:	4a07      	ldr	r2, [pc, #28]	; (8002f08 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002eea:	68d3      	ldr	r3, [r2, #12]
 8002eec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ef0:	041b      	lsls	r3, r3, #16
 8002ef2:	0c1b      	lsrs	r3, r3, #16
 8002ef4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8002ef8:	0200      	lsls	r0, r0, #8
 8002efa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002efe:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8002f02:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8002f04:	60d3      	str	r3, [r2, #12]
 8002f06:	4770      	bx	lr
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f0c:	4b17      	ldr	r3, [pc, #92]	; (8002f6c <HAL_NVIC_SetPriority+0x60>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f10:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f14:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f16:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f1a:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f1c:	2c04      	cmp	r4, #4
 8002f1e:	bf28      	it	cs
 8002f20:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f22:	2d06      	cmp	r5, #6

  return (
 8002f24:	f04f 0501 	mov.w	r5, #1
 8002f28:	fa05 f404 	lsl.w	r4, r5, r4
 8002f2c:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f30:	bf8c      	ite	hi
 8002f32:	3b03      	subhi	r3, #3
 8002f34:	2300      	movls	r3, #0

  return (
 8002f36:	400c      	ands	r4, r1
 8002f38:	409c      	lsls	r4, r3
 8002f3a:	fa05 f303 	lsl.w	r3, r5, r3
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8002f42:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8002f44:	ea42 0204 	orr.w	r2, r2, r4
 8002f48:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f4c:	bfaf      	iteee	ge
 8002f4e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f52:	f000 000f 	andlt.w	r0, r0, #15
 8002f56:	4b06      	ldrlt	r3, [pc, #24]	; (8002f70 <HAL_NVIC_SetPriority+0x64>)
 8002f58:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f5a:	bfa5      	ittet	ge
 8002f5c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8002f60:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f62:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f64:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8002f68:	bd30      	pop	{r4, r5, pc}
 8002f6a:	bf00      	nop
 8002f6c:	e000ed00 	.word	0xe000ed00
 8002f70:	e000ed14 	.word	0xe000ed14

08002f74 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002f74:	0942      	lsrs	r2, r0, #5
 8002f76:	2301      	movs	r3, #1
 8002f78:	f000 001f 	and.w	r0, r0, #31
 8002f7c:	fa03 f000 	lsl.w	r0, r3, r0
 8002f80:	4b01      	ldr	r3, [pc, #4]	; (8002f88 <HAL_NVIC_EnableIRQ+0x14>)
 8002f82:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002f86:	4770      	bx	lr
 8002f88:	e000e100 	.word	0xe000e100

08002f8c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f8c:	3801      	subs	r0, #1
 8002f8e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002f92:	d20a      	bcs.n	8002faa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f94:	4b06      	ldr	r3, [pc, #24]	; (8002fb0 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f96:	4a07      	ldr	r2, [pc, #28]	; (8002fb4 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f98:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f9a:	21f0      	movs	r1, #240	; 0xf0
 8002f9c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fa0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fa2:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fa4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8002faa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	e000e010 	.word	0xe000e010
 8002fb4:	e000ed00 	.word	0xe000ed00

08002fb8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002fb8:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002fba:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002fbc:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002fbe:	bf0c      	ite	eq
 8002fc0:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002fc4:	f022 0204 	bicne.w	r2, r2, #4
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	4770      	bx	lr
 8002fcc:	e000e010 	.word	0xe000e010

08002fd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fd0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fd2:	4b0b      	ldr	r3, [pc, #44]	; (8003000 <HAL_Init+0x30>)
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fda:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fe2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fea:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fec:	2003      	movs	r0, #3
 8002fee:	f7ff ff7b 	bl	8002ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	f7fd f924 	bl	8000240 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002ff8:	f7fd f960 	bl	80002bc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	bd08      	pop	{r3, pc}
 8003000:	40023c00 	.word	0x40023c00

08003004 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8003004:	4a02      	ldr	r2, [pc, #8]	; (8003010 <HAL_IncTick+0xc>)
 8003006:	6813      	ldr	r3, [r2, #0]
 8003008:	3301      	adds	r3, #1
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	20003eb4 	.word	0x20003eb4

08003014 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003014:	4b01      	ldr	r3, [pc, #4]	; (800301c <HAL_GetTick+0x8>)
 8003016:	6818      	ldr	r0, [r3, #0]
}
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	20003eb4 	.word	0x20003eb4

08003020 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003020:	490f      	ldr	r1, [pc, #60]	; (8003060 <SystemInit+0x40>)
 8003022:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003026:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800302a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800302e:	4b0d      	ldr	r3, [pc, #52]	; (8003064 <SystemInit+0x44>)
 8003030:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003032:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003034:	f042 0201 	orr.w	r2, r2, #1
 8003038:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800303a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003042:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003046:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003048:	4a07      	ldr	r2, [pc, #28]	; (8003068 <SystemInit+0x48>)
 800304a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003052:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003054:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003056:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800305a:	608b      	str	r3, [r1, #8]
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	e000ed00 	.word	0xe000ed00
 8003064:	40023800 	.word	0x40023800
 8003068:	24003010 	.word	0x24003010

0800306c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800306c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003070:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003072:	e003      	b.n	800307c <LoopCopyDataInit>

08003074 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003074:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003076:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003078:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800307a:	3104      	adds	r1, #4

0800307c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800307c:	480b      	ldr	r0, [pc, #44]	; (80030ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800307e:	4b0c      	ldr	r3, [pc, #48]	; (80030b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003080:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003082:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003084:	d3f6      	bcc.n	8003074 <CopyDataInit>
  ldr  r2, =_sbss
 8003086:	4a0b      	ldr	r2, [pc, #44]	; (80030b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003088:	e002      	b.n	8003090 <LoopFillZerobss>

0800308a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800308a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800308c:	f842 3b04 	str.w	r3, [r2], #4

08003090 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003090:	4b09      	ldr	r3, [pc, #36]	; (80030b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003092:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003094:	d3f9      	bcc.n	800308a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003096:	f7ff ffc3 	bl	8003020 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800309a:	f000 f811 	bl	80030c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800309e:	f7fd fa2d 	bl	80004fc <main>
  bx  lr    
 80030a2:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80030a4:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 80030a8:	080031b0 	.word	0x080031b0
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80030ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80030b0:	20000008 	.word	0x20000008
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 80030b4:	20000008 	.word	0x20000008
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80030b8:	20003eb8 	.word	0x20003eb8

080030bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030bc:	e7fe      	b.n	80030bc <ADC_IRQHandler>
	...

080030c0 <__libc_init_array>:
 80030c0:	b570      	push	{r4, r5, r6, lr}
 80030c2:	4b0e      	ldr	r3, [pc, #56]	; (80030fc <__libc_init_array+0x3c>)
 80030c4:	4c0e      	ldr	r4, [pc, #56]	; (8003100 <__libc_init_array+0x40>)
 80030c6:	1ae4      	subs	r4, r4, r3
 80030c8:	10a4      	asrs	r4, r4, #2
 80030ca:	2500      	movs	r5, #0
 80030cc:	461e      	mov	r6, r3
 80030ce:	42a5      	cmp	r5, r4
 80030d0:	d004      	beq.n	80030dc <__libc_init_array+0x1c>
 80030d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030d6:	4798      	blx	r3
 80030d8:	3501      	adds	r5, #1
 80030da:	e7f8      	b.n	80030ce <__libc_init_array+0xe>
 80030dc:	f000 f82a 	bl	8003134 <_init>
 80030e0:	4c08      	ldr	r4, [pc, #32]	; (8003104 <__libc_init_array+0x44>)
 80030e2:	4b09      	ldr	r3, [pc, #36]	; (8003108 <__libc_init_array+0x48>)
 80030e4:	1ae4      	subs	r4, r4, r3
 80030e6:	10a4      	asrs	r4, r4, #2
 80030e8:	2500      	movs	r5, #0
 80030ea:	461e      	mov	r6, r3
 80030ec:	42a5      	cmp	r5, r4
 80030ee:	d004      	beq.n	80030fa <__libc_init_array+0x3a>
 80030f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030f4:	4798      	blx	r3
 80030f6:	3501      	adds	r5, #1
 80030f8:	e7f8      	b.n	80030ec <__libc_init_array+0x2c>
 80030fa:	bd70      	pop	{r4, r5, r6, pc}
 80030fc:	080031a8 	.word	0x080031a8
 8003100:	080031a8 	.word	0x080031a8
 8003104:	080031ac 	.word	0x080031ac
 8003108:	080031a8 	.word	0x080031a8

0800310c <memcpy>:
 800310c:	b510      	push	{r4, lr}
 800310e:	1e43      	subs	r3, r0, #1
 8003110:	440a      	add	r2, r1
 8003112:	4291      	cmp	r1, r2
 8003114:	d004      	beq.n	8003120 <memcpy+0x14>
 8003116:	f811 4b01 	ldrb.w	r4, [r1], #1
 800311a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800311e:	e7f8      	b.n	8003112 <memcpy+0x6>
 8003120:	bd10      	pop	{r4, pc}

08003122 <memset>:
 8003122:	4402      	add	r2, r0
 8003124:	4603      	mov	r3, r0
 8003126:	4293      	cmp	r3, r2
 8003128:	d002      	beq.n	8003130 <memset+0xe>
 800312a:	f803 1b01 	strb.w	r1, [r3], #1
 800312e:	e7fa      	b.n	8003126 <memset+0x4>
 8003130:	4770      	bx	lr
	...

08003134 <_init>:
 8003134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003136:	bf00      	nop
 8003138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800313a:	bc08      	pop	{r3}
 800313c:	469e      	mov	lr, r3
 800313e:	4770      	bx	lr

08003140 <_fini>:
 8003140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003142:	bf00      	nop
 8003144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003146:	bc08      	pop	{r3}
 8003148:	469e      	mov	lr, r3
 800314a:	4770      	bx	lr
