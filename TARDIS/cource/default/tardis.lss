
tardis.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  000001ac  00000220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000908  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000088  00000000  00000000  00000990  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005aa  00000000  00000000  00000a18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001b3  00000000  00000000  00000fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000371  00000000  00000000  00001175  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  000014e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000128  00000000  00000000  000015a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000012b  00000000  00000000  000016cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  000017f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	90 c0       	rjmp	.+288    	; 0x124 <__vector_1>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ec ea       	ldi	r30, 0xAC	; 172
  32:	f1 e0       	ldi	r31, 0x01	; 1
  34:	02 c0       	rjmp	.+4      	; 0x3a <__CCP__+0x6>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	ac 37       	cpi	r26, 0x7C	; 124
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__CCP__+0x2>

00000040 <__do_clear_bss>:
  40:	10 e0       	ldi	r17, 0x00	; 0
  42:	ac e7       	ldi	r26, 0x7C	; 124
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	ac 37       	cpi	r26, 0x7C	; 124
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	98 d0       	rcall	.+304    	; 0x182 <main>
  52:	aa c0       	rjmp	.+340    	; 0x1a8 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <fade_in>:
#define F_CPU 8000000UL	

static char tardis[]={0,0,2,5,10,16,24,33,43,54,67,80,94,109,124,139,154,168,182,195,208,219,229,237,244,250,253,255};
static char tardis_count = 3;

void fade_in(){
  56:	e0 e6       	ldi	r30, 0x60	; 96
  58:	f0 e0       	ldi	r31, 0x00	; 0
  5a:	8c e1       	ldi	r24, 0x1C	; 28
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  5c:	af e5       	ldi	r26, 0x5F	; 95
  5e:	ba ee       	ldi	r27, 0xEA	; 234
  60:	11 97       	sbiw	r26, 0x01	; 1
  62:	f1 f7       	brne	.-4      	; 0x60 <fade_in+0xa>
  64:	00 c0       	rjmp	.+0      	; 0x66 <fade_in+0x10>
  66:	00 00       	nop
	for (char i=0;i<(sizeof(tardis)/sizeof(tardis[0]));i++){
	_delay_ms(30);
	OCR0B = tardis[i];
  68:	91 91       	ld	r25, Z+
  6a:	98 bd       	out	0x28, r25	; 40
  6c:	81 50       	subi	r24, 0x01	; 1

static char tardis[]={0,0,2,5,10,16,24,33,43,54,67,80,94,109,124,139,154,168,182,195,208,219,229,237,244,250,253,255};
static char tardis_count = 3;

void fade_in(){
	for (char i=0;i<(sizeof(tardis)/sizeof(tardis[0]));i++){
  6e:	b1 f7       	brne	.-20     	; 0x5c <fade_in+0x6>
	_delay_ms(30);
	OCR0B = tardis[i];
	}
}
  70:	08 95       	ret

00000072 <fade_out>:

void fade_out(){
  72:	ec e7       	ldi	r30, 0x7C	; 124
  74:	f0 e0       	ldi	r31, 0x00	; 0
  76:	8b e1       	ldi	r24, 0x1B	; 27
	for (char i=(sizeof(tardis)/sizeof(tardis[0]))-1;i>0;i--){
	OCR0B = tardis[i];
  78:	92 91       	ld	r25, -Z
  7a:	98 bd       	out	0x28, r25	; 40
  7c:	af e5       	ldi	r26, 0x5F	; 95
  7e:	ba ee       	ldi	r27, 0xEA	; 234
  80:	11 97       	sbiw	r26, 0x01	; 1
  82:	f1 f7       	brne	.-4      	; 0x80 <fade_out+0xe>
  84:	00 c0       	rjmp	.+0      	; 0x86 <fade_out+0x14>
  86:	00 00       	nop
  88:	81 50       	subi	r24, 0x01	; 1
	OCR0B = tardis[i];
	}
}

void fade_out(){
	for (char i=(sizeof(tardis)/sizeof(tardis[0]))-1;i>0;i--){
  8a:	b1 f7       	brne	.-20     	; 0x78 <fade_out+0x6>
	OCR0B = tardis[i];
	_delay_ms(30);
	}
}
  8c:	08 95       	ret

0000008e <tardis_light>:

void tardis_light(){
	for(char i=0; i<tardis_count;i++){
		fade_in();
  8e:	e3 df       	rcall	.-58     	; 0x56 <fade_in>
  90:	8f e7       	ldi	r24, 0x7F	; 127
  92:	9a e1       	ldi	r25, 0x1A	; 26
  94:	a6 e0       	ldi	r26, 0x06	; 6
  96:	81 50       	subi	r24, 0x01	; 1
  98:	90 40       	sbci	r25, 0x00	; 0
  9a:	a0 40       	sbci	r26, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <tardis_light+0x8>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <tardis_light+0x12>
  a0:	00 00       	nop
		_delay_ms(250);
		fade_out();
  a2:	e7 df       	rcall	.-50     	; 0x72 <fade_out>
  a4:	8f e7       	ldi	r24, 0x7F	; 127
  a6:	9a e1       	ldi	r25, 0x1A	; 26
  a8:	a6 e0       	ldi	r26, 0x06	; 6
  aa:	81 50       	subi	r24, 0x01	; 1
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	a0 40       	sbci	r26, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <tardis_light+0x1c>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <tardis_light+0x26>
  b4:	00 00       	nop
	}
}

void tardis_light(){
	for(char i=0; i<tardis_count;i++){
		fade_in();
  b6:	cf df       	rcall	.-98     	; 0x56 <fade_in>
  b8:	8f e7       	ldi	r24, 0x7F	; 127
  ba:	9a e1       	ldi	r25, 0x1A	; 26
  bc:	a6 e0       	ldi	r26, 0x06	; 6
  be:	81 50       	subi	r24, 0x01	; 1
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	a0 40       	sbci	r26, 0x00	; 0
  c4:	e1 f7       	brne	.-8      	; 0xbe <tardis_light+0x30>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <tardis_light+0x3a>
  c8:	00 00       	nop
		_delay_ms(250);
		fade_out();
  ca:	d3 df       	rcall	.-90     	; 0x72 <fade_out>
  cc:	8f e7       	ldi	r24, 0x7F	; 127
  ce:	9a e1       	ldi	r25, 0x1A	; 26
  d0:	a6 e0       	ldi	r26, 0x06	; 6
  d2:	81 50       	subi	r24, 0x01	; 1
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	a0 40       	sbci	r26, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <tardis_light+0x44>
  da:	00 c0       	rjmp	.+0      	; 0xdc <tardis_light+0x4e>
  dc:	00 00       	nop
	}
}

void tardis_light(){
	for(char i=0; i<tardis_count;i++){
		fade_in();
  de:	bb df       	rcall	.-138    	; 0x56 <fade_in>
  e0:	8f e7       	ldi	r24, 0x7F	; 127
  e2:	9a e1       	ldi	r25, 0x1A	; 26
  e4:	a6 e0       	ldi	r26, 0x06	; 6
  e6:	81 50       	subi	r24, 0x01	; 1
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	a0 40       	sbci	r26, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <tardis_light+0x58>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <tardis_light+0x62>
  f0:	00 00       	nop
		_delay_ms(250);
		fade_out();
  f2:	bf df       	rcall	.-130    	; 0x72 <fade_out>
  f4:	8f e7       	ldi	r24, 0x7F	; 127
  f6:	9a e1       	ldi	r25, 0x1A	; 26
  f8:	a6 e0       	ldi	r26, 0x06	; 6
  fa:	81 50       	subi	r24, 0x01	; 1
  fc:	90 40       	sbci	r25, 0x00	; 0
  fe:	a0 40       	sbci	r26, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <tardis_light+0x6c>
 102:	00 c0       	rjmp	.+0      	; 0x104 <tardis_light+0x76>
 104:	00 00       	nop
	
		_delay_ms(250);
	}
}
 106:	08 95       	ret

00000108 <go_to_sleep>:

void go_to_sleep(){
 	 cli();
 108:	f8 94       	cli
	 set_sleep_mode(SLEEP_MODE_PWR_DOWN); 
 10a:	85 b7       	in	r24, 0x35	; 53
 10c:	87 7e       	andi	r24, 0xE7	; 231
 10e:	80 61       	ori	r24, 0x10	; 16
 110:	85 bf       	out	0x35, r24	; 53
	 sleep_enable();
 112:	85 b7       	in	r24, 0x35	; 53
 114:	80 62       	ori	r24, 0x20	; 32
 116:	85 bf       	out	0x35, r24	; 53
     sei();
 118:	78 94       	sei
	 sleep_cpu();
 11a:	88 95       	sleep
	 sleep_disable();
 11c:	85 b7       	in	r24, 0x35	; 53
 11e:	8f 7d       	andi	r24, 0xDF	; 223
 120:	85 bf       	out	0x35, r24	; 53
     //sei();	
}
 122:	08 95       	ret

00000124 <__vector_1>:


ISR(INT0_vect){
 124:	1f 92       	push	r1
 126:	0f 92       	push	r0
 128:	0f b6       	in	r0, 0x3f	; 63
 12a:	0f 92       	push	r0
 12c:	11 24       	eor	r1, r1
 12e:	2f 93       	push	r18
 130:	3f 93       	push	r19
 132:	4f 93       	push	r20
 134:	5f 93       	push	r21
 136:	6f 93       	push	r22
 138:	7f 93       	push	r23
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26
 140:	bf 93       	push	r27
 142:	ef 93       	push	r30
 144:	ff 93       	push	r31
	
	cli();
 146:	f8 94       	cli

	
//	PORTB ^= _BV(PB4);
//	_delay_ms(250);

	tardis_light();
 148:	a2 df       	rcall	.-188    	; 0x8e <tardis_light>


	sei();
 14a:	78 94       	sei
 14c:	8f ef       	ldi	r24, 0xFF	; 255
 14e:	90 e7       	ldi	r25, 0x70	; 112
 150:	a2 e0       	ldi	r26, 0x02	; 2
 152:	81 50       	subi	r24, 0x01	; 1
 154:	90 40       	sbci	r25, 0x00	; 0
 156:	a0 40       	sbci	r26, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <__vector_1+0x2e>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <__vector_1+0x38>
 15c:	00 00       	nop

	_delay_ms(100);
	go_to_sleep();
 15e:	d4 df       	rcall	.-88     	; 0x108 <go_to_sleep>
}
 160:	ff 91       	pop	r31
 162:	ef 91       	pop	r30
 164:	bf 91       	pop	r27
 166:	af 91       	pop	r26
 168:	9f 91       	pop	r25
 16a:	8f 91       	pop	r24
 16c:	7f 91       	pop	r23
 16e:	6f 91       	pop	r22
 170:	5f 91       	pop	r21
 172:	4f 91       	pop	r20
 174:	3f 91       	pop	r19
 176:	2f 91       	pop	r18
 178:	0f 90       	pop	r0
 17a:	0f be       	out	0x3f, r0	; 63
 17c:	0f 90       	pop	r0
 17e:	1f 90       	pop	r1
 180:	18 95       	reti

00000182 <main>:


int main(){

	//Status LED
	DDRB |= (1<<PB4);
 182:	bc 9a       	sbi	0x17, 4	; 23
	PORTB &= ~_BV(PB4); 
 184:	c4 98       	cbi	0x18, 4	; 24

	//Main LED
	DDRB |= (1<<PB1);  // make OC0B PWM output pin
 186:	b9 9a       	sbi	0x17, 1	; 23

	//PWM
	TCCR0A = (1<<COM0B1)|(1<<WGM00);  // mode #1
 188:	81 e2       	ldi	r24, 0x21	; 33
 18a:	8a bd       	out	0x2a, r24	; 42
	TCCR0B = (1<<CS00);  // div8 (any speed would do)
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	83 bf       	out	0x33, r24	; 51


	//INT0 enable:
	MCUCR&=~(_BV(ISC01)) | ~(_BV(ISC00));
 190:	85 b7       	in	r24, 0x35	; 53
 192:	85 bf       	out	0x35, r24	; 53
	GIMSK|=_BV(INT0);
 194:	8b b7       	in	r24, 0x3b	; 59
 196:	80 64       	ori	r24, 0x40	; 64
 198:	8b bf       	out	0x3b, r24	; 59

	//PB2 as input for INT0
	DDRB &=~_BV(PB2);
 19a:	ba 98       	cbi	0x17, 2	; 23
	PORTB |= (1<<PB2);
 19c:	c2 9a       	sbi	0x18, 2	; 24
	
	sei();
 19e:	78 94       	sei

	//Disable ADC, saves ~230uA
	ADCSRA &= ~(1<<ADEN);
 1a0:	37 98       	cbi	0x06, 7	; 6
	
	
	tardis_light();
 1a2:	75 df       	rcall	.-278    	; 0x8e <tardis_light>
	
	

	go_to_sleep();
 1a4:	b1 df       	rcall	.-158    	; 0x108 <go_to_sleep>
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <main+0x24>

000001a8 <_exit>:
 1a8:	f8 94       	cli

000001aa <__stop_program>:
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <__stop_program>
